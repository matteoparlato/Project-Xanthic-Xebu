/* 
 * Power PLM Connector
 *
 * The custom connector used by Power PLM by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault21Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault21Value :  IEquatable<InlineResponseDefault21Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault21Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="sourceType">sourceType.</param>
        /// <param name="sourceNo">sourceNo.</param>
        /// <param name="lineNo">lineNo.</param>
        /// <param name="type">type.</param>
        /// <param name="typeAsInt">typeAsInt.</param>
        /// <param name="typeName">typeName.</param>
        /// <param name="no">no.</param>
        /// <param name="description">description.</param>
        /// <param name="description2">description2.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="quantityBase">quantityBase.</param>
        /// <param name="quantityPerBaseUnitOfMeasure">quantityPerBaseUnitOfMeasure.</param>
        /// <param name="unitOfMeasureCode">unitOfMeasureCode.</param>
        /// <param name="variantCode">variantCode.</param>
        /// <param name="locationCode">locationCode.</param>
        /// <param name="binCode">binCode.</param>
        /// <param name="inventory">inventory.</param>
        /// <param name="jobNo">jobNo.</param>
        /// <param name="jobTaskNo">jobTaskNo.</param>
        /// <param name="postedQuantity">postedQuantity.</param>
        /// <param name="maintenancePointQuantity">maintenancePointQuantity.</param>
        /// <param name="workRequestNoFilter">workRequestNoFilter.</param>
        public InlineResponseDefault21Value(string odataEtag = default(string), string systemId = default(string), decimal? sourceType = default(decimal?), string sourceNo = default(string), decimal? lineNo = default(decimal?), string type = default(string), decimal? typeAsInt = default(decimal?), string typeName = default(string), string no = default(string), string description = default(string), string description2 = default(string), decimal? quantity = default(decimal?), decimal? quantityBase = default(decimal?), decimal? quantityPerBaseUnitOfMeasure = default(decimal?), string unitOfMeasureCode = default(string), string variantCode = default(string), string locationCode = default(string), string binCode = default(string), decimal? inventory = default(decimal?), string jobNo = default(string), string jobTaskNo = default(string), decimal? postedQuantity = default(decimal?), decimal? maintenancePointQuantity = default(decimal?), string workRequestNoFilter = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.SourceType = sourceType;
            this.SourceNo = sourceNo;
            this.LineNo = lineNo;
            this.Type = type;
            this.TypeAsInt = typeAsInt;
            this.TypeName = typeName;
            this.No = no;
            this.Description = description;
            this.Description2 = description2;
            this.Quantity = quantity;
            this.QuantityBase = quantityBase;
            this.QuantityPerBaseUnitOfMeasure = quantityPerBaseUnitOfMeasure;
            this.UnitOfMeasureCode = unitOfMeasureCode;
            this.VariantCode = variantCode;
            this.LocationCode = locationCode;
            this.BinCode = binCode;
            this.Inventory = inventory;
            this.JobNo = jobNo;
            this.JobTaskNo = jobTaskNo;
            this.PostedQuantity = postedQuantity;
            this.MaintenancePointQuantity = maintenancePointQuantity;
            this.WorkRequestNoFilter = workRequestNoFilter;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// sourceType
        /// </summary>
        /// <value>sourceType</value>
        [DataMember(Name="sourceType", EmitDefaultValue=false)]
        public decimal? SourceType { get; set; }

        /// <summary>
        /// sourceNo
        /// </summary>
        /// <value>sourceNo</value>
        [DataMember(Name="sourceNo", EmitDefaultValue=false)]
        public string SourceNo { get; set; }

        /// <summary>
        /// lineNo
        /// </summary>
        /// <value>lineNo</value>
        [DataMember(Name="lineNo", EmitDefaultValue=false)]
        public decimal? LineNo { get; set; }

        /// <summary>
        /// type
        /// </summary>
        /// <value>type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// typeAsInt
        /// </summary>
        /// <value>typeAsInt</value>
        [DataMember(Name="typeAsInt", EmitDefaultValue=false)]
        public decimal? TypeAsInt { get; set; }

        /// <summary>
        /// typeName
        /// </summary>
        /// <value>typeName</value>
        [DataMember(Name="typeName", EmitDefaultValue=false)]
        public string TypeName { get; set; }

        /// <summary>
        /// no
        /// </summary>
        /// <value>no</value>
        [DataMember(Name="no", EmitDefaultValue=false)]
        public string No { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// description2
        /// </summary>
        /// <value>description2</value>
        [DataMember(Name="description2", EmitDefaultValue=false)]
        public string Description2 { get; set; }

        /// <summary>
        /// quantity
        /// </summary>
        /// <value>quantity</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// quantityBase
        /// </summary>
        /// <value>quantityBase</value>
        [DataMember(Name="quantityBase", EmitDefaultValue=false)]
        public decimal? QuantityBase { get; set; }

        /// <summary>
        /// quantityPerBaseUnitOfMeasure
        /// </summary>
        /// <value>quantityPerBaseUnitOfMeasure</value>
        [DataMember(Name="quantityPerBaseUnitOfMeasure", EmitDefaultValue=false)]
        public decimal? QuantityPerBaseUnitOfMeasure { get; set; }

        /// <summary>
        /// unitOfMeasureCode
        /// </summary>
        /// <value>unitOfMeasureCode</value>
        [DataMember(Name="unitOfMeasureCode", EmitDefaultValue=false)]
        public string UnitOfMeasureCode { get; set; }

        /// <summary>
        /// variantCode
        /// </summary>
        /// <value>variantCode</value>
        [DataMember(Name="variantCode", EmitDefaultValue=false)]
        public string VariantCode { get; set; }

        /// <summary>
        /// locationCode
        /// </summary>
        /// <value>locationCode</value>
        [DataMember(Name="locationCode", EmitDefaultValue=false)]
        public string LocationCode { get; set; }

        /// <summary>
        /// binCode
        /// </summary>
        /// <value>binCode</value>
        [DataMember(Name="binCode", EmitDefaultValue=false)]
        public string BinCode { get; set; }

        /// <summary>
        /// inventory
        /// </summary>
        /// <value>inventory</value>
        [DataMember(Name="inventory", EmitDefaultValue=false)]
        public decimal? Inventory { get; set; }

        /// <summary>
        /// jobNo
        /// </summary>
        /// <value>jobNo</value>
        [DataMember(Name="jobNo", EmitDefaultValue=false)]
        public string JobNo { get; set; }

        /// <summary>
        /// jobTaskNo
        /// </summary>
        /// <value>jobTaskNo</value>
        [DataMember(Name="jobTaskNo", EmitDefaultValue=false)]
        public string JobTaskNo { get; set; }

        /// <summary>
        /// postedQuantity
        /// </summary>
        /// <value>postedQuantity</value>
        [DataMember(Name="postedQuantity", EmitDefaultValue=false)]
        public decimal? PostedQuantity { get; set; }

        /// <summary>
        /// maintenancePointQuantity
        /// </summary>
        /// <value>maintenancePointQuantity</value>
        [DataMember(Name="maintenancePointQuantity", EmitDefaultValue=false)]
        public decimal? MaintenancePointQuantity { get; set; }

        /// <summary>
        /// workRequestNoFilter
        /// </summary>
        /// <value>workRequestNoFilter</value>
        [DataMember(Name="workRequestNoFilter", EmitDefaultValue=false)]
        public string WorkRequestNoFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault21Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  SourceNo: ").Append(SourceNo).Append("\n");
            sb.Append("  LineNo: ").Append(LineNo).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeAsInt: ").Append(TypeAsInt).Append("\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("  No: ").Append(No).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Description2: ").Append(Description2).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuantityBase: ").Append(QuantityBase).Append("\n");
            sb.Append("  QuantityPerBaseUnitOfMeasure: ").Append(QuantityPerBaseUnitOfMeasure).Append("\n");
            sb.Append("  UnitOfMeasureCode: ").Append(UnitOfMeasureCode).Append("\n");
            sb.Append("  VariantCode: ").Append(VariantCode).Append("\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  BinCode: ").Append(BinCode).Append("\n");
            sb.Append("  Inventory: ").Append(Inventory).Append("\n");
            sb.Append("  JobNo: ").Append(JobNo).Append("\n");
            sb.Append("  JobTaskNo: ").Append(JobTaskNo).Append("\n");
            sb.Append("  PostedQuantity: ").Append(PostedQuantity).Append("\n");
            sb.Append("  MaintenancePointQuantity: ").Append(MaintenancePointQuantity).Append("\n");
            sb.Append("  WorkRequestNoFilter: ").Append(WorkRequestNoFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault21Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault21Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault21Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault21Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.SourceType == input.SourceType ||
                    (this.SourceType != null &&
                    this.SourceType.Equals(input.SourceType))
                ) && 
                (
                    this.SourceNo == input.SourceNo ||
                    (this.SourceNo != null &&
                    this.SourceNo.Equals(input.SourceNo))
                ) && 
                (
                    this.LineNo == input.LineNo ||
                    (this.LineNo != null &&
                    this.LineNo.Equals(input.LineNo))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TypeAsInt == input.TypeAsInt ||
                    (this.TypeAsInt != null &&
                    this.TypeAsInt.Equals(input.TypeAsInt))
                ) && 
                (
                    this.TypeName == input.TypeName ||
                    (this.TypeName != null &&
                    this.TypeName.Equals(input.TypeName))
                ) && 
                (
                    this.No == input.No ||
                    (this.No != null &&
                    this.No.Equals(input.No))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Description2 == input.Description2 ||
                    (this.Description2 != null &&
                    this.Description2.Equals(input.Description2))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.QuantityBase == input.QuantityBase ||
                    (this.QuantityBase != null &&
                    this.QuantityBase.Equals(input.QuantityBase))
                ) && 
                (
                    this.QuantityPerBaseUnitOfMeasure == input.QuantityPerBaseUnitOfMeasure ||
                    (this.QuantityPerBaseUnitOfMeasure != null &&
                    this.QuantityPerBaseUnitOfMeasure.Equals(input.QuantityPerBaseUnitOfMeasure))
                ) && 
                (
                    this.UnitOfMeasureCode == input.UnitOfMeasureCode ||
                    (this.UnitOfMeasureCode != null &&
                    this.UnitOfMeasureCode.Equals(input.UnitOfMeasureCode))
                ) && 
                (
                    this.VariantCode == input.VariantCode ||
                    (this.VariantCode != null &&
                    this.VariantCode.Equals(input.VariantCode))
                ) && 
                (
                    this.LocationCode == input.LocationCode ||
                    (this.LocationCode != null &&
                    this.LocationCode.Equals(input.LocationCode))
                ) && 
                (
                    this.BinCode == input.BinCode ||
                    (this.BinCode != null &&
                    this.BinCode.Equals(input.BinCode))
                ) && 
                (
                    this.Inventory == input.Inventory ||
                    (this.Inventory != null &&
                    this.Inventory.Equals(input.Inventory))
                ) && 
                (
                    this.JobNo == input.JobNo ||
                    (this.JobNo != null &&
                    this.JobNo.Equals(input.JobNo))
                ) && 
                (
                    this.JobTaskNo == input.JobTaskNo ||
                    (this.JobTaskNo != null &&
                    this.JobTaskNo.Equals(input.JobTaskNo))
                ) && 
                (
                    this.PostedQuantity == input.PostedQuantity ||
                    (this.PostedQuantity != null &&
                    this.PostedQuantity.Equals(input.PostedQuantity))
                ) && 
                (
                    this.MaintenancePointQuantity == input.MaintenancePointQuantity ||
                    (this.MaintenancePointQuantity != null &&
                    this.MaintenancePointQuantity.Equals(input.MaintenancePointQuantity))
                ) && 
                (
                    this.WorkRequestNoFilter == input.WorkRequestNoFilter ||
                    (this.WorkRequestNoFilter != null &&
                    this.WorkRequestNoFilter.Equals(input.WorkRequestNoFilter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.SourceType != null)
                    hashCode = hashCode * 59 + this.SourceType.GetHashCode();
                if (this.SourceNo != null)
                    hashCode = hashCode * 59 + this.SourceNo.GetHashCode();
                if (this.LineNo != null)
                    hashCode = hashCode * 59 + this.LineNo.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TypeAsInt != null)
                    hashCode = hashCode * 59 + this.TypeAsInt.GetHashCode();
                if (this.TypeName != null)
                    hashCode = hashCode * 59 + this.TypeName.GetHashCode();
                if (this.No != null)
                    hashCode = hashCode * 59 + this.No.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Description2 != null)
                    hashCode = hashCode * 59 + this.Description2.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.QuantityBase != null)
                    hashCode = hashCode * 59 + this.QuantityBase.GetHashCode();
                if (this.QuantityPerBaseUnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.QuantityPerBaseUnitOfMeasure.GetHashCode();
                if (this.UnitOfMeasureCode != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasureCode.GetHashCode();
                if (this.VariantCode != null)
                    hashCode = hashCode * 59 + this.VariantCode.GetHashCode();
                if (this.LocationCode != null)
                    hashCode = hashCode * 59 + this.LocationCode.GetHashCode();
                if (this.BinCode != null)
                    hashCode = hashCode * 59 + this.BinCode.GetHashCode();
                if (this.Inventory != null)
                    hashCode = hashCode * 59 + this.Inventory.GetHashCode();
                if (this.JobNo != null)
                    hashCode = hashCode * 59 + this.JobNo.GetHashCode();
                if (this.JobTaskNo != null)
                    hashCode = hashCode * 59 + this.JobTaskNo.GetHashCode();
                if (this.PostedQuantity != null)
                    hashCode = hashCode * 59 + this.PostedQuantity.GetHashCode();
                if (this.MaintenancePointQuantity != null)
                    hashCode = hashCode * 59 + this.MaintenancePointQuantity.GetHashCode();
                if (this.WorkRequestNoFilter != null)
                    hashCode = hashCode * 59 + this.WorkRequestNoFilter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
