/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault23Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault23Value :  IEquatable<InlineResponseDefault23Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault23Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="no">no.</param>
        /// <param name="description">description.</param>
        /// <param name="location">location.</param>
        /// <param name="panelLanguage">panelLanguage.</param>
        /// <param name="panelTheme">panelTheme.</param>
        /// <param name="productionResponsibles">productionResponsibles.</param>
        /// <param name="qualityResponsibles">qualityResponsibles.</param>
        /// <param name="operationFollowUp">operationFollowUp.</param>
        /// <param name="operationFollowUpAsInt">operationFollowUpAsInt.</param>
        /// <param name="operationFollowUpName">operationFollowUpName.</param>
        /// <param name="sessionTimeOut">sessionTimeOut.</param>
        /// <param name="iotRefresh">iotRefresh.</param>
        /// <param name="refresh">refresh.</param>
        /// <param name="operationWarningForTeam">operationWarningForTeam.</param>
        /// <param name="linkId">linkId.</param>
        /// <param name="connected">connected.</param>
        /// <param name="skipResourceFilters">skipResourceFilters.</param>
        public InlineResponseDefault23Value(string odataEtag = default(string), string systemId = default(string), string no = default(string), string description = default(string), string location = default(string), string panelLanguage = default(string), string panelTheme = default(string), decimal? productionResponsibles = default(decimal?), decimal? qualityResponsibles = default(decimal?), string operationFollowUp = default(string), decimal? operationFollowUpAsInt = default(decimal?), string operationFollowUpName = default(string), decimal? sessionTimeOut = default(decimal?), decimal? iotRefresh = default(decimal?), decimal? refresh = default(decimal?), bool? operationWarningForTeam = default(bool?), string linkId = default(string), bool? connected = default(bool?), bool? skipResourceFilters = default(bool?))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.No = no;
            this.Description = description;
            this.Location = location;
            this.PanelLanguage = panelLanguage;
            this.PanelTheme = panelTheme;
            this.ProductionResponsibles = productionResponsibles;
            this.QualityResponsibles = qualityResponsibles;
            this.OperationFollowUp = operationFollowUp;
            this.OperationFollowUpAsInt = operationFollowUpAsInt;
            this.OperationFollowUpName = operationFollowUpName;
            this.SessionTimeOut = sessionTimeOut;
            this.IotRefresh = iotRefresh;
            this.Refresh = refresh;
            this.OperationWarningForTeam = operationWarningForTeam;
            this.LinkId = linkId;
            this.Connected = connected;
            this.SkipResourceFilters = skipResourceFilters;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// no
        /// </summary>
        /// <value>no</value>
        [DataMember(Name="no", EmitDefaultValue=false)]
        public string No { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// location
        /// </summary>
        /// <value>location</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// panelLanguage
        /// </summary>
        /// <value>panelLanguage</value>
        [DataMember(Name="panelLanguage", EmitDefaultValue=false)]
        public string PanelLanguage { get; set; }

        /// <summary>
        /// panelTheme
        /// </summary>
        /// <value>panelTheme</value>
        [DataMember(Name="panelTheme", EmitDefaultValue=false)]
        public string PanelTheme { get; set; }

        /// <summary>
        /// productionResponsibles
        /// </summary>
        /// <value>productionResponsibles</value>
        [DataMember(Name="productionResponsibles", EmitDefaultValue=false)]
        public decimal? ProductionResponsibles { get; set; }

        /// <summary>
        /// qualityResponsibles
        /// </summary>
        /// <value>qualityResponsibles</value>
        [DataMember(Name="qualityResponsibles", EmitDefaultValue=false)]
        public decimal? QualityResponsibles { get; set; }

        /// <summary>
        /// operationFollowUp
        /// </summary>
        /// <value>operationFollowUp</value>
        [DataMember(Name="operationFollowUp", EmitDefaultValue=false)]
        public string OperationFollowUp { get; set; }

        /// <summary>
        /// operationFollowUpAsInt
        /// </summary>
        /// <value>operationFollowUpAsInt</value>
        [DataMember(Name="operationFollowUpAsInt", EmitDefaultValue=false)]
        public decimal? OperationFollowUpAsInt { get; set; }

        /// <summary>
        /// operationFollowUpName
        /// </summary>
        /// <value>operationFollowUpName</value>
        [DataMember(Name="operationFollowUpName", EmitDefaultValue=false)]
        public string OperationFollowUpName { get; set; }

        /// <summary>
        /// sessionTimeOut
        /// </summary>
        /// <value>sessionTimeOut</value>
        [DataMember(Name="sessionTimeOut", EmitDefaultValue=false)]
        public decimal? SessionTimeOut { get; set; }

        /// <summary>
        /// iotRefresh
        /// </summary>
        /// <value>iotRefresh</value>
        [DataMember(Name="iotRefresh", EmitDefaultValue=false)]
        public decimal? IotRefresh { get; set; }

        /// <summary>
        /// refresh
        /// </summary>
        /// <value>refresh</value>
        [DataMember(Name="refresh", EmitDefaultValue=false)]
        public decimal? Refresh { get; set; }

        /// <summary>
        /// operationWarningForTeam
        /// </summary>
        /// <value>operationWarningForTeam</value>
        [DataMember(Name="operationWarningForTeam", EmitDefaultValue=false)]
        public bool? OperationWarningForTeam { get; set; }

        /// <summary>
        /// linkId
        /// </summary>
        /// <value>linkId</value>
        [DataMember(Name="linkId", EmitDefaultValue=false)]
        public string LinkId { get; set; }

        /// <summary>
        /// connected
        /// </summary>
        /// <value>connected</value>
        [DataMember(Name="connected", EmitDefaultValue=false)]
        public bool? Connected { get; set; }

        /// <summary>
        /// skipResourceFilters
        /// </summary>
        /// <value>skipResourceFilters</value>
        [DataMember(Name="skipResourceFilters", EmitDefaultValue=false)]
        public bool? SkipResourceFilters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault23Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  No: ").Append(No).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  PanelLanguage: ").Append(PanelLanguage).Append("\n");
            sb.Append("  PanelTheme: ").Append(PanelTheme).Append("\n");
            sb.Append("  ProductionResponsibles: ").Append(ProductionResponsibles).Append("\n");
            sb.Append("  QualityResponsibles: ").Append(QualityResponsibles).Append("\n");
            sb.Append("  OperationFollowUp: ").Append(OperationFollowUp).Append("\n");
            sb.Append("  OperationFollowUpAsInt: ").Append(OperationFollowUpAsInt).Append("\n");
            sb.Append("  OperationFollowUpName: ").Append(OperationFollowUpName).Append("\n");
            sb.Append("  SessionTimeOut: ").Append(SessionTimeOut).Append("\n");
            sb.Append("  IotRefresh: ").Append(IotRefresh).Append("\n");
            sb.Append("  Refresh: ").Append(Refresh).Append("\n");
            sb.Append("  OperationWarningForTeam: ").Append(OperationWarningForTeam).Append("\n");
            sb.Append("  LinkId: ").Append(LinkId).Append("\n");
            sb.Append("  Connected: ").Append(Connected).Append("\n");
            sb.Append("  SkipResourceFilters: ").Append(SkipResourceFilters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault23Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault23Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault23Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault23Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.No == input.No ||
                    (this.No != null &&
                    this.No.Equals(input.No))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.PanelLanguage == input.PanelLanguage ||
                    (this.PanelLanguage != null &&
                    this.PanelLanguage.Equals(input.PanelLanguage))
                ) && 
                (
                    this.PanelTheme == input.PanelTheme ||
                    (this.PanelTheme != null &&
                    this.PanelTheme.Equals(input.PanelTheme))
                ) && 
                (
                    this.ProductionResponsibles == input.ProductionResponsibles ||
                    (this.ProductionResponsibles != null &&
                    this.ProductionResponsibles.Equals(input.ProductionResponsibles))
                ) && 
                (
                    this.QualityResponsibles == input.QualityResponsibles ||
                    (this.QualityResponsibles != null &&
                    this.QualityResponsibles.Equals(input.QualityResponsibles))
                ) && 
                (
                    this.OperationFollowUp == input.OperationFollowUp ||
                    (this.OperationFollowUp != null &&
                    this.OperationFollowUp.Equals(input.OperationFollowUp))
                ) && 
                (
                    this.OperationFollowUpAsInt == input.OperationFollowUpAsInt ||
                    (this.OperationFollowUpAsInt != null &&
                    this.OperationFollowUpAsInt.Equals(input.OperationFollowUpAsInt))
                ) && 
                (
                    this.OperationFollowUpName == input.OperationFollowUpName ||
                    (this.OperationFollowUpName != null &&
                    this.OperationFollowUpName.Equals(input.OperationFollowUpName))
                ) && 
                (
                    this.SessionTimeOut == input.SessionTimeOut ||
                    (this.SessionTimeOut != null &&
                    this.SessionTimeOut.Equals(input.SessionTimeOut))
                ) && 
                (
                    this.IotRefresh == input.IotRefresh ||
                    (this.IotRefresh != null &&
                    this.IotRefresh.Equals(input.IotRefresh))
                ) && 
                (
                    this.Refresh == input.Refresh ||
                    (this.Refresh != null &&
                    this.Refresh.Equals(input.Refresh))
                ) && 
                (
                    this.OperationWarningForTeam == input.OperationWarningForTeam ||
                    (this.OperationWarningForTeam != null &&
                    this.OperationWarningForTeam.Equals(input.OperationWarningForTeam))
                ) && 
                (
                    this.LinkId == input.LinkId ||
                    (this.LinkId != null &&
                    this.LinkId.Equals(input.LinkId))
                ) && 
                (
                    this.Connected == input.Connected ||
                    (this.Connected != null &&
                    this.Connected.Equals(input.Connected))
                ) && 
                (
                    this.SkipResourceFilters == input.SkipResourceFilters ||
                    (this.SkipResourceFilters != null &&
                    this.SkipResourceFilters.Equals(input.SkipResourceFilters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.No != null)
                    hashCode = hashCode * 59 + this.No.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.PanelLanguage != null)
                    hashCode = hashCode * 59 + this.PanelLanguage.GetHashCode();
                if (this.PanelTheme != null)
                    hashCode = hashCode * 59 + this.PanelTheme.GetHashCode();
                if (this.ProductionResponsibles != null)
                    hashCode = hashCode * 59 + this.ProductionResponsibles.GetHashCode();
                if (this.QualityResponsibles != null)
                    hashCode = hashCode * 59 + this.QualityResponsibles.GetHashCode();
                if (this.OperationFollowUp != null)
                    hashCode = hashCode * 59 + this.OperationFollowUp.GetHashCode();
                if (this.OperationFollowUpAsInt != null)
                    hashCode = hashCode * 59 + this.OperationFollowUpAsInt.GetHashCode();
                if (this.OperationFollowUpName != null)
                    hashCode = hashCode * 59 + this.OperationFollowUpName.GetHashCode();
                if (this.SessionTimeOut != null)
                    hashCode = hashCode * 59 + this.SessionTimeOut.GetHashCode();
                if (this.IotRefresh != null)
                    hashCode = hashCode * 59 + this.IotRefresh.GetHashCode();
                if (this.Refresh != null)
                    hashCode = hashCode * 59 + this.Refresh.GetHashCode();
                if (this.OperationWarningForTeam != null)
                    hashCode = hashCode * 59 + this.OperationWarningForTeam.GetHashCode();
                if (this.LinkId != null)
                    hashCode = hashCode * 59 + this.LinkId.GetHashCode();
                if (this.Connected != null)
                    hashCode = hashCode * 59 + this.Connected.GetHashCode();
                if (this.SkipResourceFilters != null)
                    hashCode = hashCode * 59 + this.SkipResourceFilters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
