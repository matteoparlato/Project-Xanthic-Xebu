/* 
 * Power PLM Connector
 *
 * The custom connector used by Power PLM by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// CS_ConvertTimeSpan
        /// </summary>
        /// <remarks>
        /// CS_ConvertTimeSpan
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponseDefault33</returns>
        InlineResponseDefault33 CSConvertTimeSpan (CSConvertTimeSpanBody body);

        /// <summary>
        /// CS_ConvertTimeSpan
        /// </summary>
        /// <remarks>
        /// CS_ConvertTimeSpan
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponseDefault33</returns>
        ApiResponse<InlineResponseDefault33> CSConvertTimeSpanWithHttpInfo (CSConvertTimeSpanBody body);
        /// <summary>
        /// CS_DecodeBase64
        /// </summary>
        /// <remarks>
        /// CS_DecodeBase64
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponseDefault33</returns>
        InlineResponseDefault33 CSDecodeBase64 (CSDecodeBase64Body body);

        /// <summary>
        /// CS_DecodeBase64
        /// </summary>
        /// <remarks>
        /// CS_DecodeBase64
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponseDefault33</returns>
        ApiResponse<InlineResponseDefault33> CSDecodeBase64WithHttpInfo (CSDecodeBase64Body body);
        /// <summary>
        /// CS_StringToHexColor
        /// </summary>
        /// <remarks>
        /// CS_StringToHexColor
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponseDefault34</returns>
        InlineResponseDefault34 CSStringToHexColor (CSStringToHexColorBody body);

        /// <summary>
        /// CS_StringToHexColor
        /// </summary>
        /// <remarks>
        /// CS_StringToHexColor
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponseDefault34</returns>
        ApiResponse<InlineResponseDefault34> CSStringToHexColorWithHttpInfo (CSStringToHexColorBody body);
        /// <summary>
        /// GetCompanies
        /// </summary>
        /// <remarks>
        /// GetCompanies
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault</returns>
        InlineResponseDefault GetCompanies (string orderby = null, string select = null);

        /// <summary>
        /// GetCompanies
        /// </summary>
        /// <remarks>
        /// GetCompanies
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault</returns>
        ApiResponse<InlineResponseDefault> GetCompaniesWithHttpInfo (string orderby = null, string select = null);
        /// <summary>
        /// PLM_Execute
        /// </summary>
        /// <remarks>
        /// PLM_Execute
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>InlineResponseDefault32</returns>
        InlineResponseDefault32 PLMExecute (ODataV4POWERPLMExecuteBody body, string company);

        /// <summary>
        /// PLM_Execute
        /// </summary>
        /// <remarks>
        /// PLM_Execute
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>ApiResponse of InlineResponseDefault32</returns>
        ApiResponse<InlineResponseDefault32> PLMExecuteWithHttpInfo (ODataV4POWERPLMExecuteBody body, string company);
        /// <summary>
        /// PLM_GetActionParameters
        /// </summary>
        /// <remarks>
        /// PLM_GetActionParameters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault1</returns>
        InlineResponseDefault1 PLMGetActionParameters (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// PLM_GetActionParameters
        /// </summary>
        /// <remarks>
        /// PLM_GetActionParameters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault1</returns>
        ApiResponse<InlineResponseDefault1> PLMGetActionParametersWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        /// <summary>
        /// PLM_GetAttachments
        /// </summary>
        /// <remarks>
        /// PLM_GetAttachments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault2</returns>
        InlineResponseDefault2 PLMGetAttachments (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetAttachments
        /// </summary>
        /// <remarks>
        /// PLM_GetAttachments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault2</returns>
        ApiResponse<InlineResponseDefault2> PLMGetAttachmentsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetBins
        /// </summary>
        /// <remarks>
        /// PLM_GetBins
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault13</returns>
        InlineResponseDefault13 PLMGetBins (string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// PLM_GetBins
        /// </summary>
        /// <remarks>
        /// PLM_GetBins
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault13</returns>
        ApiResponse<InlineResponseDefault13> PLMGetBinsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        /// <summary>
        /// PLM_GetCaptionTranslations
        /// </summary>
        /// <remarks>
        /// PLM_GetCaptionTranslations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault3</returns>
        InlineResponseDefault3 PLMGetCaptionTranslations (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetCaptionTranslations
        /// </summary>
        /// <remarks>
        /// PLM_GetCaptionTranslations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault3</returns>
        ApiResponse<InlineResponseDefault3> PLMGetCaptionTranslationsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetCommentLines
        /// </summary>
        /// <remarks>
        /// PLM_GetCommentLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault4</returns>
        InlineResponseDefault4 PLMGetCommentLines (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetCommentLines
        /// </summary>
        /// <remarks>
        /// PLM_GetCommentLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault4</returns>
        ApiResponse<InlineResponseDefault4> PLMGetCommentLinesWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetEmployees
        /// </summary>
        /// <remarks>
        /// PLM_GetEmployees
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault5</returns>
        InlineResponseDefault5 PLMGetEmployees (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetEmployees
        /// </summary>
        /// <remarks>
        /// PLM_GetEmployees
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault5</returns>
        ApiResponse<InlineResponseDefault5> PLMGetEmployeesWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetFaultAreas
        /// </summary>
        /// <remarks>
        /// PLM_GetFaultAreas
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault22</returns>
        InlineResponseDefault22 PLMGetFaultAreas (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetFaultAreas
        /// </summary>
        /// <remarks>
        /// PLM_GetFaultAreas
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault22</returns>
        ApiResponse<InlineResponseDefault22> PLMGetFaultAreasWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetFaultReasons
        /// </summary>
        /// <remarks>
        /// PLM_GetFaultReasons
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault22</returns>
        InlineResponseDefault22 PLMGetFaultReasons (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetFaultReasons
        /// </summary>
        /// <remarks>
        /// PLM_GetFaultReasons
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault22</returns>
        ApiResponse<InlineResponseDefault22> PLMGetFaultReasonsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetFaultSubAreas
        /// </summary>
        /// <remarks>
        /// PLM_GetFaultSubAreas
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault24</returns>
        InlineResponseDefault24 PLMGetFaultSubAreas (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetFaultSubAreas
        /// </summary>
        /// <remarks>
        /// PLM_GetFaultSubAreas
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault24</returns>
        ApiResponse<InlineResponseDefault24> PLMGetFaultSubAreasWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetFaultSymptoms
        /// </summary>
        /// <remarks>
        /// PLM_GetFaultSymptoms
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault22</returns>
        InlineResponseDefault22 PLMGetFaultSymptoms (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetFaultSymptoms
        /// </summary>
        /// <remarks>
        /// PLM_GetFaultSymptoms
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault22</returns>
        ApiResponse<InlineResponseDefault22> PLMGetFaultSymptomsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetFaults
        /// </summary>
        /// <remarks>
        /// PLM_GetFaults
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault25</returns>
        InlineResponseDefault25 PLMGetFaults (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetFaults
        /// </summary>
        /// <remarks>
        /// PLM_GetFaults
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault25</returns>
        ApiResponse<InlineResponseDefault25> PLMGetFaultsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetItemVariants
        /// </summary>
        /// <remarks>
        /// PLM_GetItemVariants
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault11</returns>
        InlineResponseDefault11 PLMGetItemVariants (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetItemVariants
        /// </summary>
        /// <remarks>
        /// PLM_GetItemVariants
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault11</returns>
        ApiResponse<InlineResponseDefault11> PLMGetItemVariantsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetItems
        /// </summary>
        /// <remarks>
        /// PLM_GetItems
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault10</returns>
        InlineResponseDefault10 PLMGetItems (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// PLM_GetItems
        /// </summary>
        /// <remarks>
        /// PLM_GetItems
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault10</returns>
        ApiResponse<InlineResponseDefault10> PLMGetItemsWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        /// <summary>
        /// PLM_GetLocations
        /// </summary>
        /// <remarks>
        /// PLM_GetLocations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault12</returns>
        InlineResponseDefault12 PLMGetLocations (string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// PLM_GetLocations
        /// </summary>
        /// <remarks>
        /// PLM_GetLocations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault12</returns>
        ApiResponse<InlineResponseDefault12> PLMGetLocationsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        /// <summary>
        /// PLM_GetMachineCharacteristicValues
        /// </summary>
        /// <remarks>
        /// PLM_GetMachineCharacteristicValues
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault15</returns>
        InlineResponseDefault15 PLMGetMachineCharacteristicValues (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetMachineCharacteristicValues
        /// </summary>
        /// <remarks>
        /// PLM_GetMachineCharacteristicValues
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault15</returns>
        ApiResponse<InlineResponseDefault15> PLMGetMachineCharacteristicValuesWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetMachineComponentLines
        /// </summary>
        /// <remarks>
        /// PLM_GetMachineComponentLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault16</returns>
        InlineResponseDefault16 PLMGetMachineComponentLines (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetMachineComponentLines
        /// </summary>
        /// <remarks>
        /// PLM_GetMachineComponentLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault16</returns>
        ApiResponse<InlineResponseDefault16> PLMGetMachineComponentLinesWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetMachineStructure
        /// </summary>
        /// <remarks>
        /// PLM_GetMachineStructure
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault14</returns>
        InlineResponseDefault14 PLMGetMachineStructure (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetMachineStructure
        /// </summary>
        /// <remarks>
        /// PLM_GetMachineStructure
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault14</returns>
        ApiResponse<InlineResponseDefault14> PLMGetMachineStructureWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetMachines
        /// </summary>
        /// <remarks>
        /// PLM_GetMachines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault8</returns>
        InlineResponseDefault8 PLMGetMachines (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetMachines
        /// </summary>
        /// <remarks>
        /// PLM_GetMachines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault8</returns>
        ApiResponse<InlineResponseDefault8> PLMGetMachinesWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetMaintenanceCycleResolutions
        /// </summary>
        /// <remarks>
        /// PLM_GetMaintenanceCycleResolutions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault19</returns>
        InlineResponseDefault19 PLMGetMaintenanceCycleResolutions (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetMaintenanceCycleResolutions
        /// </summary>
        /// <remarks>
        /// PLM_GetMaintenanceCycleResolutions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault19</returns>
        ApiResponse<InlineResponseDefault19> PLMGetMaintenanceCycleResolutionsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetMaintenancePoints
        /// </summary>
        /// <remarks>
        /// PLM_GetMaintenancePoints
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault7</returns>
        InlineResponseDefault7 PLMGetMaintenancePoints (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetMaintenancePoints
        /// </summary>
        /// <remarks>
        /// PLM_GetMaintenancePoints
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault7</returns>
        ApiResponse<InlineResponseDefault7> PLMGetMaintenancePointsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetPPEs
        /// </summary>
        /// <remarks>
        /// PLM_GetPPEs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault23</returns>
        InlineResponseDefault23 PLMGetPPEs (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetPPEs
        /// </summary>
        /// <remarks>
        /// PLM_GetPPEs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault23</returns>
        ApiResponse<InlineResponseDefault23> PLMGetPPEsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetResolutions
        /// </summary>
        /// <remarks>
        /// PLM_GetResolutions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault22</returns>
        InlineResponseDefault22 PLMGetResolutions (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetResolutions
        /// </summary>
        /// <remarks>
        /// PLM_GetResolutions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault22</returns>
        ApiResponse<InlineResponseDefault22> PLMGetResolutionsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetResourceActivities
        /// </summary>
        /// <remarks>
        /// PLM_GetResourceActivities
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault20</returns>
        InlineResponseDefault20 PLMGetResourceActivities (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetResourceActivities
        /// </summary>
        /// <remarks>
        /// PLM_GetResourceActivities
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault20</returns>
        ApiResponse<InlineResponseDefault20> PLMGetResourceActivitiesWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetRisks
        /// </summary>
        /// <remarks>
        /// PLM_GetRisks
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault26</returns>
        InlineResponseDefault26 PLMGetRisks (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetRisks
        /// </summary>
        /// <remarks>
        /// PLM_GetRisks
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault26</returns>
        ApiResponse<InlineResponseDefault26> PLMGetRisksWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetSetups
        /// </summary>
        /// <remarks>
        /// PLM_GetSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault6</returns>
        InlineResponseDefault6 PLMGetSetups (string companyId, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetSetups
        /// </summary>
        /// <remarks>
        /// PLM_GetSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault6</returns>
        ApiResponse<InlineResponseDefault6> PLMGetSetupsWithHttpInfo (string companyId, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetSpareParts
        /// </summary>
        /// <remarks>
        /// PLM_GetSpareParts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault21</returns>
        InlineResponseDefault21 PLMGetSpareParts (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetSpareParts
        /// </summary>
        /// <remarks>
        /// PLM_GetSpareParts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault21</returns>
        ApiResponse<InlineResponseDefault21> PLMGetSparePartsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetTrackingLines
        /// </summary>
        /// <remarks>
        /// PLM_GetTrackingLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault27</returns>
        InlineResponseDefault27 PLMGetTrackingLines (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetTrackingLines
        /// </summary>
        /// <remarks>
        /// PLM_GetTrackingLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault27</returns>
        ApiResponse<InlineResponseDefault27> PLMGetTrackingLinesWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetUserActivities
        /// </summary>
        /// <remarks>
        /// PLM_GetUserActivities
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault29</returns>
        InlineResponseDefault29 PLMGetUserActivities (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// PLM_GetUserActivities
        /// </summary>
        /// <remarks>
        /// PLM_GetUserActivities
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault29</returns>
        ApiResponse<InlineResponseDefault29> PLMGetUserActivitiesWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        /// <summary>
        /// PLM_GetUserActivityActions
        /// </summary>
        /// <remarks>
        /// PLM_GetUserActivityActions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault30</returns>
        InlineResponseDefault30 PLMGetUserActivityActions (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// PLM_GetUserActivityActions
        /// </summary>
        /// <remarks>
        /// PLM_GetUserActivityActions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault30</returns>
        ApiResponse<InlineResponseDefault30> PLMGetUserActivityActionsWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        /// <summary>
        /// PLM_GetUsers
        /// </summary>
        /// <remarks>
        /// PLM_GetUsers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault28</returns>
        InlineResponseDefault28 PLMGetUsers (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// PLM_GetUsers
        /// </summary>
        /// <remarks>
        /// PLM_GetUsers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault28</returns>
        ApiResponse<InlineResponseDefault28> PLMGetUsersWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        /// <summary>
        /// PLM_GetWorkJnlLines
        /// </summary>
        /// <remarks>
        /// PLM_GetWorkJnlLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault9</returns>
        InlineResponseDefault9 PLMGetWorkJnlLines (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetWorkJnlLines
        /// </summary>
        /// <remarks>
        /// PLM_GetWorkJnlLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault9</returns>
        ApiResponse<InlineResponseDefault9> PLMGetWorkJnlLinesWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetWorkRequestCapacityNeeds
        /// </summary>
        /// <remarks>
        /// PLM_GetWorkRequestCapacityNeeds
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault31</returns>
        InlineResponseDefault31 PLMGetWorkRequestCapacityNeeds (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetWorkRequestCapacityNeeds
        /// </summary>
        /// <remarks>
        /// PLM_GetWorkRequestCapacityNeeds
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault31</returns>
        ApiResponse<InlineResponseDefault31> PLMGetWorkRequestCapacityNeedsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetWorkRequestCycles
        /// </summary>
        /// <remarks>
        /// PLM_GetWorkRequestCycles
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault18</returns>
        InlineResponseDefault18 PLMGetWorkRequestCycles (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetWorkRequestCycles
        /// </summary>
        /// <remarks>
        /// PLM_GetWorkRequestCycles
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault18</returns>
        ApiResponse<InlineResponseDefault18> PLMGetWorkRequestCyclesWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetWorkRequests
        /// </summary>
        /// <remarks>
        /// PLM_GetWorkRequests
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault17</returns>
        InlineResponseDefault17 PLMGetWorkRequests (string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// PLM_GetWorkRequests
        /// </summary>
        /// <remarks>
        /// PLM_GetWorkRequests
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault17</returns>
        ApiResponse<InlineResponseDefault17> PLMGetWorkRequestsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// CS_ConvertTimeSpan
        /// </summary>
        /// <remarks>
        /// CS_ConvertTimeSpan
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponseDefault33</returns>
        System.Threading.Tasks.Task<InlineResponseDefault33> CSConvertTimeSpanAsync (CSConvertTimeSpanBody body);

        /// <summary>
        /// CS_ConvertTimeSpan
        /// </summary>
        /// <remarks>
        /// CS_ConvertTimeSpan
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponseDefault33)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault33>> CSConvertTimeSpanAsyncWithHttpInfo (CSConvertTimeSpanBody body);
        /// <summary>
        /// CS_DecodeBase64
        /// </summary>
        /// <remarks>
        /// CS_DecodeBase64
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponseDefault33</returns>
        System.Threading.Tasks.Task<InlineResponseDefault33> CSDecodeBase64Async (CSDecodeBase64Body body);

        /// <summary>
        /// CS_DecodeBase64
        /// </summary>
        /// <remarks>
        /// CS_DecodeBase64
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponseDefault33)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault33>> CSDecodeBase64AsyncWithHttpInfo (CSDecodeBase64Body body);
        /// <summary>
        /// CS_StringToHexColor
        /// </summary>
        /// <remarks>
        /// CS_StringToHexColor
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponseDefault34</returns>
        System.Threading.Tasks.Task<InlineResponseDefault34> CSStringToHexColorAsync (CSStringToHexColorBody body);

        /// <summary>
        /// CS_StringToHexColor
        /// </summary>
        /// <remarks>
        /// CS_StringToHexColor
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponseDefault34)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault34>> CSStringToHexColorAsyncWithHttpInfo (CSStringToHexColorBody body);
        /// <summary>
        /// GetCompanies
        /// </summary>
        /// <remarks>
        /// GetCompanies
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault</returns>
        System.Threading.Tasks.Task<InlineResponseDefault> GetCompaniesAsync (string orderby = null, string select = null);

        /// <summary>
        /// GetCompanies
        /// </summary>
        /// <remarks>
        /// GetCompanies
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault>> GetCompaniesAsyncWithHttpInfo (string orderby = null, string select = null);
        /// <summary>
        /// PLM_Execute
        /// </summary>
        /// <remarks>
        /// PLM_Execute
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>Task of InlineResponseDefault32</returns>
        System.Threading.Tasks.Task<InlineResponseDefault32> PLMExecuteAsync (ODataV4POWERPLMExecuteBody body, string company);

        /// <summary>
        /// PLM_Execute
        /// </summary>
        /// <remarks>
        /// PLM_Execute
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>Task of ApiResponse (InlineResponseDefault32)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault32>> PLMExecuteAsyncWithHttpInfo (ODataV4POWERPLMExecuteBody body, string company);
        /// <summary>
        /// PLM_GetActionParameters
        /// </summary>
        /// <remarks>
        /// PLM_GetActionParameters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault1</returns>
        System.Threading.Tasks.Task<InlineResponseDefault1> PLMGetActionParametersAsync (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// PLM_GetActionParameters
        /// </summary>
        /// <remarks>
        /// PLM_GetActionParameters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault1)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault1>> PLMGetActionParametersAsyncWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        /// <summary>
        /// PLM_GetAttachments
        /// </summary>
        /// <remarks>
        /// PLM_GetAttachments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault2</returns>
        System.Threading.Tasks.Task<InlineResponseDefault2> PLMGetAttachmentsAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetAttachments
        /// </summary>
        /// <remarks>
        /// PLM_GetAttachments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault2)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault2>> PLMGetAttachmentsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetBins
        /// </summary>
        /// <remarks>
        /// PLM_GetBins
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault13</returns>
        System.Threading.Tasks.Task<InlineResponseDefault13> PLMGetBinsAsync (string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// PLM_GetBins
        /// </summary>
        /// <remarks>
        /// PLM_GetBins
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault13)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault13>> PLMGetBinsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        /// <summary>
        /// PLM_GetCaptionTranslations
        /// </summary>
        /// <remarks>
        /// PLM_GetCaptionTranslations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault3</returns>
        System.Threading.Tasks.Task<InlineResponseDefault3> PLMGetCaptionTranslationsAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetCaptionTranslations
        /// </summary>
        /// <remarks>
        /// PLM_GetCaptionTranslations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault3)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault3>> PLMGetCaptionTranslationsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetCommentLines
        /// </summary>
        /// <remarks>
        /// PLM_GetCommentLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault4</returns>
        System.Threading.Tasks.Task<InlineResponseDefault4> PLMGetCommentLinesAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetCommentLines
        /// </summary>
        /// <remarks>
        /// PLM_GetCommentLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault4)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault4>> PLMGetCommentLinesAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetEmployees
        /// </summary>
        /// <remarks>
        /// PLM_GetEmployees
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault5</returns>
        System.Threading.Tasks.Task<InlineResponseDefault5> PLMGetEmployeesAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetEmployees
        /// </summary>
        /// <remarks>
        /// PLM_GetEmployees
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault5)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault5>> PLMGetEmployeesAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetFaultAreas
        /// </summary>
        /// <remarks>
        /// PLM_GetFaultAreas
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault22</returns>
        System.Threading.Tasks.Task<InlineResponseDefault22> PLMGetFaultAreasAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetFaultAreas
        /// </summary>
        /// <remarks>
        /// PLM_GetFaultAreas
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault22)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault22>> PLMGetFaultAreasAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetFaultReasons
        /// </summary>
        /// <remarks>
        /// PLM_GetFaultReasons
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault22</returns>
        System.Threading.Tasks.Task<InlineResponseDefault22> PLMGetFaultReasonsAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetFaultReasons
        /// </summary>
        /// <remarks>
        /// PLM_GetFaultReasons
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault22)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault22>> PLMGetFaultReasonsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetFaultSubAreas
        /// </summary>
        /// <remarks>
        /// PLM_GetFaultSubAreas
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault24</returns>
        System.Threading.Tasks.Task<InlineResponseDefault24> PLMGetFaultSubAreasAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetFaultSubAreas
        /// </summary>
        /// <remarks>
        /// PLM_GetFaultSubAreas
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault24)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault24>> PLMGetFaultSubAreasAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetFaultSymptoms
        /// </summary>
        /// <remarks>
        /// PLM_GetFaultSymptoms
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault22</returns>
        System.Threading.Tasks.Task<InlineResponseDefault22> PLMGetFaultSymptomsAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetFaultSymptoms
        /// </summary>
        /// <remarks>
        /// PLM_GetFaultSymptoms
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault22)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault22>> PLMGetFaultSymptomsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetFaults
        /// </summary>
        /// <remarks>
        /// PLM_GetFaults
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault25</returns>
        System.Threading.Tasks.Task<InlineResponseDefault25> PLMGetFaultsAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetFaults
        /// </summary>
        /// <remarks>
        /// PLM_GetFaults
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault25)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault25>> PLMGetFaultsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetItemVariants
        /// </summary>
        /// <remarks>
        /// PLM_GetItemVariants
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault11</returns>
        System.Threading.Tasks.Task<InlineResponseDefault11> PLMGetItemVariantsAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetItemVariants
        /// </summary>
        /// <remarks>
        /// PLM_GetItemVariants
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault11)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault11>> PLMGetItemVariantsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetItems
        /// </summary>
        /// <remarks>
        /// PLM_GetItems
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault10</returns>
        System.Threading.Tasks.Task<InlineResponseDefault10> PLMGetItemsAsync (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// PLM_GetItems
        /// </summary>
        /// <remarks>
        /// PLM_GetItems
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault10)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault10>> PLMGetItemsAsyncWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        /// <summary>
        /// PLM_GetLocations
        /// </summary>
        /// <remarks>
        /// PLM_GetLocations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault12</returns>
        System.Threading.Tasks.Task<InlineResponseDefault12> PLMGetLocationsAsync (string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// PLM_GetLocations
        /// </summary>
        /// <remarks>
        /// PLM_GetLocations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault12)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault12>> PLMGetLocationsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        /// <summary>
        /// PLM_GetMachineCharacteristicValues
        /// </summary>
        /// <remarks>
        /// PLM_GetMachineCharacteristicValues
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault15</returns>
        System.Threading.Tasks.Task<InlineResponseDefault15> PLMGetMachineCharacteristicValuesAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetMachineCharacteristicValues
        /// </summary>
        /// <remarks>
        /// PLM_GetMachineCharacteristicValues
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault15)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault15>> PLMGetMachineCharacteristicValuesAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetMachineComponentLines
        /// </summary>
        /// <remarks>
        /// PLM_GetMachineComponentLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault16</returns>
        System.Threading.Tasks.Task<InlineResponseDefault16> PLMGetMachineComponentLinesAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetMachineComponentLines
        /// </summary>
        /// <remarks>
        /// PLM_GetMachineComponentLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault16)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault16>> PLMGetMachineComponentLinesAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetMachineStructure
        /// </summary>
        /// <remarks>
        /// PLM_GetMachineStructure
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault14</returns>
        System.Threading.Tasks.Task<InlineResponseDefault14> PLMGetMachineStructureAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetMachineStructure
        /// </summary>
        /// <remarks>
        /// PLM_GetMachineStructure
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault14)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault14>> PLMGetMachineStructureAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetMachines
        /// </summary>
        /// <remarks>
        /// PLM_GetMachines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault8</returns>
        System.Threading.Tasks.Task<InlineResponseDefault8> PLMGetMachinesAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetMachines
        /// </summary>
        /// <remarks>
        /// PLM_GetMachines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault8)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault8>> PLMGetMachinesAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetMaintenanceCycleResolutions
        /// </summary>
        /// <remarks>
        /// PLM_GetMaintenanceCycleResolutions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault19</returns>
        System.Threading.Tasks.Task<InlineResponseDefault19> PLMGetMaintenanceCycleResolutionsAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetMaintenanceCycleResolutions
        /// </summary>
        /// <remarks>
        /// PLM_GetMaintenanceCycleResolutions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault19)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault19>> PLMGetMaintenanceCycleResolutionsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetMaintenancePoints
        /// </summary>
        /// <remarks>
        /// PLM_GetMaintenancePoints
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault7</returns>
        System.Threading.Tasks.Task<InlineResponseDefault7> PLMGetMaintenancePointsAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetMaintenancePoints
        /// </summary>
        /// <remarks>
        /// PLM_GetMaintenancePoints
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault7)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault7>> PLMGetMaintenancePointsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetPPEs
        /// </summary>
        /// <remarks>
        /// PLM_GetPPEs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault23</returns>
        System.Threading.Tasks.Task<InlineResponseDefault23> PLMGetPPEsAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetPPEs
        /// </summary>
        /// <remarks>
        /// PLM_GetPPEs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault23)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault23>> PLMGetPPEsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetResolutions
        /// </summary>
        /// <remarks>
        /// PLM_GetResolutions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault22</returns>
        System.Threading.Tasks.Task<InlineResponseDefault22> PLMGetResolutionsAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetResolutions
        /// </summary>
        /// <remarks>
        /// PLM_GetResolutions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault22)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault22>> PLMGetResolutionsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetResourceActivities
        /// </summary>
        /// <remarks>
        /// PLM_GetResourceActivities
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault20</returns>
        System.Threading.Tasks.Task<InlineResponseDefault20> PLMGetResourceActivitiesAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetResourceActivities
        /// </summary>
        /// <remarks>
        /// PLM_GetResourceActivities
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault20)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault20>> PLMGetResourceActivitiesAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetRisks
        /// </summary>
        /// <remarks>
        /// PLM_GetRisks
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault26</returns>
        System.Threading.Tasks.Task<InlineResponseDefault26> PLMGetRisksAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetRisks
        /// </summary>
        /// <remarks>
        /// PLM_GetRisks
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault26)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault26>> PLMGetRisksAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetSetups
        /// </summary>
        /// <remarks>
        /// PLM_GetSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault6</returns>
        System.Threading.Tasks.Task<InlineResponseDefault6> PLMGetSetupsAsync (string companyId, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetSetups
        /// </summary>
        /// <remarks>
        /// PLM_GetSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault6)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault6>> PLMGetSetupsAsyncWithHttpInfo (string companyId, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetSpareParts
        /// </summary>
        /// <remarks>
        /// PLM_GetSpareParts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault21</returns>
        System.Threading.Tasks.Task<InlineResponseDefault21> PLMGetSparePartsAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetSpareParts
        /// </summary>
        /// <remarks>
        /// PLM_GetSpareParts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault21)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault21>> PLMGetSparePartsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetTrackingLines
        /// </summary>
        /// <remarks>
        /// PLM_GetTrackingLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault27</returns>
        System.Threading.Tasks.Task<InlineResponseDefault27> PLMGetTrackingLinesAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetTrackingLines
        /// </summary>
        /// <remarks>
        /// PLM_GetTrackingLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault27)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault27>> PLMGetTrackingLinesAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetUserActivities
        /// </summary>
        /// <remarks>
        /// PLM_GetUserActivities
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault29</returns>
        System.Threading.Tasks.Task<InlineResponseDefault29> PLMGetUserActivitiesAsync (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// PLM_GetUserActivities
        /// </summary>
        /// <remarks>
        /// PLM_GetUserActivities
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault29)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault29>> PLMGetUserActivitiesAsyncWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        /// <summary>
        /// PLM_GetUserActivityActions
        /// </summary>
        /// <remarks>
        /// PLM_GetUserActivityActions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault30</returns>
        System.Threading.Tasks.Task<InlineResponseDefault30> PLMGetUserActivityActionsAsync (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// PLM_GetUserActivityActions
        /// </summary>
        /// <remarks>
        /// PLM_GetUserActivityActions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault30)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault30>> PLMGetUserActivityActionsAsyncWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        /// <summary>
        /// PLM_GetUsers
        /// </summary>
        /// <remarks>
        /// PLM_GetUsers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault28</returns>
        System.Threading.Tasks.Task<InlineResponseDefault28> PLMGetUsersAsync (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// PLM_GetUsers
        /// </summary>
        /// <remarks>
        /// PLM_GetUsers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault28)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault28>> PLMGetUsersAsyncWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        /// <summary>
        /// PLM_GetWorkJnlLines
        /// </summary>
        /// <remarks>
        /// PLM_GetWorkJnlLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault9</returns>
        System.Threading.Tasks.Task<InlineResponseDefault9> PLMGetWorkJnlLinesAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetWorkJnlLines
        /// </summary>
        /// <remarks>
        /// PLM_GetWorkJnlLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault9)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault9>> PLMGetWorkJnlLinesAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetWorkRequestCapacityNeeds
        /// </summary>
        /// <remarks>
        /// PLM_GetWorkRequestCapacityNeeds
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault31</returns>
        System.Threading.Tasks.Task<InlineResponseDefault31> PLMGetWorkRequestCapacityNeedsAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetWorkRequestCapacityNeeds
        /// </summary>
        /// <remarks>
        /// PLM_GetWorkRequestCapacityNeeds
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault31)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault31>> PLMGetWorkRequestCapacityNeedsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetWorkRequestCycles
        /// </summary>
        /// <remarks>
        /// PLM_GetWorkRequestCycles
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault18</returns>
        System.Threading.Tasks.Task<InlineResponseDefault18> PLMGetWorkRequestCyclesAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PLM_GetWorkRequestCycles
        /// </summary>
        /// <remarks>
        /// PLM_GetWorkRequestCycles
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault18)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault18>> PLMGetWorkRequestCyclesAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PLM_GetWorkRequests
        /// </summary>
        /// <remarks>
        /// PLM_GetWorkRequests
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault17</returns>
        System.Threading.Tasks.Task<InlineResponseDefault17> PLMGetWorkRequestsAsync (string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// PLM_GetWorkRequests
        /// </summary>
        /// <remarks>
        /// PLM_GetWorkRequests
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault17)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault17>> PLMGetWorkRequestsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// CS_ConvertTimeSpan CS_ConvertTimeSpan
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponseDefault33</returns>
        public InlineResponseDefault33 CSConvertTimeSpan (CSConvertTimeSpanBody body)
        {
             ApiResponse<InlineResponseDefault33> localVarResponse = CSConvertTimeSpanWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CS_ConvertTimeSpan CS_ConvertTimeSpan
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponseDefault33</returns>
        public ApiResponse< InlineResponseDefault33 > CSConvertTimeSpanWithHttpInfo (CSConvertTimeSpanBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CSConvertTimeSpan");

            var localVarPath = "/CS_ConvertTimeSpan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CSConvertTimeSpan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault33>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault33) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault33)));
        }

        /// <summary>
        /// CS_ConvertTimeSpan CS_ConvertTimeSpan
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponseDefault33</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault33> CSConvertTimeSpanAsync (CSConvertTimeSpanBody body)
        {
             ApiResponse<InlineResponseDefault33> localVarResponse = await CSConvertTimeSpanAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CS_ConvertTimeSpan CS_ConvertTimeSpan
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponseDefault33)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault33>> CSConvertTimeSpanAsyncWithHttpInfo (CSConvertTimeSpanBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CSConvertTimeSpan");

            var localVarPath = "/CS_ConvertTimeSpan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CSConvertTimeSpan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault33>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault33) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault33)));
        }

        /// <summary>
        /// CS_DecodeBase64 CS_DecodeBase64
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponseDefault33</returns>
        public InlineResponseDefault33 CSDecodeBase64 (CSDecodeBase64Body body)
        {
             ApiResponse<InlineResponseDefault33> localVarResponse = CSDecodeBase64WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CS_DecodeBase64 CS_DecodeBase64
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponseDefault33</returns>
        public ApiResponse< InlineResponseDefault33 > CSDecodeBase64WithHttpInfo (CSDecodeBase64Body body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CSDecodeBase64");

            var localVarPath = "/CS_DecodeBase64";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CSDecodeBase64", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault33>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault33) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault33)));
        }

        /// <summary>
        /// CS_DecodeBase64 CS_DecodeBase64
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponseDefault33</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault33> CSDecodeBase64Async (CSDecodeBase64Body body)
        {
             ApiResponse<InlineResponseDefault33> localVarResponse = await CSDecodeBase64AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CS_DecodeBase64 CS_DecodeBase64
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponseDefault33)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault33>> CSDecodeBase64AsyncWithHttpInfo (CSDecodeBase64Body body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CSDecodeBase64");

            var localVarPath = "/CS_DecodeBase64";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CSDecodeBase64", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault33>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault33) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault33)));
        }

        /// <summary>
        /// CS_StringToHexColor CS_StringToHexColor
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponseDefault34</returns>
        public InlineResponseDefault34 CSStringToHexColor (CSStringToHexColorBody body)
        {
             ApiResponse<InlineResponseDefault34> localVarResponse = CSStringToHexColorWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CS_StringToHexColor CS_StringToHexColor
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponseDefault34</returns>
        public ApiResponse< InlineResponseDefault34 > CSStringToHexColorWithHttpInfo (CSStringToHexColorBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CSStringToHexColor");

            var localVarPath = "/CS_StringToHexColor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CSStringToHexColor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault34>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault34) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault34)));
        }

        /// <summary>
        /// CS_StringToHexColor CS_StringToHexColor
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponseDefault34</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault34> CSStringToHexColorAsync (CSStringToHexColorBody body)
        {
             ApiResponse<InlineResponseDefault34> localVarResponse = await CSStringToHexColorAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CS_StringToHexColor CS_StringToHexColor
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponseDefault34)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault34>> CSStringToHexColorAsyncWithHttpInfo (CSStringToHexColorBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CSStringToHexColor");

            var localVarPath = "/CS_StringToHexColor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CSStringToHexColor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault34>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault34) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault34)));
        }

        /// <summary>
        /// GetCompanies GetCompanies
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault</returns>
        public InlineResponseDefault GetCompanies (string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault> localVarResponse = GetCompaniesWithHttpInfo(orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GetCompanies GetCompanies
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault</returns>
        public ApiResponse< InlineResponseDefault > GetCompaniesWithHttpInfo (string orderby = null, string select = null)
        {

            var localVarPath = "/api/beta/companies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompanies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault)));
        }

        /// <summary>
        /// GetCompanies GetCompanies
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault> GetCompaniesAsync (string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault> localVarResponse = await GetCompaniesAsyncWithHttpInfo(orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GetCompanies GetCompanies
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault>> GetCompaniesAsyncWithHttpInfo (string orderby = null, string select = null)
        {

            var localVarPath = "/api/beta/companies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompanies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault)));
        }

        /// <summary>
        /// PLM_Execute PLM_Execute
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>InlineResponseDefault32</returns>
        public InlineResponseDefault32 PLMExecute (ODataV4POWERPLMExecuteBody body, string company)
        {
             ApiResponse<InlineResponseDefault32> localVarResponse = PLMExecuteWithHttpInfo(body, company);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_Execute PLM_Execute
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>ApiResponse of InlineResponseDefault32</returns>
        public ApiResponse< InlineResponseDefault32 > PLMExecuteWithHttpInfo (ODataV4POWERPLMExecuteBody body, string company)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PLMExecute");
            // verify the required parameter 'company' is set
            if (company == null)
                throw new ApiException(400, "Missing required parameter 'company' when calling DefaultApi->PLMExecute");

            var localVarPath = "/ODataV4/POWERPLM_Execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (company != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "company", company)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMExecute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault32>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault32) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault32)));
        }

        /// <summary>
        /// PLM_Execute PLM_Execute
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>Task of InlineResponseDefault32</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault32> PLMExecuteAsync (ODataV4POWERPLMExecuteBody body, string company)
        {
             ApiResponse<InlineResponseDefault32> localVarResponse = await PLMExecuteAsyncWithHttpInfo(body, company);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_Execute PLM_Execute
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>Task of ApiResponse (InlineResponseDefault32)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault32>> PLMExecuteAsyncWithHttpInfo (ODataV4POWERPLMExecuteBody body, string company)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PLMExecute");
            // verify the required parameter 'company' is set
            if (company == null)
                throw new ApiException(400, "Missing required parameter 'company' when calling DefaultApi->PLMExecute");

            var localVarPath = "/ODataV4/POWERPLM_Execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (company != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "company", company)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMExecute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault32>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault32) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault32)));
        }

        /// <summary>
        /// PLM_GetActionParameters PLM_GetActionParameters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault1</returns>
        public InlineResponseDefault1 PLMGetActionParameters (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault1> localVarResponse = PLMGetActionParametersWithHttpInfo(acceptLanguage, companyId, filter, orderby, select, top);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetActionParameters PLM_GetActionParameters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault1</returns>
        public ApiResponse< InlineResponseDefault1 > PLMGetActionParametersWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'acceptLanguage' is set
            if (acceptLanguage == null)
                throw new ApiException(400, "Missing required parameter 'acceptLanguage' when calling DefaultApi->PLMGetActionParameters");
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetActionParameters");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/actionParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetActionParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault1)));
        }

        /// <summary>
        /// PLM_GetActionParameters PLM_GetActionParameters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault1</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault1> PLMGetActionParametersAsync (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault1> localVarResponse = await PLMGetActionParametersAsyncWithHttpInfo(acceptLanguage, companyId, filter, orderby, select, top);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetActionParameters PLM_GetActionParameters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault1>> PLMGetActionParametersAsyncWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'acceptLanguage' is set
            if (acceptLanguage == null)
                throw new ApiException(400, "Missing required parameter 'acceptLanguage' when calling DefaultApi->PLMGetActionParameters");
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetActionParameters");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/actionParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetActionParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault1)));
        }

        /// <summary>
        /// PLM_GetAttachments PLM_GetAttachments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault2</returns>
        public InlineResponseDefault2 PLMGetAttachments (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault2> localVarResponse = PLMGetAttachmentsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetAttachments PLM_GetAttachments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault2</returns>
        public ApiResponse< InlineResponseDefault2 > PLMGetAttachmentsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetAttachments");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->PLMGetAttachments");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault2)));
        }

        /// <summary>
        /// PLM_GetAttachments PLM_GetAttachments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault2</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault2> PLMGetAttachmentsAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault2> localVarResponse = await PLMGetAttachmentsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetAttachments PLM_GetAttachments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault2>> PLMGetAttachmentsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetAttachments");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->PLMGetAttachments");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault2)));
        }

        /// <summary>
        /// PLM_GetBins PLM_GetBins
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault13</returns>
        public InlineResponseDefault13 PLMGetBins (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault13> localVarResponse = PLMGetBinsWithHttpInfo(companyId, filter, orderby, select, top);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetBins PLM_GetBins
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault13</returns>
        public ApiResponse< InlineResponseDefault13 > PLMGetBinsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetBins");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/bins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetBins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault13>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault13) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault13)));
        }

        /// <summary>
        /// PLM_GetBins PLM_GetBins
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault13</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault13> PLMGetBinsAsync (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault13> localVarResponse = await PLMGetBinsAsyncWithHttpInfo(companyId, filter, orderby, select, top);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetBins PLM_GetBins
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault13)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault13>> PLMGetBinsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetBins");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/bins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetBins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault13>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault13) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault13)));
        }

        /// <summary>
        /// PLM_GetCaptionTranslations PLM_GetCaptionTranslations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault3</returns>
        public InlineResponseDefault3 PLMGetCaptionTranslations (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault3> localVarResponse = PLMGetCaptionTranslationsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetCaptionTranslations PLM_GetCaptionTranslations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault3</returns>
        public ApiResponse< InlineResponseDefault3 > PLMGetCaptionTranslationsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetCaptionTranslations");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->PLMGetCaptionTranslations");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/captionTranslations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetCaptionTranslations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault3>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault3) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault3)));
        }

        /// <summary>
        /// PLM_GetCaptionTranslations PLM_GetCaptionTranslations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault3</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault3> PLMGetCaptionTranslationsAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault3> localVarResponse = await PLMGetCaptionTranslationsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetCaptionTranslations PLM_GetCaptionTranslations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault3)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault3>> PLMGetCaptionTranslationsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetCaptionTranslations");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->PLMGetCaptionTranslations");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/captionTranslations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetCaptionTranslations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault3>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault3) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault3)));
        }

        /// <summary>
        /// PLM_GetCommentLines PLM_GetCommentLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault4</returns>
        public InlineResponseDefault4 PLMGetCommentLines (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault4> localVarResponse = PLMGetCommentLinesWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetCommentLines PLM_GetCommentLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault4</returns>
        public ApiResponse< InlineResponseDefault4 > PLMGetCommentLinesWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetCommentLines");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->PLMGetCommentLines");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/commentLines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetCommentLines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault4>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault4) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault4)));
        }

        /// <summary>
        /// PLM_GetCommentLines PLM_GetCommentLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault4</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault4> PLMGetCommentLinesAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault4> localVarResponse = await PLMGetCommentLinesAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetCommentLines PLM_GetCommentLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault4)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault4>> PLMGetCommentLinesAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetCommentLines");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->PLMGetCommentLines");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/commentLines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetCommentLines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault4>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault4) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault4)));
        }

        /// <summary>
        /// PLM_GetEmployees PLM_GetEmployees
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault5</returns>
        public InlineResponseDefault5 PLMGetEmployees (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault5> localVarResponse = PLMGetEmployeesWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetEmployees PLM_GetEmployees
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault5</returns>
        public ApiResponse< InlineResponseDefault5 > PLMGetEmployeesWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetEmployees");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/employees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetEmployees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault5>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault5) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault5)));
        }

        /// <summary>
        /// PLM_GetEmployees PLM_GetEmployees
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault5</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault5> PLMGetEmployeesAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault5> localVarResponse = await PLMGetEmployeesAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetEmployees PLM_GetEmployees
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault5)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault5>> PLMGetEmployeesAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetEmployees");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/employees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetEmployees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault5>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault5) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault5)));
        }

        /// <summary>
        /// PLM_GetFaultAreas PLM_GetFaultAreas
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault22</returns>
        public InlineResponseDefault22 PLMGetFaultAreas (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault22> localVarResponse = PLMGetFaultAreasWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetFaultAreas PLM_GetFaultAreas
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault22</returns>
        public ApiResponse< InlineResponseDefault22 > PLMGetFaultAreasWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetFaultAreas");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/faultAreas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetFaultAreas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault22>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault22) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault22)));
        }

        /// <summary>
        /// PLM_GetFaultAreas PLM_GetFaultAreas
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault22</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault22> PLMGetFaultAreasAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault22> localVarResponse = await PLMGetFaultAreasAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetFaultAreas PLM_GetFaultAreas
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault22)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault22>> PLMGetFaultAreasAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetFaultAreas");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/faultAreas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetFaultAreas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault22>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault22) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault22)));
        }

        /// <summary>
        /// PLM_GetFaultReasons PLM_GetFaultReasons
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault22</returns>
        public InlineResponseDefault22 PLMGetFaultReasons (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault22> localVarResponse = PLMGetFaultReasonsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetFaultReasons PLM_GetFaultReasons
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault22</returns>
        public ApiResponse< InlineResponseDefault22 > PLMGetFaultReasonsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetFaultReasons");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/faultReasons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetFaultReasons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault22>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault22) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault22)));
        }

        /// <summary>
        /// PLM_GetFaultReasons PLM_GetFaultReasons
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault22</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault22> PLMGetFaultReasonsAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault22> localVarResponse = await PLMGetFaultReasonsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetFaultReasons PLM_GetFaultReasons
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault22)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault22>> PLMGetFaultReasonsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetFaultReasons");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/faultReasons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetFaultReasons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault22>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault22) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault22)));
        }

        /// <summary>
        /// PLM_GetFaultSubAreas PLM_GetFaultSubAreas
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault24</returns>
        public InlineResponseDefault24 PLMGetFaultSubAreas (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault24> localVarResponse = PLMGetFaultSubAreasWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetFaultSubAreas PLM_GetFaultSubAreas
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault24</returns>
        public ApiResponse< InlineResponseDefault24 > PLMGetFaultSubAreasWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetFaultSubAreas");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/faultSubAreas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetFaultSubAreas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault24>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault24) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault24)));
        }

        /// <summary>
        /// PLM_GetFaultSubAreas PLM_GetFaultSubAreas
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault24</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault24> PLMGetFaultSubAreasAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault24> localVarResponse = await PLMGetFaultSubAreasAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetFaultSubAreas PLM_GetFaultSubAreas
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault24)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault24>> PLMGetFaultSubAreasAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetFaultSubAreas");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/faultSubAreas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetFaultSubAreas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault24>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault24) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault24)));
        }

        /// <summary>
        /// PLM_GetFaultSymptoms PLM_GetFaultSymptoms
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault22</returns>
        public InlineResponseDefault22 PLMGetFaultSymptoms (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault22> localVarResponse = PLMGetFaultSymptomsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetFaultSymptoms PLM_GetFaultSymptoms
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault22</returns>
        public ApiResponse< InlineResponseDefault22 > PLMGetFaultSymptomsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetFaultSymptoms");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/faultSymptoms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetFaultSymptoms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault22>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault22) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault22)));
        }

        /// <summary>
        /// PLM_GetFaultSymptoms PLM_GetFaultSymptoms
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault22</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault22> PLMGetFaultSymptomsAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault22> localVarResponse = await PLMGetFaultSymptomsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetFaultSymptoms PLM_GetFaultSymptoms
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault22)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault22>> PLMGetFaultSymptomsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetFaultSymptoms");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/faultSymptoms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetFaultSymptoms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault22>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault22) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault22)));
        }

        /// <summary>
        /// PLM_GetFaults PLM_GetFaults
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault25</returns>
        public InlineResponseDefault25 PLMGetFaults (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault25> localVarResponse = PLMGetFaultsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetFaults PLM_GetFaults
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault25</returns>
        public ApiResponse< InlineResponseDefault25 > PLMGetFaultsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetFaults");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/faults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetFaults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault25>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault25) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault25)));
        }

        /// <summary>
        /// PLM_GetFaults PLM_GetFaults
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault25</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault25> PLMGetFaultsAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault25> localVarResponse = await PLMGetFaultsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetFaults PLM_GetFaults
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault25)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault25>> PLMGetFaultsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetFaults");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/faults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetFaults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault25>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault25) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault25)));
        }

        /// <summary>
        /// PLM_GetItemVariants PLM_GetItemVariants
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault11</returns>
        public InlineResponseDefault11 PLMGetItemVariants (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault11> localVarResponse = PLMGetItemVariantsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetItemVariants PLM_GetItemVariants
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault11</returns>
        public ApiResponse< InlineResponseDefault11 > PLMGetItemVariantsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetItemVariants");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/itemVariants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetItemVariants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault11>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault11) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault11)));
        }

        /// <summary>
        /// PLM_GetItemVariants PLM_GetItemVariants
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault11</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault11> PLMGetItemVariantsAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault11> localVarResponse = await PLMGetItemVariantsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetItemVariants PLM_GetItemVariants
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault11)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault11>> PLMGetItemVariantsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetItemVariants");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/itemVariants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetItemVariants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault11>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault11) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault11)));
        }

        /// <summary>
        /// PLM_GetItems PLM_GetItems
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault10</returns>
        public InlineResponseDefault10 PLMGetItems (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault10> localVarResponse = PLMGetItemsWithHttpInfo(acceptLanguage, companyId, filter, orderby, select, top);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetItems PLM_GetItems
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault10</returns>
        public ApiResponse< InlineResponseDefault10 > PLMGetItemsWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'acceptLanguage' is set
            if (acceptLanguage == null)
                throw new ApiException(400, "Missing required parameter 'acceptLanguage' when calling DefaultApi->PLMGetItems");
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetItems");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault10>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault10) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault10)));
        }

        /// <summary>
        /// PLM_GetItems PLM_GetItems
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault10</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault10> PLMGetItemsAsync (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault10> localVarResponse = await PLMGetItemsAsyncWithHttpInfo(acceptLanguage, companyId, filter, orderby, select, top);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetItems PLM_GetItems
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault10)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault10>> PLMGetItemsAsyncWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'acceptLanguage' is set
            if (acceptLanguage == null)
                throw new ApiException(400, "Missing required parameter 'acceptLanguage' when calling DefaultApi->PLMGetItems");
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetItems");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault10>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault10) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault10)));
        }

        /// <summary>
        /// PLM_GetLocations PLM_GetLocations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault12</returns>
        public InlineResponseDefault12 PLMGetLocations (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault12> localVarResponse = PLMGetLocationsWithHttpInfo(companyId, filter, orderby, select, top);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetLocations PLM_GetLocations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault12</returns>
        public ApiResponse< InlineResponseDefault12 > PLMGetLocationsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetLocations");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault12>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault12) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault12)));
        }

        /// <summary>
        /// PLM_GetLocations PLM_GetLocations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault12</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault12> PLMGetLocationsAsync (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault12> localVarResponse = await PLMGetLocationsAsyncWithHttpInfo(companyId, filter, orderby, select, top);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetLocations PLM_GetLocations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault12)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault12>> PLMGetLocationsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetLocations");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault12>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault12) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault12)));
        }

        /// <summary>
        /// PLM_GetMachineCharacteristicValues PLM_GetMachineCharacteristicValues
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault15</returns>
        public InlineResponseDefault15 PLMGetMachineCharacteristicValues (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault15> localVarResponse = PLMGetMachineCharacteristicValuesWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetMachineCharacteristicValues PLM_GetMachineCharacteristicValues
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault15</returns>
        public ApiResponse< InlineResponseDefault15 > PLMGetMachineCharacteristicValuesWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetMachineCharacteristicValues");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/machineCharacteristicValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetMachineCharacteristicValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault15>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault15) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault15)));
        }

        /// <summary>
        /// PLM_GetMachineCharacteristicValues PLM_GetMachineCharacteristicValues
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault15</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault15> PLMGetMachineCharacteristicValuesAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault15> localVarResponse = await PLMGetMachineCharacteristicValuesAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetMachineCharacteristicValues PLM_GetMachineCharacteristicValues
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault15)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault15>> PLMGetMachineCharacteristicValuesAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetMachineCharacteristicValues");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/machineCharacteristicValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetMachineCharacteristicValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault15>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault15) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault15)));
        }

        /// <summary>
        /// PLM_GetMachineComponentLines PLM_GetMachineComponentLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault16</returns>
        public InlineResponseDefault16 PLMGetMachineComponentLines (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault16> localVarResponse = PLMGetMachineComponentLinesWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetMachineComponentLines PLM_GetMachineComponentLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault16</returns>
        public ApiResponse< InlineResponseDefault16 > PLMGetMachineComponentLinesWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetMachineComponentLines");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/machineComponentLines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetMachineComponentLines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault16>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault16) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault16)));
        }

        /// <summary>
        /// PLM_GetMachineComponentLines PLM_GetMachineComponentLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault16</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault16> PLMGetMachineComponentLinesAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault16> localVarResponse = await PLMGetMachineComponentLinesAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetMachineComponentLines PLM_GetMachineComponentLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault16)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault16>> PLMGetMachineComponentLinesAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetMachineComponentLines");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/machineComponentLines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetMachineComponentLines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault16>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault16) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault16)));
        }

        /// <summary>
        /// PLM_GetMachineStructure PLM_GetMachineStructure
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault14</returns>
        public InlineResponseDefault14 PLMGetMachineStructure (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault14> localVarResponse = PLMGetMachineStructureWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetMachineStructure PLM_GetMachineStructure
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault14</returns>
        public ApiResponse< InlineResponseDefault14 > PLMGetMachineStructureWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetMachineStructure");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/machineStructures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetMachineStructure", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault14>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault14) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault14)));
        }

        /// <summary>
        /// PLM_GetMachineStructure PLM_GetMachineStructure
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault14</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault14> PLMGetMachineStructureAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault14> localVarResponse = await PLMGetMachineStructureAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetMachineStructure PLM_GetMachineStructure
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault14)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault14>> PLMGetMachineStructureAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetMachineStructure");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/machineStructures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetMachineStructure", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault14>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault14) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault14)));
        }

        /// <summary>
        /// PLM_GetMachines PLM_GetMachines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault8</returns>
        public InlineResponseDefault8 PLMGetMachines (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault8> localVarResponse = PLMGetMachinesWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetMachines PLM_GetMachines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault8</returns>
        public ApiResponse< InlineResponseDefault8 > PLMGetMachinesWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetMachines");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/machines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetMachines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault8>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault8) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault8)));
        }

        /// <summary>
        /// PLM_GetMachines PLM_GetMachines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault8</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault8> PLMGetMachinesAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault8> localVarResponse = await PLMGetMachinesAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetMachines PLM_GetMachines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault8)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault8>> PLMGetMachinesAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetMachines");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/machines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetMachines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault8>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault8) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault8)));
        }

        /// <summary>
        /// PLM_GetMaintenanceCycleResolutions PLM_GetMaintenanceCycleResolutions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault19</returns>
        public InlineResponseDefault19 PLMGetMaintenanceCycleResolutions (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault19> localVarResponse = PLMGetMaintenanceCycleResolutionsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetMaintenanceCycleResolutions PLM_GetMaintenanceCycleResolutions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault19</returns>
        public ApiResponse< InlineResponseDefault19 > PLMGetMaintenanceCycleResolutionsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetMaintenanceCycleResolutions");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/maintenanceCycleResolutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetMaintenanceCycleResolutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault19>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault19) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault19)));
        }

        /// <summary>
        /// PLM_GetMaintenanceCycleResolutions PLM_GetMaintenanceCycleResolutions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault19</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault19> PLMGetMaintenanceCycleResolutionsAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault19> localVarResponse = await PLMGetMaintenanceCycleResolutionsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetMaintenanceCycleResolutions PLM_GetMaintenanceCycleResolutions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault19)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault19>> PLMGetMaintenanceCycleResolutionsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetMaintenanceCycleResolutions");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/maintenanceCycleResolutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetMaintenanceCycleResolutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault19>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault19) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault19)));
        }

        /// <summary>
        /// PLM_GetMaintenancePoints PLM_GetMaintenancePoints
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault7</returns>
        public InlineResponseDefault7 PLMGetMaintenancePoints (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault7> localVarResponse = PLMGetMaintenancePointsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetMaintenancePoints PLM_GetMaintenancePoints
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault7</returns>
        public ApiResponse< InlineResponseDefault7 > PLMGetMaintenancePointsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetMaintenancePoints");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/maintenancePoints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetMaintenancePoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault7>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault7) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault7)));
        }

        /// <summary>
        /// PLM_GetMaintenancePoints PLM_GetMaintenancePoints
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault7</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault7> PLMGetMaintenancePointsAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault7> localVarResponse = await PLMGetMaintenancePointsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetMaintenancePoints PLM_GetMaintenancePoints
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault7)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault7>> PLMGetMaintenancePointsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetMaintenancePoints");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/maintenancePoints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetMaintenancePoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault7>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault7) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault7)));
        }

        /// <summary>
        /// PLM_GetPPEs PLM_GetPPEs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault23</returns>
        public InlineResponseDefault23 PLMGetPPEs (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault23> localVarResponse = PLMGetPPEsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetPPEs PLM_GetPPEs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault23</returns>
        public ApiResponse< InlineResponseDefault23 > PLMGetPPEsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetPPEs");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/ppes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetPPEs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault23>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault23) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault23)));
        }

        /// <summary>
        /// PLM_GetPPEs PLM_GetPPEs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault23</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault23> PLMGetPPEsAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault23> localVarResponse = await PLMGetPPEsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetPPEs PLM_GetPPEs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault23)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault23>> PLMGetPPEsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetPPEs");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/ppes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetPPEs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault23>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault23) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault23)));
        }

        /// <summary>
        /// PLM_GetResolutions PLM_GetResolutions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault22</returns>
        public InlineResponseDefault22 PLMGetResolutions (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault22> localVarResponse = PLMGetResolutionsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetResolutions PLM_GetResolutions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault22</returns>
        public ApiResponse< InlineResponseDefault22 > PLMGetResolutionsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetResolutions");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/resolutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetResolutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault22>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault22) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault22)));
        }

        /// <summary>
        /// PLM_GetResolutions PLM_GetResolutions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault22</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault22> PLMGetResolutionsAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault22> localVarResponse = await PLMGetResolutionsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetResolutions PLM_GetResolutions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault22)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault22>> PLMGetResolutionsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetResolutions");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/resolutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetResolutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault22>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault22) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault22)));
        }

        /// <summary>
        /// PLM_GetResourceActivities PLM_GetResourceActivities
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault20</returns>
        public InlineResponseDefault20 PLMGetResourceActivities (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault20> localVarResponse = PLMGetResourceActivitiesWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetResourceActivities PLM_GetResourceActivities
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault20</returns>
        public ApiResponse< InlineResponseDefault20 > PLMGetResourceActivitiesWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetResourceActivities");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/resourceActivities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetResourceActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault20>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault20) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault20)));
        }

        /// <summary>
        /// PLM_GetResourceActivities PLM_GetResourceActivities
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault20</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault20> PLMGetResourceActivitiesAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault20> localVarResponse = await PLMGetResourceActivitiesAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetResourceActivities PLM_GetResourceActivities
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault20)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault20>> PLMGetResourceActivitiesAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetResourceActivities");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/resourceActivities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetResourceActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault20>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault20) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault20)));
        }

        /// <summary>
        /// PLM_GetRisks PLM_GetRisks
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault26</returns>
        public InlineResponseDefault26 PLMGetRisks (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault26> localVarResponse = PLMGetRisksWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetRisks PLM_GetRisks
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault26</returns>
        public ApiResponse< InlineResponseDefault26 > PLMGetRisksWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetRisks");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/risks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetRisks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault26>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault26) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault26)));
        }

        /// <summary>
        /// PLM_GetRisks PLM_GetRisks
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault26</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault26> PLMGetRisksAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault26> localVarResponse = await PLMGetRisksAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetRisks PLM_GetRisks
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault26)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault26>> PLMGetRisksAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetRisks");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/risks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetRisks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault26>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault26) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault26)));
        }

        /// <summary>
        /// PLM_GetSetups PLM_GetSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault6</returns>
        public InlineResponseDefault6 PLMGetSetups (string companyId, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault6> localVarResponse = PLMGetSetupsWithHttpInfo(companyId, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetSetups PLM_GetSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault6</returns>
        public ApiResponse< InlineResponseDefault6 > PLMGetSetupsWithHttpInfo (string companyId, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetSetups");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/setups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault6>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault6) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault6)));
        }

        /// <summary>
        /// PLM_GetSetups PLM_GetSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault6</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault6> PLMGetSetupsAsync (string companyId, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault6> localVarResponse = await PLMGetSetupsAsyncWithHttpInfo(companyId, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetSetups PLM_GetSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault6)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault6>> PLMGetSetupsAsyncWithHttpInfo (string companyId, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetSetups");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/setups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault6>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault6) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault6)));
        }

        /// <summary>
        /// PLM_GetSpareParts PLM_GetSpareParts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault21</returns>
        public InlineResponseDefault21 PLMGetSpareParts (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault21> localVarResponse = PLMGetSparePartsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetSpareParts PLM_GetSpareParts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault21</returns>
        public ApiResponse< InlineResponseDefault21 > PLMGetSparePartsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetSpareParts");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/spareParts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetSpareParts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault21>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault21) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault21)));
        }

        /// <summary>
        /// PLM_GetSpareParts PLM_GetSpareParts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault21</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault21> PLMGetSparePartsAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault21> localVarResponse = await PLMGetSparePartsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetSpareParts PLM_GetSpareParts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault21)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault21>> PLMGetSparePartsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetSpareParts");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/spareParts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetSpareParts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault21>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault21) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault21)));
        }

        /// <summary>
        /// PLM_GetTrackingLines PLM_GetTrackingLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault27</returns>
        public InlineResponseDefault27 PLMGetTrackingLines (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault27> localVarResponse = PLMGetTrackingLinesWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetTrackingLines PLM_GetTrackingLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault27</returns>
        public ApiResponse< InlineResponseDefault27 > PLMGetTrackingLinesWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetTrackingLines");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->PLMGetTrackingLines");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/trackingLines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetTrackingLines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault27>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault27) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault27)));
        }

        /// <summary>
        /// PLM_GetTrackingLines PLM_GetTrackingLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault27</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault27> PLMGetTrackingLinesAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault27> localVarResponse = await PLMGetTrackingLinesAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetTrackingLines PLM_GetTrackingLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault27)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault27>> PLMGetTrackingLinesAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetTrackingLines");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->PLMGetTrackingLines");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/trackingLines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetTrackingLines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault27>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault27) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault27)));
        }

        /// <summary>
        /// PLM_GetUserActivities PLM_GetUserActivities
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault29</returns>
        public InlineResponseDefault29 PLMGetUserActivities (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault29> localVarResponse = PLMGetUserActivitiesWithHttpInfo(acceptLanguage, companyId, filter, orderby, select, top);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetUserActivities PLM_GetUserActivities
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault29</returns>
        public ApiResponse< InlineResponseDefault29 > PLMGetUserActivitiesWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'acceptLanguage' is set
            if (acceptLanguage == null)
                throw new ApiException(400, "Missing required parameter 'acceptLanguage' when calling DefaultApi->PLMGetUserActivities");
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetUserActivities");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/userActivities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetUserActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault29>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault29) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault29)));
        }

        /// <summary>
        /// PLM_GetUserActivities PLM_GetUserActivities
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault29</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault29> PLMGetUserActivitiesAsync (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault29> localVarResponse = await PLMGetUserActivitiesAsyncWithHttpInfo(acceptLanguage, companyId, filter, orderby, select, top);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetUserActivities PLM_GetUserActivities
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault29)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault29>> PLMGetUserActivitiesAsyncWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'acceptLanguage' is set
            if (acceptLanguage == null)
                throw new ApiException(400, "Missing required parameter 'acceptLanguage' when calling DefaultApi->PLMGetUserActivities");
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetUserActivities");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/userActivities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetUserActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault29>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault29) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault29)));
        }

        /// <summary>
        /// PLM_GetUserActivityActions PLM_GetUserActivityActions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault30</returns>
        public InlineResponseDefault30 PLMGetUserActivityActions (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault30> localVarResponse = PLMGetUserActivityActionsWithHttpInfo(acceptLanguage, companyId, filter, orderby, select, top);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetUserActivityActions PLM_GetUserActivityActions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault30</returns>
        public ApiResponse< InlineResponseDefault30 > PLMGetUserActivityActionsWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'acceptLanguage' is set
            if (acceptLanguage == null)
                throw new ApiException(400, "Missing required parameter 'acceptLanguage' when calling DefaultApi->PLMGetUserActivityActions");
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetUserActivityActions");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/userActivityActions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetUserActivityActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault30>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault30) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault30)));
        }

        /// <summary>
        /// PLM_GetUserActivityActions PLM_GetUserActivityActions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault30</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault30> PLMGetUserActivityActionsAsync (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault30> localVarResponse = await PLMGetUserActivityActionsAsyncWithHttpInfo(acceptLanguage, companyId, filter, orderby, select, top);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetUserActivityActions PLM_GetUserActivityActions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault30)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault30>> PLMGetUserActivityActionsAsyncWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'acceptLanguage' is set
            if (acceptLanguage == null)
                throw new ApiException(400, "Missing required parameter 'acceptLanguage' when calling DefaultApi->PLMGetUserActivityActions");
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetUserActivityActions");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/userActivityActions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetUserActivityActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault30>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault30) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault30)));
        }

        /// <summary>
        /// PLM_GetUsers PLM_GetUsers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault28</returns>
        public InlineResponseDefault28 PLMGetUsers (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault28> localVarResponse = PLMGetUsersWithHttpInfo(acceptLanguage, companyId, filter, orderby, select, top);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetUsers PLM_GetUsers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault28</returns>
        public ApiResponse< InlineResponseDefault28 > PLMGetUsersWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'acceptLanguage' is set
            if (acceptLanguage == null)
                throw new ApiException(400, "Missing required parameter 'acceptLanguage' when calling DefaultApi->PLMGetUsers");
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetUsers");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault28>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault28) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault28)));
        }

        /// <summary>
        /// PLM_GetUsers PLM_GetUsers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault28</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault28> PLMGetUsersAsync (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault28> localVarResponse = await PLMGetUsersAsyncWithHttpInfo(acceptLanguage, companyId, filter, orderby, select, top);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetUsers PLM_GetUsers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"></param>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault28)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault28>> PLMGetUsersAsyncWithHttpInfo (string acceptLanguage, string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'acceptLanguage' is set
            if (acceptLanguage == null)
                throw new ApiException(400, "Missing required parameter 'acceptLanguage' when calling DefaultApi->PLMGetUsers");
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetUsers");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault28>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault28) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault28)));
        }

        /// <summary>
        /// PLM_GetWorkJnlLines PLM_GetWorkJnlLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault9</returns>
        public InlineResponseDefault9 PLMGetWorkJnlLines (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault9> localVarResponse = PLMGetWorkJnlLinesWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetWorkJnlLines PLM_GetWorkJnlLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault9</returns>
        public ApiResponse< InlineResponseDefault9 > PLMGetWorkJnlLinesWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetWorkJnlLines");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/workJnlLines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetWorkJnlLines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault9>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault9) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault9)));
        }

        /// <summary>
        /// PLM_GetWorkJnlLines PLM_GetWorkJnlLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault9</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault9> PLMGetWorkJnlLinesAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault9> localVarResponse = await PLMGetWorkJnlLinesAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetWorkJnlLines PLM_GetWorkJnlLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault9)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault9>> PLMGetWorkJnlLinesAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetWorkJnlLines");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/workJnlLines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetWorkJnlLines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault9>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault9) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault9)));
        }

        /// <summary>
        /// PLM_GetWorkRequestCapacityNeeds PLM_GetWorkRequestCapacityNeeds
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault31</returns>
        public InlineResponseDefault31 PLMGetWorkRequestCapacityNeeds (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault31> localVarResponse = PLMGetWorkRequestCapacityNeedsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetWorkRequestCapacityNeeds PLM_GetWorkRequestCapacityNeeds
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault31</returns>
        public ApiResponse< InlineResponseDefault31 > PLMGetWorkRequestCapacityNeedsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetWorkRequestCapacityNeeds");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/workRequestCapacityNeeds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetWorkRequestCapacityNeeds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault31>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault31) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault31)));
        }

        /// <summary>
        /// PLM_GetWorkRequestCapacityNeeds PLM_GetWorkRequestCapacityNeeds
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault31</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault31> PLMGetWorkRequestCapacityNeedsAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault31> localVarResponse = await PLMGetWorkRequestCapacityNeedsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetWorkRequestCapacityNeeds PLM_GetWorkRequestCapacityNeeds
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault31)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault31>> PLMGetWorkRequestCapacityNeedsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetWorkRequestCapacityNeeds");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/workRequestCapacityNeeds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetWorkRequestCapacityNeeds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault31>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault31) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault31)));
        }

        /// <summary>
        /// PLM_GetWorkRequestCycles PLM_GetWorkRequestCycles
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault18</returns>
        public InlineResponseDefault18 PLMGetWorkRequestCycles (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault18> localVarResponse = PLMGetWorkRequestCyclesWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetWorkRequestCycles PLM_GetWorkRequestCycles
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault18</returns>
        public ApiResponse< InlineResponseDefault18 > PLMGetWorkRequestCyclesWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetWorkRequestCycles");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/workRequestCycles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetWorkRequestCycles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault18>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault18) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault18)));
        }

        /// <summary>
        /// PLM_GetWorkRequestCycles PLM_GetWorkRequestCycles
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault18</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault18> PLMGetWorkRequestCyclesAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault18> localVarResponse = await PLMGetWorkRequestCyclesAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetWorkRequestCycles PLM_GetWorkRequestCycles
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault18)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault18>> PLMGetWorkRequestCyclesAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetWorkRequestCycles");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/workRequestCycles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetWorkRequestCycles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault18>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault18) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault18)));
        }

        /// <summary>
        /// PLM_GetWorkRequests PLM_GetWorkRequests
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault17</returns>
        public InlineResponseDefault17 PLMGetWorkRequests (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault17> localVarResponse = PLMGetWorkRequestsWithHttpInfo(companyId, filter, orderby, select, top);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PLM_GetWorkRequests PLM_GetWorkRequests
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault17</returns>
        public ApiResponse< InlineResponseDefault17 > PLMGetWorkRequestsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetWorkRequests");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/workRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetWorkRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault17>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault17) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault17)));
        }

        /// <summary>
        /// PLM_GetWorkRequests PLM_GetWorkRequests
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault17</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault17> PLMGetWorkRequestsAsync (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault17> localVarResponse = await PLMGetWorkRequestsAsyncWithHttpInfo(companyId, filter, orderby, select, top);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PLM_GetWorkRequests PLM_GetWorkRequests
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault17)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault17>> PLMGetWorkRequestsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PLMGetWorkRequests");

            var localVarPath = "/api/eos/plm/v1.0/companies({companyId})/workRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PLMGetWorkRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault17>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault17) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault17)));
        }

    }
}
