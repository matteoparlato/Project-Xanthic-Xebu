/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault1Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault1Value :  IEquatable<InlineResponseDefault1Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault1Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="hubName">hubName.</param>
        /// <param name="deviceID">deviceID.</param>
        /// <param name="methodType">methodType.</param>
        /// <param name="methodTypeAsInt">methodTypeAsInt.</param>
        /// <param name="methodTypeName">methodTypeName.</param>
        /// <param name="methodName">methodName.</param>
        /// <param name="payload">payload.</param>
        public InlineResponseDefault1Value(string odataEtag = default(string), string systemId = default(string), string hubName = default(string), string deviceID = default(string), string methodType = default(string), decimal? methodTypeAsInt = default(decimal?), string methodTypeName = default(string), string methodName = default(string), string payload = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.HubName = hubName;
            this.DeviceID = deviceID;
            this.MethodType = methodType;
            this.MethodTypeAsInt = methodTypeAsInt;
            this.MethodTypeName = methodTypeName;
            this.MethodName = methodName;
            this.Payload = payload;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// hubName
        /// </summary>
        /// <value>hubName</value>
        [DataMember(Name="hubName", EmitDefaultValue=false)]
        public string HubName { get; set; }

        /// <summary>
        /// deviceID
        /// </summary>
        /// <value>deviceID</value>
        [DataMember(Name="deviceID", EmitDefaultValue=false)]
        public string DeviceID { get; set; }

        /// <summary>
        /// methodType
        /// </summary>
        /// <value>methodType</value>
        [DataMember(Name="methodType", EmitDefaultValue=false)]
        public string MethodType { get; set; }

        /// <summary>
        /// methodTypeAsInt
        /// </summary>
        /// <value>methodTypeAsInt</value>
        [DataMember(Name="methodTypeAsInt", EmitDefaultValue=false)]
        public decimal? MethodTypeAsInt { get; set; }

        /// <summary>
        /// methodTypeName
        /// </summary>
        /// <value>methodTypeName</value>
        [DataMember(Name="methodTypeName", EmitDefaultValue=false)]
        public string MethodTypeName { get; set; }

        /// <summary>
        /// methodName
        /// </summary>
        /// <value>methodName</value>
        [DataMember(Name="methodName", EmitDefaultValue=false)]
        public string MethodName { get; set; }

        /// <summary>
        /// payload
        /// </summary>
        /// <value>payload</value>
        [DataMember(Name="payload", EmitDefaultValue=false)]
        public string Payload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault1Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  HubName: ").Append(HubName).Append("\n");
            sb.Append("  DeviceID: ").Append(DeviceID).Append("\n");
            sb.Append("  MethodType: ").Append(MethodType).Append("\n");
            sb.Append("  MethodTypeAsInt: ").Append(MethodTypeAsInt).Append("\n");
            sb.Append("  MethodTypeName: ").Append(MethodTypeName).Append("\n");
            sb.Append("  MethodName: ").Append(MethodName).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault1Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault1Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault1Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault1Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.HubName == input.HubName ||
                    (this.HubName != null &&
                    this.HubName.Equals(input.HubName))
                ) && 
                (
                    this.DeviceID == input.DeviceID ||
                    (this.DeviceID != null &&
                    this.DeviceID.Equals(input.DeviceID))
                ) && 
                (
                    this.MethodType == input.MethodType ||
                    (this.MethodType != null &&
                    this.MethodType.Equals(input.MethodType))
                ) && 
                (
                    this.MethodTypeAsInt == input.MethodTypeAsInt ||
                    (this.MethodTypeAsInt != null &&
                    this.MethodTypeAsInt.Equals(input.MethodTypeAsInt))
                ) && 
                (
                    this.MethodTypeName == input.MethodTypeName ||
                    (this.MethodTypeName != null &&
                    this.MethodTypeName.Equals(input.MethodTypeName))
                ) && 
                (
                    this.MethodName == input.MethodName ||
                    (this.MethodName != null &&
                    this.MethodName.Equals(input.MethodName))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.HubName != null)
                    hashCode = hashCode * 59 + this.HubName.GetHashCode();
                if (this.DeviceID != null)
                    hashCode = hashCode * 59 + this.DeviceID.GetHashCode();
                if (this.MethodType != null)
                    hashCode = hashCode * 59 + this.MethodType.GetHashCode();
                if (this.MethodTypeAsInt != null)
                    hashCode = hashCode * 59 + this.MethodTypeAsInt.GetHashCode();
                if (this.MethodTypeName != null)
                    hashCode = hashCode * 59 + this.MethodTypeName.GetHashCode();
                if (this.MethodName != null)
                    hashCode = hashCode * 59 + this.MethodName.GetHashCode();
                if (this.Payload != null)
                    hashCode = hashCode * 59 + this.Payload.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
