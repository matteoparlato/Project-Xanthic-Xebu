/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault32Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault32Value :  IEquatable<InlineResponseDefault32Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault32Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="separator">separator.</param>
        /// <param name="defaultLanguage">defaultLanguage.</param>
        /// <param name="defaultTheme">defaultTheme.</param>
        /// <param name="currentUser">currentUser.</param>
        /// <param name="outputText">outputText.</param>
        /// <param name="outputOnlyText">outputOnlyText.</param>
        /// <param name="familyOutputText">familyOutputText.</param>
        /// <param name="familyOutputOnlyText">familyOutputOnlyText.</param>
        /// <param name="setupText">setupText.</param>
        /// <param name="stopTimeText">stopTimeText.</param>
        /// <param name="startText">startText.</param>
        /// <param name="endText">endText.</param>
        /// <param name="startReworkText">startReworkText.</param>
        /// <param name="changeActivityText">changeActivityText.</param>
        /// <param name="createStaplingText">createStaplingText.</param>
        /// <param name="addStaplingText">addStaplingText.</param>
        /// <param name="removeStaplingText">removeStaplingText.</param>
        /// <param name="blankOutputQuantity">blankOutputQuantity.</param>
        /// <param name="blankOutputQuantityFamily">blankOutputQuantityFamily.</param>
        /// <param name="operationWarningForTeam">operationWarningForTeam.</param>
        /// <param name="pMMInstalled">pMMInstalled.</param>
        /// <param name="unsupervisedMachineBadgeNo">unsupervisedMachineBadgeNo.</param>
        public InlineResponseDefault32Value(string odataEtag = default(string), string systemId = default(string), string separator = default(string), string defaultLanguage = default(string), string defaultTheme = default(string), string currentUser = default(string), string outputText = default(string), string outputOnlyText = default(string), string familyOutputText = default(string), string familyOutputOnlyText = default(string), string setupText = default(string), string stopTimeText = default(string), string startText = default(string), string endText = default(string), string startReworkText = default(string), string changeActivityText = default(string), string createStaplingText = default(string), string addStaplingText = default(string), string removeStaplingText = default(string), bool? blankOutputQuantity = default(bool?), bool? blankOutputQuantityFamily = default(bool?), bool? operationWarningForTeam = default(bool?), bool? pMMInstalled = default(bool?), string unsupervisedMachineBadgeNo = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.Separator = separator;
            this.DefaultLanguage = defaultLanguage;
            this.DefaultTheme = defaultTheme;
            this.CurrentUser = currentUser;
            this.OutputText = outputText;
            this.OutputOnlyText = outputOnlyText;
            this.FamilyOutputText = familyOutputText;
            this.FamilyOutputOnlyText = familyOutputOnlyText;
            this.SetupText = setupText;
            this.StopTimeText = stopTimeText;
            this.StartText = startText;
            this.EndText = endText;
            this.StartReworkText = startReworkText;
            this.ChangeActivityText = changeActivityText;
            this.CreateStaplingText = createStaplingText;
            this.AddStaplingText = addStaplingText;
            this.RemoveStaplingText = removeStaplingText;
            this.BlankOutputQuantity = blankOutputQuantity;
            this.BlankOutputQuantityFamily = blankOutputQuantityFamily;
            this.OperationWarningForTeam = operationWarningForTeam;
            this.PMMInstalled = pMMInstalled;
            this.UnsupervisedMachineBadgeNo = unsupervisedMachineBadgeNo;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// separator
        /// </summary>
        /// <value>separator</value>
        [DataMember(Name="separator", EmitDefaultValue=false)]
        public string Separator { get; set; }

        /// <summary>
        /// defaultLanguage
        /// </summary>
        /// <value>defaultLanguage</value>
        [DataMember(Name="defaultLanguage", EmitDefaultValue=false)]
        public string DefaultLanguage { get; set; }

        /// <summary>
        /// defaultTheme
        /// </summary>
        /// <value>defaultTheme</value>
        [DataMember(Name="defaultTheme", EmitDefaultValue=false)]
        public string DefaultTheme { get; set; }

        /// <summary>
        /// currentUser
        /// </summary>
        /// <value>currentUser</value>
        [DataMember(Name="currentUser", EmitDefaultValue=false)]
        public string CurrentUser { get; set; }

        /// <summary>
        /// outputText
        /// </summary>
        /// <value>outputText</value>
        [DataMember(Name="outputText", EmitDefaultValue=false)]
        public string OutputText { get; set; }

        /// <summary>
        /// outputOnlyText
        /// </summary>
        /// <value>outputOnlyText</value>
        [DataMember(Name="outputOnlyText", EmitDefaultValue=false)]
        public string OutputOnlyText { get; set; }

        /// <summary>
        /// familyOutputText
        /// </summary>
        /// <value>familyOutputText</value>
        [DataMember(Name="familyOutputText", EmitDefaultValue=false)]
        public string FamilyOutputText { get; set; }

        /// <summary>
        /// familyOutputOnlyText
        /// </summary>
        /// <value>familyOutputOnlyText</value>
        [DataMember(Name="familyOutputOnlyText", EmitDefaultValue=false)]
        public string FamilyOutputOnlyText { get; set; }

        /// <summary>
        /// setupText
        /// </summary>
        /// <value>setupText</value>
        [DataMember(Name="setupText", EmitDefaultValue=false)]
        public string SetupText { get; set; }

        /// <summary>
        /// stopTimeText
        /// </summary>
        /// <value>stopTimeText</value>
        [DataMember(Name="stopTimeText", EmitDefaultValue=false)]
        public string StopTimeText { get; set; }

        /// <summary>
        /// startText
        /// </summary>
        /// <value>startText</value>
        [DataMember(Name="startText", EmitDefaultValue=false)]
        public string StartText { get; set; }

        /// <summary>
        /// endText
        /// </summary>
        /// <value>endText</value>
        [DataMember(Name="endText", EmitDefaultValue=false)]
        public string EndText { get; set; }

        /// <summary>
        /// startReworkText
        /// </summary>
        /// <value>startReworkText</value>
        [DataMember(Name="startReworkText", EmitDefaultValue=false)]
        public string StartReworkText { get; set; }

        /// <summary>
        /// changeActivityText
        /// </summary>
        /// <value>changeActivityText</value>
        [DataMember(Name="changeActivityText", EmitDefaultValue=false)]
        public string ChangeActivityText { get; set; }

        /// <summary>
        /// createStaplingText
        /// </summary>
        /// <value>createStaplingText</value>
        [DataMember(Name="createStaplingText", EmitDefaultValue=false)]
        public string CreateStaplingText { get; set; }

        /// <summary>
        /// addStaplingText
        /// </summary>
        /// <value>addStaplingText</value>
        [DataMember(Name="addStaplingText", EmitDefaultValue=false)]
        public string AddStaplingText { get; set; }

        /// <summary>
        /// removeStaplingText
        /// </summary>
        /// <value>removeStaplingText</value>
        [DataMember(Name="removeStaplingText", EmitDefaultValue=false)]
        public string RemoveStaplingText { get; set; }

        /// <summary>
        /// blankOutputQuantity
        /// </summary>
        /// <value>blankOutputQuantity</value>
        [DataMember(Name="blankOutputQuantity", EmitDefaultValue=false)]
        public bool? BlankOutputQuantity { get; set; }

        /// <summary>
        /// blankOutputQuantityFamily
        /// </summary>
        /// <value>blankOutputQuantityFamily</value>
        [DataMember(Name="blankOutputQuantityFamily", EmitDefaultValue=false)]
        public bool? BlankOutputQuantityFamily { get; set; }

        /// <summary>
        /// operationWarningForTeam
        /// </summary>
        /// <value>operationWarningForTeam</value>
        [DataMember(Name="operationWarningForTeam", EmitDefaultValue=false)]
        public bool? OperationWarningForTeam { get; set; }

        /// <summary>
        /// pMMInstalled
        /// </summary>
        /// <value>pMMInstalled</value>
        [DataMember(Name="pMMInstalled", EmitDefaultValue=false)]
        public bool? PMMInstalled { get; set; }

        /// <summary>
        /// unsupervisedMachineBadgeNo
        /// </summary>
        /// <value>unsupervisedMachineBadgeNo</value>
        [DataMember(Name="unsupervisedMachineBadgeNo", EmitDefaultValue=false)]
        public string UnsupervisedMachineBadgeNo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault32Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  Separator: ").Append(Separator).Append("\n");
            sb.Append("  DefaultLanguage: ").Append(DefaultLanguage).Append("\n");
            sb.Append("  DefaultTheme: ").Append(DefaultTheme).Append("\n");
            sb.Append("  CurrentUser: ").Append(CurrentUser).Append("\n");
            sb.Append("  OutputText: ").Append(OutputText).Append("\n");
            sb.Append("  OutputOnlyText: ").Append(OutputOnlyText).Append("\n");
            sb.Append("  FamilyOutputText: ").Append(FamilyOutputText).Append("\n");
            sb.Append("  FamilyOutputOnlyText: ").Append(FamilyOutputOnlyText).Append("\n");
            sb.Append("  SetupText: ").Append(SetupText).Append("\n");
            sb.Append("  StopTimeText: ").Append(StopTimeText).Append("\n");
            sb.Append("  StartText: ").Append(StartText).Append("\n");
            sb.Append("  EndText: ").Append(EndText).Append("\n");
            sb.Append("  StartReworkText: ").Append(StartReworkText).Append("\n");
            sb.Append("  ChangeActivityText: ").Append(ChangeActivityText).Append("\n");
            sb.Append("  CreateStaplingText: ").Append(CreateStaplingText).Append("\n");
            sb.Append("  AddStaplingText: ").Append(AddStaplingText).Append("\n");
            sb.Append("  RemoveStaplingText: ").Append(RemoveStaplingText).Append("\n");
            sb.Append("  BlankOutputQuantity: ").Append(BlankOutputQuantity).Append("\n");
            sb.Append("  BlankOutputQuantityFamily: ").Append(BlankOutputQuantityFamily).Append("\n");
            sb.Append("  OperationWarningForTeam: ").Append(OperationWarningForTeam).Append("\n");
            sb.Append("  PMMInstalled: ").Append(PMMInstalled).Append("\n");
            sb.Append("  UnsupervisedMachineBadgeNo: ").Append(UnsupervisedMachineBadgeNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault32Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault32Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault32Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault32Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.Separator == input.Separator ||
                    (this.Separator != null &&
                    this.Separator.Equals(input.Separator))
                ) && 
                (
                    this.DefaultLanguage == input.DefaultLanguage ||
                    (this.DefaultLanguage != null &&
                    this.DefaultLanguage.Equals(input.DefaultLanguage))
                ) && 
                (
                    this.DefaultTheme == input.DefaultTheme ||
                    (this.DefaultTheme != null &&
                    this.DefaultTheme.Equals(input.DefaultTheme))
                ) && 
                (
                    this.CurrentUser == input.CurrentUser ||
                    (this.CurrentUser != null &&
                    this.CurrentUser.Equals(input.CurrentUser))
                ) && 
                (
                    this.OutputText == input.OutputText ||
                    (this.OutputText != null &&
                    this.OutputText.Equals(input.OutputText))
                ) && 
                (
                    this.OutputOnlyText == input.OutputOnlyText ||
                    (this.OutputOnlyText != null &&
                    this.OutputOnlyText.Equals(input.OutputOnlyText))
                ) && 
                (
                    this.FamilyOutputText == input.FamilyOutputText ||
                    (this.FamilyOutputText != null &&
                    this.FamilyOutputText.Equals(input.FamilyOutputText))
                ) && 
                (
                    this.FamilyOutputOnlyText == input.FamilyOutputOnlyText ||
                    (this.FamilyOutputOnlyText != null &&
                    this.FamilyOutputOnlyText.Equals(input.FamilyOutputOnlyText))
                ) && 
                (
                    this.SetupText == input.SetupText ||
                    (this.SetupText != null &&
                    this.SetupText.Equals(input.SetupText))
                ) && 
                (
                    this.StopTimeText == input.StopTimeText ||
                    (this.StopTimeText != null &&
                    this.StopTimeText.Equals(input.StopTimeText))
                ) && 
                (
                    this.StartText == input.StartText ||
                    (this.StartText != null &&
                    this.StartText.Equals(input.StartText))
                ) && 
                (
                    this.EndText == input.EndText ||
                    (this.EndText != null &&
                    this.EndText.Equals(input.EndText))
                ) && 
                (
                    this.StartReworkText == input.StartReworkText ||
                    (this.StartReworkText != null &&
                    this.StartReworkText.Equals(input.StartReworkText))
                ) && 
                (
                    this.ChangeActivityText == input.ChangeActivityText ||
                    (this.ChangeActivityText != null &&
                    this.ChangeActivityText.Equals(input.ChangeActivityText))
                ) && 
                (
                    this.CreateStaplingText == input.CreateStaplingText ||
                    (this.CreateStaplingText != null &&
                    this.CreateStaplingText.Equals(input.CreateStaplingText))
                ) && 
                (
                    this.AddStaplingText == input.AddStaplingText ||
                    (this.AddStaplingText != null &&
                    this.AddStaplingText.Equals(input.AddStaplingText))
                ) && 
                (
                    this.RemoveStaplingText == input.RemoveStaplingText ||
                    (this.RemoveStaplingText != null &&
                    this.RemoveStaplingText.Equals(input.RemoveStaplingText))
                ) && 
                (
                    this.BlankOutputQuantity == input.BlankOutputQuantity ||
                    (this.BlankOutputQuantity != null &&
                    this.BlankOutputQuantity.Equals(input.BlankOutputQuantity))
                ) && 
                (
                    this.BlankOutputQuantityFamily == input.BlankOutputQuantityFamily ||
                    (this.BlankOutputQuantityFamily != null &&
                    this.BlankOutputQuantityFamily.Equals(input.BlankOutputQuantityFamily))
                ) && 
                (
                    this.OperationWarningForTeam == input.OperationWarningForTeam ||
                    (this.OperationWarningForTeam != null &&
                    this.OperationWarningForTeam.Equals(input.OperationWarningForTeam))
                ) && 
                (
                    this.PMMInstalled == input.PMMInstalled ||
                    (this.PMMInstalled != null &&
                    this.PMMInstalled.Equals(input.PMMInstalled))
                ) && 
                (
                    this.UnsupervisedMachineBadgeNo == input.UnsupervisedMachineBadgeNo ||
                    (this.UnsupervisedMachineBadgeNo != null &&
                    this.UnsupervisedMachineBadgeNo.Equals(input.UnsupervisedMachineBadgeNo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.Separator != null)
                    hashCode = hashCode * 59 + this.Separator.GetHashCode();
                if (this.DefaultLanguage != null)
                    hashCode = hashCode * 59 + this.DefaultLanguage.GetHashCode();
                if (this.DefaultTheme != null)
                    hashCode = hashCode * 59 + this.DefaultTheme.GetHashCode();
                if (this.CurrentUser != null)
                    hashCode = hashCode * 59 + this.CurrentUser.GetHashCode();
                if (this.OutputText != null)
                    hashCode = hashCode * 59 + this.OutputText.GetHashCode();
                if (this.OutputOnlyText != null)
                    hashCode = hashCode * 59 + this.OutputOnlyText.GetHashCode();
                if (this.FamilyOutputText != null)
                    hashCode = hashCode * 59 + this.FamilyOutputText.GetHashCode();
                if (this.FamilyOutputOnlyText != null)
                    hashCode = hashCode * 59 + this.FamilyOutputOnlyText.GetHashCode();
                if (this.SetupText != null)
                    hashCode = hashCode * 59 + this.SetupText.GetHashCode();
                if (this.StopTimeText != null)
                    hashCode = hashCode * 59 + this.StopTimeText.GetHashCode();
                if (this.StartText != null)
                    hashCode = hashCode * 59 + this.StartText.GetHashCode();
                if (this.EndText != null)
                    hashCode = hashCode * 59 + this.EndText.GetHashCode();
                if (this.StartReworkText != null)
                    hashCode = hashCode * 59 + this.StartReworkText.GetHashCode();
                if (this.ChangeActivityText != null)
                    hashCode = hashCode * 59 + this.ChangeActivityText.GetHashCode();
                if (this.CreateStaplingText != null)
                    hashCode = hashCode * 59 + this.CreateStaplingText.GetHashCode();
                if (this.AddStaplingText != null)
                    hashCode = hashCode * 59 + this.AddStaplingText.GetHashCode();
                if (this.RemoveStaplingText != null)
                    hashCode = hashCode * 59 + this.RemoveStaplingText.GetHashCode();
                if (this.BlankOutputQuantity != null)
                    hashCode = hashCode * 59 + this.BlankOutputQuantity.GetHashCode();
                if (this.BlankOutputQuantityFamily != null)
                    hashCode = hashCode * 59 + this.BlankOutputQuantityFamily.GetHashCode();
                if (this.OperationWarningForTeam != null)
                    hashCode = hashCode * 59 + this.OperationWarningForTeam.GetHashCode();
                if (this.PMMInstalled != null)
                    hashCode = hashCode * 59 + this.PMMInstalled.GetHashCode();
                if (this.UnsupervisedMachineBadgeNo != null)
                    hashCode = hashCode * 59 + this.UnsupervisedMachineBadgeNo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
