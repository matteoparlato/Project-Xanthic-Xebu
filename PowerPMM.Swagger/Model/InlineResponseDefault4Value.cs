/* 
 * Power PLM Connector
 *
 * The custom connector used by Power PLM by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault4Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault4Value :  IEquatable<InlineResponseDefault4Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault4Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="tableID">tableID.</param>
        /// <param name="no">no.</param>
        /// <param name="no2">no2.</param>
        /// <param name="lineNo">lineNo.</param>
        /// <param name="code">code.</param>
        /// <param name="comment">comment.</param>
        /// <param name="date">date.</param>
        public InlineResponseDefault4Value(string odataEtag = default(string), string systemId = default(string), decimal? tableID = default(decimal?), string no = default(string), string no2 = default(string), decimal? lineNo = default(decimal?), string code = default(string), string comment = default(string), DateTime? date = default(DateTime?))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.TableID = tableID;
            this.No = no;
            this.No2 = no2;
            this.LineNo = lineNo;
            this.Code = code;
            this.Comment = comment;
            this.Date = date;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// tableID
        /// </summary>
        /// <value>tableID</value>
        [DataMember(Name="tableID", EmitDefaultValue=false)]
        public decimal? TableID { get; set; }

        /// <summary>
        /// no
        /// </summary>
        /// <value>no</value>
        [DataMember(Name="no", EmitDefaultValue=false)]
        public string No { get; set; }

        /// <summary>
        /// no2
        /// </summary>
        /// <value>no2</value>
        [DataMember(Name="no2", EmitDefaultValue=false)]
        public string No2 { get; set; }

        /// <summary>
        /// lineNo
        /// </summary>
        /// <value>lineNo</value>
        [DataMember(Name="lineNo", EmitDefaultValue=false)]
        public decimal? LineNo { get; set; }

        /// <summary>
        /// code
        /// </summary>
        /// <value>code</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// comment
        /// </summary>
        /// <value>comment</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// date
        /// </summary>
        /// <value>date</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault4Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  TableID: ").Append(TableID).Append("\n");
            sb.Append("  No: ").Append(No).Append("\n");
            sb.Append("  No2: ").Append(No2).Append("\n");
            sb.Append("  LineNo: ").Append(LineNo).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault4Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault4Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault4Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault4Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.TableID == input.TableID ||
                    (this.TableID != null &&
                    this.TableID.Equals(input.TableID))
                ) && 
                (
                    this.No == input.No ||
                    (this.No != null &&
                    this.No.Equals(input.No))
                ) && 
                (
                    this.No2 == input.No2 ||
                    (this.No2 != null &&
                    this.No2.Equals(input.No2))
                ) && 
                (
                    this.LineNo == input.LineNo ||
                    (this.LineNo != null &&
                    this.LineNo.Equals(input.LineNo))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.TableID != null)
                    hashCode = hashCode * 59 + this.TableID.GetHashCode();
                if (this.No != null)
                    hashCode = hashCode * 59 + this.No.GetHashCode();
                if (this.No2 != null)
                    hashCode = hashCode * 59 + this.No2.GetHashCode();
                if (this.LineNo != null)
                    hashCode = hashCode * 59 + this.LineNo.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
