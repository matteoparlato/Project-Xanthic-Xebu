/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault41Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault41Value :  IEquatable<InlineResponseDefault41Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault41Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="inspectionOrderNo">inspectionOrderNo.</param>
        /// <param name="inspectionOrderType">inspectionOrderType.</param>
        /// <param name="inspectionOrderTypeAsInt">inspectionOrderTypeAsInt.</param>
        /// <param name="inspectionOrderTypeName">inspectionOrderTypeName.</param>
        /// <param name="inspectionOrderLineNo">inspectionOrderLineNo.</param>
        /// <param name="lineNo">lineNo.</param>
        /// <param name="position">position.</param>
        /// <param name="actualValue">actualValue.</param>
        /// <param name="valueOperator">valueOperator.</param>
        /// <param name="valueOperatorAsInt">valueOperatorAsInt.</param>
        /// <param name="valueOperatorName">valueOperatorName.</param>
        /// <param name="attributeFulfilled">attributeFulfilled.</param>
        /// <param name="attributeFulfilledAsInt">attributeFulfilledAsInt.</param>
        /// <param name="attributeFulfilledName">attributeFulfilledName.</param>
        /// <param name="deviation">deviation.</param>
        /// <param name="parameterAttributeCode">parameterAttributeCode.</param>
        /// <param name="failureNo">failureNo.</param>
        /// <param name="reference">reference.</param>
        /// <param name="panelId">panelId.</param>
        public InlineResponseDefault41Value(string odataEtag = default(string), string systemId = default(string), string inspectionOrderNo = default(string), string inspectionOrderType = default(string), decimal? inspectionOrderTypeAsInt = default(decimal?), string inspectionOrderTypeName = default(string), decimal? inspectionOrderLineNo = default(decimal?), decimal? lineNo = default(decimal?), string position = default(string), decimal? actualValue = default(decimal?), string valueOperator = default(string), decimal? valueOperatorAsInt = default(decimal?), string valueOperatorName = default(string), string attributeFulfilled = default(string), decimal? attributeFulfilledAsInt = default(decimal?), string attributeFulfilledName = default(string), decimal? deviation = default(decimal?), string parameterAttributeCode = default(string), string failureNo = default(string), string reference = default(string), string panelId = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.InspectionOrderNo = inspectionOrderNo;
            this.InspectionOrderType = inspectionOrderType;
            this.InspectionOrderTypeAsInt = inspectionOrderTypeAsInt;
            this.InspectionOrderTypeName = inspectionOrderTypeName;
            this.InspectionOrderLineNo = inspectionOrderLineNo;
            this.LineNo = lineNo;
            this.Position = position;
            this.ActualValue = actualValue;
            this.ValueOperator = valueOperator;
            this.ValueOperatorAsInt = valueOperatorAsInt;
            this.ValueOperatorName = valueOperatorName;
            this.AttributeFulfilled = attributeFulfilled;
            this.AttributeFulfilledAsInt = attributeFulfilledAsInt;
            this.AttributeFulfilledName = attributeFulfilledName;
            this.Deviation = deviation;
            this.ParameterAttributeCode = parameterAttributeCode;
            this.FailureNo = failureNo;
            this.Reference = reference;
            this.PanelId = panelId;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// inspectionOrderNo
        /// </summary>
        /// <value>inspectionOrderNo</value>
        [DataMember(Name="inspectionOrderNo", EmitDefaultValue=false)]
        public string InspectionOrderNo { get; set; }

        /// <summary>
        /// inspectionOrderType
        /// </summary>
        /// <value>inspectionOrderType</value>
        [DataMember(Name="inspectionOrderType", EmitDefaultValue=false)]
        public string InspectionOrderType { get; set; }

        /// <summary>
        /// inspectionOrderTypeAsInt
        /// </summary>
        /// <value>inspectionOrderTypeAsInt</value>
        [DataMember(Name="inspectionOrderTypeAsInt", EmitDefaultValue=false)]
        public decimal? InspectionOrderTypeAsInt { get; set; }

        /// <summary>
        /// inspectionOrderTypeName
        /// </summary>
        /// <value>inspectionOrderTypeName</value>
        [DataMember(Name="inspectionOrderTypeName", EmitDefaultValue=false)]
        public string InspectionOrderTypeName { get; set; }

        /// <summary>
        /// inspectionOrderLineNo
        /// </summary>
        /// <value>inspectionOrderLineNo</value>
        [DataMember(Name="inspectionOrderLineNo", EmitDefaultValue=false)]
        public decimal? InspectionOrderLineNo { get; set; }

        /// <summary>
        /// lineNo
        /// </summary>
        /// <value>lineNo</value>
        [DataMember(Name="lineNo", EmitDefaultValue=false)]
        public decimal? LineNo { get; set; }

        /// <summary>
        /// position
        /// </summary>
        /// <value>position</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public string Position { get; set; }

        /// <summary>
        /// actualValue
        /// </summary>
        /// <value>actualValue</value>
        [DataMember(Name="actualValue", EmitDefaultValue=false)]
        public decimal? ActualValue { get; set; }

        /// <summary>
        /// valueOperator
        /// </summary>
        /// <value>valueOperator</value>
        [DataMember(Name="valueOperator", EmitDefaultValue=false)]
        public string ValueOperator { get; set; }

        /// <summary>
        /// valueOperatorAsInt
        /// </summary>
        /// <value>valueOperatorAsInt</value>
        [DataMember(Name="valueOperatorAsInt", EmitDefaultValue=false)]
        public decimal? ValueOperatorAsInt { get; set; }

        /// <summary>
        /// valueOperatorName
        /// </summary>
        /// <value>valueOperatorName</value>
        [DataMember(Name="valueOperatorName", EmitDefaultValue=false)]
        public string ValueOperatorName { get; set; }

        /// <summary>
        /// attributeFulfilled
        /// </summary>
        /// <value>attributeFulfilled</value>
        [DataMember(Name="attributeFulfilled", EmitDefaultValue=false)]
        public string AttributeFulfilled { get; set; }

        /// <summary>
        /// attributeFulfilledAsInt
        /// </summary>
        /// <value>attributeFulfilledAsInt</value>
        [DataMember(Name="attributeFulfilledAsInt", EmitDefaultValue=false)]
        public decimal? AttributeFulfilledAsInt { get; set; }

        /// <summary>
        /// attributeFulfilledName
        /// </summary>
        /// <value>attributeFulfilledName</value>
        [DataMember(Name="attributeFulfilledName", EmitDefaultValue=false)]
        public string AttributeFulfilledName { get; set; }

        /// <summary>
        /// deviation
        /// </summary>
        /// <value>deviation</value>
        [DataMember(Name="deviation", EmitDefaultValue=false)]
        public decimal? Deviation { get; set; }

        /// <summary>
        /// parameterAttributeCode
        /// </summary>
        /// <value>parameterAttributeCode</value>
        [DataMember(Name="parameterAttributeCode", EmitDefaultValue=false)]
        public string ParameterAttributeCode { get; set; }

        /// <summary>
        /// failureNo
        /// </summary>
        /// <value>failureNo</value>
        [DataMember(Name="failureNo", EmitDefaultValue=false)]
        public string FailureNo { get; set; }

        /// <summary>
        /// reference
        /// </summary>
        /// <value>reference</value>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// panelId
        /// </summary>
        /// <value>panelId</value>
        [DataMember(Name="panelId", EmitDefaultValue=false)]
        public string PanelId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault41Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  InspectionOrderNo: ").Append(InspectionOrderNo).Append("\n");
            sb.Append("  InspectionOrderType: ").Append(InspectionOrderType).Append("\n");
            sb.Append("  InspectionOrderTypeAsInt: ").Append(InspectionOrderTypeAsInt).Append("\n");
            sb.Append("  InspectionOrderTypeName: ").Append(InspectionOrderTypeName).Append("\n");
            sb.Append("  InspectionOrderLineNo: ").Append(InspectionOrderLineNo).Append("\n");
            sb.Append("  LineNo: ").Append(LineNo).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  ActualValue: ").Append(ActualValue).Append("\n");
            sb.Append("  ValueOperator: ").Append(ValueOperator).Append("\n");
            sb.Append("  ValueOperatorAsInt: ").Append(ValueOperatorAsInt).Append("\n");
            sb.Append("  ValueOperatorName: ").Append(ValueOperatorName).Append("\n");
            sb.Append("  AttributeFulfilled: ").Append(AttributeFulfilled).Append("\n");
            sb.Append("  AttributeFulfilledAsInt: ").Append(AttributeFulfilledAsInt).Append("\n");
            sb.Append("  AttributeFulfilledName: ").Append(AttributeFulfilledName).Append("\n");
            sb.Append("  Deviation: ").Append(Deviation).Append("\n");
            sb.Append("  ParameterAttributeCode: ").Append(ParameterAttributeCode).Append("\n");
            sb.Append("  FailureNo: ").Append(FailureNo).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  PanelId: ").Append(PanelId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault41Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault41Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault41Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault41Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.InspectionOrderNo == input.InspectionOrderNo ||
                    (this.InspectionOrderNo != null &&
                    this.InspectionOrderNo.Equals(input.InspectionOrderNo))
                ) && 
                (
                    this.InspectionOrderType == input.InspectionOrderType ||
                    (this.InspectionOrderType != null &&
                    this.InspectionOrderType.Equals(input.InspectionOrderType))
                ) && 
                (
                    this.InspectionOrderTypeAsInt == input.InspectionOrderTypeAsInt ||
                    (this.InspectionOrderTypeAsInt != null &&
                    this.InspectionOrderTypeAsInt.Equals(input.InspectionOrderTypeAsInt))
                ) && 
                (
                    this.InspectionOrderTypeName == input.InspectionOrderTypeName ||
                    (this.InspectionOrderTypeName != null &&
                    this.InspectionOrderTypeName.Equals(input.InspectionOrderTypeName))
                ) && 
                (
                    this.InspectionOrderLineNo == input.InspectionOrderLineNo ||
                    (this.InspectionOrderLineNo != null &&
                    this.InspectionOrderLineNo.Equals(input.InspectionOrderLineNo))
                ) && 
                (
                    this.LineNo == input.LineNo ||
                    (this.LineNo != null &&
                    this.LineNo.Equals(input.LineNo))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.ActualValue == input.ActualValue ||
                    (this.ActualValue != null &&
                    this.ActualValue.Equals(input.ActualValue))
                ) && 
                (
                    this.ValueOperator == input.ValueOperator ||
                    (this.ValueOperator != null &&
                    this.ValueOperator.Equals(input.ValueOperator))
                ) && 
                (
                    this.ValueOperatorAsInt == input.ValueOperatorAsInt ||
                    (this.ValueOperatorAsInt != null &&
                    this.ValueOperatorAsInt.Equals(input.ValueOperatorAsInt))
                ) && 
                (
                    this.ValueOperatorName == input.ValueOperatorName ||
                    (this.ValueOperatorName != null &&
                    this.ValueOperatorName.Equals(input.ValueOperatorName))
                ) && 
                (
                    this.AttributeFulfilled == input.AttributeFulfilled ||
                    (this.AttributeFulfilled != null &&
                    this.AttributeFulfilled.Equals(input.AttributeFulfilled))
                ) && 
                (
                    this.AttributeFulfilledAsInt == input.AttributeFulfilledAsInt ||
                    (this.AttributeFulfilledAsInt != null &&
                    this.AttributeFulfilledAsInt.Equals(input.AttributeFulfilledAsInt))
                ) && 
                (
                    this.AttributeFulfilledName == input.AttributeFulfilledName ||
                    (this.AttributeFulfilledName != null &&
                    this.AttributeFulfilledName.Equals(input.AttributeFulfilledName))
                ) && 
                (
                    this.Deviation == input.Deviation ||
                    (this.Deviation != null &&
                    this.Deviation.Equals(input.Deviation))
                ) && 
                (
                    this.ParameterAttributeCode == input.ParameterAttributeCode ||
                    (this.ParameterAttributeCode != null &&
                    this.ParameterAttributeCode.Equals(input.ParameterAttributeCode))
                ) && 
                (
                    this.FailureNo == input.FailureNo ||
                    (this.FailureNo != null &&
                    this.FailureNo.Equals(input.FailureNo))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.PanelId == input.PanelId ||
                    (this.PanelId != null &&
                    this.PanelId.Equals(input.PanelId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.InspectionOrderNo != null)
                    hashCode = hashCode * 59 + this.InspectionOrderNo.GetHashCode();
                if (this.InspectionOrderType != null)
                    hashCode = hashCode * 59 + this.InspectionOrderType.GetHashCode();
                if (this.InspectionOrderTypeAsInt != null)
                    hashCode = hashCode * 59 + this.InspectionOrderTypeAsInt.GetHashCode();
                if (this.InspectionOrderTypeName != null)
                    hashCode = hashCode * 59 + this.InspectionOrderTypeName.GetHashCode();
                if (this.InspectionOrderLineNo != null)
                    hashCode = hashCode * 59 + this.InspectionOrderLineNo.GetHashCode();
                if (this.LineNo != null)
                    hashCode = hashCode * 59 + this.LineNo.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.ActualValue != null)
                    hashCode = hashCode * 59 + this.ActualValue.GetHashCode();
                if (this.ValueOperator != null)
                    hashCode = hashCode * 59 + this.ValueOperator.GetHashCode();
                if (this.ValueOperatorAsInt != null)
                    hashCode = hashCode * 59 + this.ValueOperatorAsInt.GetHashCode();
                if (this.ValueOperatorName != null)
                    hashCode = hashCode * 59 + this.ValueOperatorName.GetHashCode();
                if (this.AttributeFulfilled != null)
                    hashCode = hashCode * 59 + this.AttributeFulfilled.GetHashCode();
                if (this.AttributeFulfilledAsInt != null)
                    hashCode = hashCode * 59 + this.AttributeFulfilledAsInt.GetHashCode();
                if (this.AttributeFulfilledName != null)
                    hashCode = hashCode * 59 + this.AttributeFulfilledName.GetHashCode();
                if (this.Deviation != null)
                    hashCode = hashCode * 59 + this.Deviation.GetHashCode();
                if (this.ParameterAttributeCode != null)
                    hashCode = hashCode * 59 + this.ParameterAttributeCode.GetHashCode();
                if (this.FailureNo != null)
                    hashCode = hashCode * 59 + this.FailureNo.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.PanelId != null)
                    hashCode = hashCode * 59 + this.PanelId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
