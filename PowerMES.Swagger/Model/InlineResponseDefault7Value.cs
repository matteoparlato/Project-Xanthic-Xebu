/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault7Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault7Value :  IEquatable<InlineResponseDefault7Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault7Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="serialNo">serialNo.</param>
        /// <param name="lotNo">lotNo.</param>
        /// <param name="totalAvailableQuantity">totalAvailableQuantity.</param>
        /// <param name="sourceTypeFilter">sourceTypeFilter.</param>
        /// <param name="sourceSubtypeFilter">sourceSubtypeFilter.</param>
        /// <param name="sourceIdFilter">sourceIdFilter.</param>
        /// <param name="sourceBatchNameFilter">sourceBatchNameFilter.</param>
        /// <param name="sourceProdOrderLineFilter">sourceProdOrderLineFilter.</param>
        /// <param name="sourceRefNoFilter">sourceRefNoFilter.</param>
        public InlineResponseDefault7Value(string odataEtag = default(string), string systemId = default(string), string serialNo = default(string), string lotNo = default(string), float? totalAvailableQuantity = default(float?), string sourceTypeFilter = default(string), string sourceSubtypeFilter = default(string), string sourceIdFilter = default(string), string sourceBatchNameFilter = default(string), string sourceProdOrderLineFilter = default(string), string sourceRefNoFilter = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.SerialNo = serialNo;
            this.LotNo = lotNo;
            this.TotalAvailableQuantity = totalAvailableQuantity;
            this.SourceTypeFilter = sourceTypeFilter;
            this.SourceSubtypeFilter = sourceSubtypeFilter;
            this.SourceIdFilter = sourceIdFilter;
            this.SourceBatchNameFilter = sourceBatchNameFilter;
            this.SourceProdOrderLineFilter = sourceProdOrderLineFilter;
            this.SourceRefNoFilter = sourceRefNoFilter;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// serialNo
        /// </summary>
        /// <value>serialNo</value>
        [DataMember(Name="serialNo", EmitDefaultValue=false)]
        public string SerialNo { get; set; }

        /// <summary>
        /// lotNo
        /// </summary>
        /// <value>lotNo</value>
        [DataMember(Name="lotNo", EmitDefaultValue=false)]
        public string LotNo { get; set; }

        /// <summary>
        /// totalAvailableQuantity
        /// </summary>
        /// <value>totalAvailableQuantity</value>
        [DataMember(Name="totalAvailableQuantity", EmitDefaultValue=false)]
        public float? TotalAvailableQuantity { get; set; }

        /// <summary>
        /// sourceTypeFilter
        /// </summary>
        /// <value>sourceTypeFilter</value>
        [DataMember(Name="sourceTypeFilter", EmitDefaultValue=false)]
        public string SourceTypeFilter { get; set; }

        /// <summary>
        /// sourceSubtypeFilter
        /// </summary>
        /// <value>sourceSubtypeFilter</value>
        [DataMember(Name="sourceSubtypeFilter", EmitDefaultValue=false)]
        public string SourceSubtypeFilter { get; set; }

        /// <summary>
        /// sourceIdFilter
        /// </summary>
        /// <value>sourceIdFilter</value>
        [DataMember(Name="sourceIdFilter", EmitDefaultValue=false)]
        public string SourceIdFilter { get; set; }

        /// <summary>
        /// sourceBatchNameFilter
        /// </summary>
        /// <value>sourceBatchNameFilter</value>
        [DataMember(Name="sourceBatchNameFilter", EmitDefaultValue=false)]
        public string SourceBatchNameFilter { get; set; }

        /// <summary>
        /// sourceProdOrderLineFilter
        /// </summary>
        /// <value>sourceProdOrderLineFilter</value>
        [DataMember(Name="sourceProdOrderLineFilter", EmitDefaultValue=false)]
        public string SourceProdOrderLineFilter { get; set; }

        /// <summary>
        /// sourceRefNoFilter
        /// </summary>
        /// <value>sourceRefNoFilter</value>
        [DataMember(Name="sourceRefNoFilter", EmitDefaultValue=false)]
        public string SourceRefNoFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault7Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  SerialNo: ").Append(SerialNo).Append("\n");
            sb.Append("  LotNo: ").Append(LotNo).Append("\n");
            sb.Append("  TotalAvailableQuantity: ").Append(TotalAvailableQuantity).Append("\n");
            sb.Append("  SourceTypeFilter: ").Append(SourceTypeFilter).Append("\n");
            sb.Append("  SourceSubtypeFilter: ").Append(SourceSubtypeFilter).Append("\n");
            sb.Append("  SourceIdFilter: ").Append(SourceIdFilter).Append("\n");
            sb.Append("  SourceBatchNameFilter: ").Append(SourceBatchNameFilter).Append("\n");
            sb.Append("  SourceProdOrderLineFilter: ").Append(SourceProdOrderLineFilter).Append("\n");
            sb.Append("  SourceRefNoFilter: ").Append(SourceRefNoFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault7Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault7Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault7Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault7Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.SerialNo == input.SerialNo ||
                    (this.SerialNo != null &&
                    this.SerialNo.Equals(input.SerialNo))
                ) && 
                (
                    this.LotNo == input.LotNo ||
                    (this.LotNo != null &&
                    this.LotNo.Equals(input.LotNo))
                ) && 
                (
                    this.TotalAvailableQuantity == input.TotalAvailableQuantity ||
                    (this.TotalAvailableQuantity != null &&
                    this.TotalAvailableQuantity.Equals(input.TotalAvailableQuantity))
                ) && 
                (
                    this.SourceTypeFilter == input.SourceTypeFilter ||
                    (this.SourceTypeFilter != null &&
                    this.SourceTypeFilter.Equals(input.SourceTypeFilter))
                ) && 
                (
                    this.SourceSubtypeFilter == input.SourceSubtypeFilter ||
                    (this.SourceSubtypeFilter != null &&
                    this.SourceSubtypeFilter.Equals(input.SourceSubtypeFilter))
                ) && 
                (
                    this.SourceIdFilter == input.SourceIdFilter ||
                    (this.SourceIdFilter != null &&
                    this.SourceIdFilter.Equals(input.SourceIdFilter))
                ) && 
                (
                    this.SourceBatchNameFilter == input.SourceBatchNameFilter ||
                    (this.SourceBatchNameFilter != null &&
                    this.SourceBatchNameFilter.Equals(input.SourceBatchNameFilter))
                ) && 
                (
                    this.SourceProdOrderLineFilter == input.SourceProdOrderLineFilter ||
                    (this.SourceProdOrderLineFilter != null &&
                    this.SourceProdOrderLineFilter.Equals(input.SourceProdOrderLineFilter))
                ) && 
                (
                    this.SourceRefNoFilter == input.SourceRefNoFilter ||
                    (this.SourceRefNoFilter != null &&
                    this.SourceRefNoFilter.Equals(input.SourceRefNoFilter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.SerialNo != null)
                    hashCode = hashCode * 59 + this.SerialNo.GetHashCode();
                if (this.LotNo != null)
                    hashCode = hashCode * 59 + this.LotNo.GetHashCode();
                if (this.TotalAvailableQuantity != null)
                    hashCode = hashCode * 59 + this.TotalAvailableQuantity.GetHashCode();
                if (this.SourceTypeFilter != null)
                    hashCode = hashCode * 59 + this.SourceTypeFilter.GetHashCode();
                if (this.SourceSubtypeFilter != null)
                    hashCode = hashCode * 59 + this.SourceSubtypeFilter.GetHashCode();
                if (this.SourceIdFilter != null)
                    hashCode = hashCode * 59 + this.SourceIdFilter.GetHashCode();
                if (this.SourceBatchNameFilter != null)
                    hashCode = hashCode * 59 + this.SourceBatchNameFilter.GetHashCode();
                if (this.SourceProdOrderLineFilter != null)
                    hashCode = hashCode * 59 + this.SourceProdOrderLineFilter.GetHashCode();
                if (this.SourceRefNoFilter != null)
                    hashCode = hashCode * 59 + this.SourceRefNoFilter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
