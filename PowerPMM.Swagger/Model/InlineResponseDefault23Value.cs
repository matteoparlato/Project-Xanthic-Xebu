/* 
 * Power PLM Connector
 *
 * The custom connector used by Power PLM by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault23Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault23Value :  IEquatable<InlineResponseDefault23Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault23Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="sourceType">sourceType.</param>
        /// <param name="sourceNo">sourceNo.</param>
        /// <param name="sourceNo2">sourceNo2.</param>
        /// <param name="sourceLineNo">sourceLineNo.</param>
        /// <param name="itemNo">itemNo.</param>
        /// <param name="description">description.</param>
        /// <param name="description2">description2.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="unitOfMeasureCode">unitOfMeasureCode.</param>
        /// <param name="qtyPerBaseUnitOfMeasure">qtyPerBaseUnitOfMeasure.</param>
        /// <param name="quantityBase">quantityBase.</param>
        /// <param name="locationCode">locationCode.</param>
        /// <param name="binCode">binCode.</param>
        /// <param name="variantCode">variantCode.</param>
        public InlineResponseDefault23Value(string odataEtag = default(string), decimal? sourceType = default(decimal?), string sourceNo = default(string), string sourceNo2 = default(string), decimal? sourceLineNo = default(decimal?), string itemNo = default(string), string description = default(string), string description2 = default(string), decimal? quantity = default(decimal?), string unitOfMeasureCode = default(string), decimal? qtyPerBaseUnitOfMeasure = default(decimal?), decimal? quantityBase = default(decimal?), string locationCode = default(string), string binCode = default(string), string variantCode = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SourceType = sourceType;
            this.SourceNo = sourceNo;
            this.SourceNo2 = sourceNo2;
            this.SourceLineNo = sourceLineNo;
            this.ItemNo = itemNo;
            this.Description = description;
            this.Description2 = description2;
            this.Quantity = quantity;
            this.UnitOfMeasureCode = unitOfMeasureCode;
            this.QtyPerBaseUnitOfMeasure = qtyPerBaseUnitOfMeasure;
            this.QuantityBase = quantityBase;
            this.LocationCode = locationCode;
            this.BinCode = binCode;
            this.VariantCode = variantCode;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// sourceType
        /// </summary>
        /// <value>sourceType</value>
        [DataMember(Name="sourceType", EmitDefaultValue=false)]
        public decimal? SourceType { get; set; }

        /// <summary>
        /// sourceNo
        /// </summary>
        /// <value>sourceNo</value>
        [DataMember(Name="sourceNo", EmitDefaultValue=false)]
        public string SourceNo { get; set; }

        /// <summary>
        /// sourceNo2
        /// </summary>
        /// <value>sourceNo2</value>
        [DataMember(Name="sourceNo2", EmitDefaultValue=false)]
        public string SourceNo2 { get; set; }

        /// <summary>
        /// sourceLineNo
        /// </summary>
        /// <value>sourceLineNo</value>
        [DataMember(Name="sourceLineNo", EmitDefaultValue=false)]
        public decimal? SourceLineNo { get; set; }

        /// <summary>
        /// itemNo
        /// </summary>
        /// <value>itemNo</value>
        [DataMember(Name="itemNo", EmitDefaultValue=false)]
        public string ItemNo { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// description2
        /// </summary>
        /// <value>description2</value>
        [DataMember(Name="description2", EmitDefaultValue=false)]
        public string Description2 { get; set; }

        /// <summary>
        /// quantity
        /// </summary>
        /// <value>quantity</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// unitOfMeasureCode
        /// </summary>
        /// <value>unitOfMeasureCode</value>
        [DataMember(Name="unitOfMeasureCode", EmitDefaultValue=false)]
        public string UnitOfMeasureCode { get; set; }

        /// <summary>
        /// qtyPerBaseUnitOfMeasure
        /// </summary>
        /// <value>qtyPerBaseUnitOfMeasure</value>
        [DataMember(Name="qtyPerBaseUnitOfMeasure", EmitDefaultValue=false)]
        public decimal? QtyPerBaseUnitOfMeasure { get; set; }

        /// <summary>
        /// quantityBase
        /// </summary>
        /// <value>quantityBase</value>
        [DataMember(Name="quantityBase", EmitDefaultValue=false)]
        public decimal? QuantityBase { get; set; }

        /// <summary>
        /// locationCode
        /// </summary>
        /// <value>locationCode</value>
        [DataMember(Name="locationCode", EmitDefaultValue=false)]
        public string LocationCode { get; set; }

        /// <summary>
        /// binCode
        /// </summary>
        /// <value>binCode</value>
        [DataMember(Name="binCode", EmitDefaultValue=false)]
        public string BinCode { get; set; }

        /// <summary>
        /// variantCode
        /// </summary>
        /// <value>variantCode</value>
        [DataMember(Name="variantCode", EmitDefaultValue=false)]
        public string VariantCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault23Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  SourceNo: ").Append(SourceNo).Append("\n");
            sb.Append("  SourceNo2: ").Append(SourceNo2).Append("\n");
            sb.Append("  SourceLineNo: ").Append(SourceLineNo).Append("\n");
            sb.Append("  ItemNo: ").Append(ItemNo).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Description2: ").Append(Description2).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitOfMeasureCode: ").Append(UnitOfMeasureCode).Append("\n");
            sb.Append("  QtyPerBaseUnitOfMeasure: ").Append(QtyPerBaseUnitOfMeasure).Append("\n");
            sb.Append("  QuantityBase: ").Append(QuantityBase).Append("\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  BinCode: ").Append(BinCode).Append("\n");
            sb.Append("  VariantCode: ").Append(VariantCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault23Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault23Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault23Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault23Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SourceType == input.SourceType ||
                    (this.SourceType != null &&
                    this.SourceType.Equals(input.SourceType))
                ) && 
                (
                    this.SourceNo == input.SourceNo ||
                    (this.SourceNo != null &&
                    this.SourceNo.Equals(input.SourceNo))
                ) && 
                (
                    this.SourceNo2 == input.SourceNo2 ||
                    (this.SourceNo2 != null &&
                    this.SourceNo2.Equals(input.SourceNo2))
                ) && 
                (
                    this.SourceLineNo == input.SourceLineNo ||
                    (this.SourceLineNo != null &&
                    this.SourceLineNo.Equals(input.SourceLineNo))
                ) && 
                (
                    this.ItemNo == input.ItemNo ||
                    (this.ItemNo != null &&
                    this.ItemNo.Equals(input.ItemNo))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Description2 == input.Description2 ||
                    (this.Description2 != null &&
                    this.Description2.Equals(input.Description2))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.UnitOfMeasureCode == input.UnitOfMeasureCode ||
                    (this.UnitOfMeasureCode != null &&
                    this.UnitOfMeasureCode.Equals(input.UnitOfMeasureCode))
                ) && 
                (
                    this.QtyPerBaseUnitOfMeasure == input.QtyPerBaseUnitOfMeasure ||
                    (this.QtyPerBaseUnitOfMeasure != null &&
                    this.QtyPerBaseUnitOfMeasure.Equals(input.QtyPerBaseUnitOfMeasure))
                ) && 
                (
                    this.QuantityBase == input.QuantityBase ||
                    (this.QuantityBase != null &&
                    this.QuantityBase.Equals(input.QuantityBase))
                ) && 
                (
                    this.LocationCode == input.LocationCode ||
                    (this.LocationCode != null &&
                    this.LocationCode.Equals(input.LocationCode))
                ) && 
                (
                    this.BinCode == input.BinCode ||
                    (this.BinCode != null &&
                    this.BinCode.Equals(input.BinCode))
                ) && 
                (
                    this.VariantCode == input.VariantCode ||
                    (this.VariantCode != null &&
                    this.VariantCode.Equals(input.VariantCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SourceType != null)
                    hashCode = hashCode * 59 + this.SourceType.GetHashCode();
                if (this.SourceNo != null)
                    hashCode = hashCode * 59 + this.SourceNo.GetHashCode();
                if (this.SourceNo2 != null)
                    hashCode = hashCode * 59 + this.SourceNo2.GetHashCode();
                if (this.SourceLineNo != null)
                    hashCode = hashCode * 59 + this.SourceLineNo.GetHashCode();
                if (this.ItemNo != null)
                    hashCode = hashCode * 59 + this.ItemNo.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Description2 != null)
                    hashCode = hashCode * 59 + this.Description2.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.UnitOfMeasureCode != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasureCode.GetHashCode();
                if (this.QtyPerBaseUnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.QtyPerBaseUnitOfMeasure.GetHashCode();
                if (this.QuantityBase != null)
                    hashCode = hashCode * 59 + this.QuantityBase.GetHashCode();
                if (this.LocationCode != null)
                    hashCode = hashCode * 59 + this.LocationCode.GetHashCode();
                if (this.BinCode != null)
                    hashCode = hashCode * 59 + this.BinCode.GetHashCode();
                if (this.VariantCode != null)
                    hashCode = hashCode * 59 + this.VariantCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
