/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault11Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault11Value :  IEquatable<InlineResponseDefault11Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault11Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="parentId">parentId.</param>
        /// <param name="tableNo">tableNo.</param>
        /// <param name="sequence">sequence.</param>
        /// <param name="captionName">captionName.</param>
        /// <param name="fieldType">fieldType.</param>
        /// <param name="fieldFormat">fieldFormat.</param>
        /// <param name="fieldLength">fieldLength.</param>
        /// <param name="width">width.</param>
        /// <param name="enabled">enabled.</param>
        public InlineResponseDefault11Value(string odataEtag = default(string), string systemId = default(string), string parentId = default(string), decimal? tableNo = default(decimal?), decimal? sequence = default(decimal?), string captionName = default(string), string fieldType = default(string), string fieldFormat = default(string), decimal? fieldLength = default(decimal?), decimal? width = default(decimal?), bool? enabled = default(bool?))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.ParentId = parentId;
            this.TableNo = tableNo;
            this.Sequence = sequence;
            this.CaptionName = captionName;
            this.FieldType = fieldType;
            this.FieldFormat = fieldFormat;
            this.FieldLength = fieldLength;
            this.Width = width;
            this.Enabled = enabled;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// parentId
        /// </summary>
        /// <value>parentId</value>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public string ParentId { get; set; }

        /// <summary>
        /// tableNo
        /// </summary>
        /// <value>tableNo</value>
        [DataMember(Name="tableNo", EmitDefaultValue=false)]
        public decimal? TableNo { get; set; }

        /// <summary>
        /// sequence
        /// </summary>
        /// <value>sequence</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public decimal? Sequence { get; set; }

        /// <summary>
        /// captionName
        /// </summary>
        /// <value>captionName</value>
        [DataMember(Name="captionName", EmitDefaultValue=false)]
        public string CaptionName { get; set; }

        /// <summary>
        /// fieldType
        /// </summary>
        /// <value>fieldType</value>
        [DataMember(Name="fieldType", EmitDefaultValue=false)]
        public string FieldType { get; set; }

        /// <summary>
        /// fieldFormat
        /// </summary>
        /// <value>fieldFormat</value>
        [DataMember(Name="fieldFormat", EmitDefaultValue=false)]
        public string FieldFormat { get; set; }

        /// <summary>
        /// fieldLength
        /// </summary>
        /// <value>fieldLength</value>
        [DataMember(Name="fieldLength", EmitDefaultValue=false)]
        public decimal? FieldLength { get; set; }

        /// <summary>
        /// width
        /// </summary>
        /// <value>width</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public decimal? Width { get; set; }

        /// <summary>
        /// enabled
        /// </summary>
        /// <value>enabled</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault11Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  TableNo: ").Append(TableNo).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  CaptionName: ").Append(CaptionName).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  FieldFormat: ").Append(FieldFormat).Append("\n");
            sb.Append("  FieldLength: ").Append(FieldLength).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault11Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault11Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault11Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault11Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.TableNo == input.TableNo ||
                    (this.TableNo != null &&
                    this.TableNo.Equals(input.TableNo))
                ) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && 
                (
                    this.CaptionName == input.CaptionName ||
                    (this.CaptionName != null &&
                    this.CaptionName.Equals(input.CaptionName))
                ) && 
                (
                    this.FieldType == input.FieldType ||
                    (this.FieldType != null &&
                    this.FieldType.Equals(input.FieldType))
                ) && 
                (
                    this.FieldFormat == input.FieldFormat ||
                    (this.FieldFormat != null &&
                    this.FieldFormat.Equals(input.FieldFormat))
                ) && 
                (
                    this.FieldLength == input.FieldLength ||
                    (this.FieldLength != null &&
                    this.FieldLength.Equals(input.FieldLength))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                if (this.TableNo != null)
                    hashCode = hashCode * 59 + this.TableNo.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.CaptionName != null)
                    hashCode = hashCode * 59 + this.CaptionName.GetHashCode();
                if (this.FieldType != null)
                    hashCode = hashCode * 59 + this.FieldType.GetHashCode();
                if (this.FieldFormat != null)
                    hashCode = hashCode * 59 + this.FieldFormat.GetHashCode();
                if (this.FieldLength != null)
                    hashCode = hashCode * 59 + this.FieldLength.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
