/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault6Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault6Value :  IEquatable<InlineResponseDefault6Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault6Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="entryNo">entryNo.</param>
        /// <param name="sourceType">sourceType.</param>
        /// <param name="sourceSystemId">sourceSystemId.</param>
        /// <param name="requireContent">requireContent.</param>
        /// <param name="name">name.</param>
        /// <param name="extension">extension.</param>
        /// <param name="attachmentID">attachmentID.</param>
        /// <param name="base64Content">base64Content.</param>
        /// <param name="attachmentUrl">attachmentUrl.</param>
        public InlineResponseDefault6Value(string odataEtag = default(string), decimal? entryNo = default(decimal?), decimal? sourceType = default(decimal?), string sourceSystemId = default(string), bool? requireContent = default(bool?), string name = default(string), string extension = default(string), string attachmentID = default(string), string base64Content = default(string), string attachmentUrl = default(string))
        {
            this.OdataEtag = odataEtag;
            this.EntryNo = entryNo;
            this.SourceType = sourceType;
            this.SourceSystemId = sourceSystemId;
            this.RequireContent = requireContent;
            this.Name = name;
            this.Extension = extension;
            this.AttachmentID = attachmentID;
            this.Base64Content = base64Content;
            this.AttachmentUrl = attachmentUrl;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// entryNo
        /// </summary>
        /// <value>entryNo</value>
        [DataMember(Name="entryNo", EmitDefaultValue=false)]
        public decimal? EntryNo { get; set; }

        /// <summary>
        /// sourceType
        /// </summary>
        /// <value>sourceType</value>
        [DataMember(Name="sourceType", EmitDefaultValue=false)]
        public decimal? SourceType { get; set; }

        /// <summary>
        /// sourceSystemId
        /// </summary>
        /// <value>sourceSystemId</value>
        [DataMember(Name="sourceSystemId", EmitDefaultValue=false)]
        public string SourceSystemId { get; set; }

        /// <summary>
        /// requireContent
        /// </summary>
        /// <value>requireContent</value>
        [DataMember(Name="requireContent", EmitDefaultValue=false)]
        public bool? RequireContent { get; set; }

        /// <summary>
        /// name
        /// </summary>
        /// <value>name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// extension
        /// </summary>
        /// <value>extension</value>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public string Extension { get; set; }

        /// <summary>
        /// attachmentID
        /// </summary>
        /// <value>attachmentID</value>
        [DataMember(Name="attachmentID", EmitDefaultValue=false)]
        public string AttachmentID { get; set; }

        /// <summary>
        /// base64Content
        /// </summary>
        /// <value>base64Content</value>
        [DataMember(Name="base64Content", EmitDefaultValue=false)]
        public string Base64Content { get; set; }

        /// <summary>
        /// attachmentUrl
        /// </summary>
        /// <value>attachmentUrl</value>
        [DataMember(Name="attachmentUrl", EmitDefaultValue=false)]
        public string AttachmentUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault6Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  EntryNo: ").Append(EntryNo).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  SourceSystemId: ").Append(SourceSystemId).Append("\n");
            sb.Append("  RequireContent: ").Append(RequireContent).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  AttachmentID: ").Append(AttachmentID).Append("\n");
            sb.Append("  Base64Content: ").Append(Base64Content).Append("\n");
            sb.Append("  AttachmentUrl: ").Append(AttachmentUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault6Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault6Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault6Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault6Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.EntryNo == input.EntryNo ||
                    (this.EntryNo != null &&
                    this.EntryNo.Equals(input.EntryNo))
                ) && 
                (
                    this.SourceType == input.SourceType ||
                    (this.SourceType != null &&
                    this.SourceType.Equals(input.SourceType))
                ) && 
                (
                    this.SourceSystemId == input.SourceSystemId ||
                    (this.SourceSystemId != null &&
                    this.SourceSystemId.Equals(input.SourceSystemId))
                ) && 
                (
                    this.RequireContent == input.RequireContent ||
                    (this.RequireContent != null &&
                    this.RequireContent.Equals(input.RequireContent))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.AttachmentID == input.AttachmentID ||
                    (this.AttachmentID != null &&
                    this.AttachmentID.Equals(input.AttachmentID))
                ) && 
                (
                    this.Base64Content == input.Base64Content ||
                    (this.Base64Content != null &&
                    this.Base64Content.Equals(input.Base64Content))
                ) && 
                (
                    this.AttachmentUrl == input.AttachmentUrl ||
                    (this.AttachmentUrl != null &&
                    this.AttachmentUrl.Equals(input.AttachmentUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.EntryNo != null)
                    hashCode = hashCode * 59 + this.EntryNo.GetHashCode();
                if (this.SourceType != null)
                    hashCode = hashCode * 59 + this.SourceType.GetHashCode();
                if (this.SourceSystemId != null)
                    hashCode = hashCode * 59 + this.SourceSystemId.GetHashCode();
                if (this.RequireContent != null)
                    hashCode = hashCode * 59 + this.RequireContent.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                if (this.AttachmentID != null)
                    hashCode = hashCode * 59 + this.AttachmentID.GetHashCode();
                if (this.Base64Content != null)
                    hashCode = hashCode * 59 + this.Base64Content.GetHashCode();
                if (this.AttachmentUrl != null)
                    hashCode = hashCode * 59 + this.AttachmentUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
