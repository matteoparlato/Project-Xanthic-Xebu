/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// AZGetDeviceTwinBody
    /// </summary>
    [DataContract]
        public partial class AZGetDeviceTwinBody :  IEquatable<AZGetDeviceTwinBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AZGetDeviceTwinBody" /> class.
        /// </summary>
        /// <param name="hubHostname">hubHostname.</param>
        /// <param name="deviceId">deviceId.</param>
        /// <param name="apiVersion">apiVersion.</param>
        /// <param name="sasToken">sasToken.</param>
        public AZGetDeviceTwinBody(string hubHostname = default(string), string deviceId = default(string), string apiVersion = default(string), string sasToken = default(string))
        {
            this.HubHostname = hubHostname;
            this.DeviceId = deviceId;
            this.ApiVersion = apiVersion;
            this.SasToken = sasToken;
        }
        
        /// <summary>
        /// hubHostname
        /// </summary>
        /// <value>hubHostname</value>
        [DataMember(Name="hubHostname", EmitDefaultValue=false)]
        public string HubHostname { get; set; }

        /// <summary>
        /// deviceId
        /// </summary>
        /// <value>deviceId</value>
        [DataMember(Name="deviceId", EmitDefaultValue=false)]
        public string DeviceId { get; set; }

        /// <summary>
        /// apiVersion
        /// </summary>
        /// <value>apiVersion</value>
        [DataMember(Name="apiVersion", EmitDefaultValue=false)]
        public string ApiVersion { get; set; }

        /// <summary>
        /// sasToken
        /// </summary>
        /// <value>sasToken</value>
        [DataMember(Name="sasToken", EmitDefaultValue=false)]
        public string SasToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AZGetDeviceTwinBody {\n");
            sb.Append("  HubHostname: ").Append(HubHostname).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  SasToken: ").Append(SasToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AZGetDeviceTwinBody);
        }

        /// <summary>
        /// Returns true if AZGetDeviceTwinBody instances are equal
        /// </summary>
        /// <param name="input">Instance of AZGetDeviceTwinBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AZGetDeviceTwinBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HubHostname == input.HubHostname ||
                    (this.HubHostname != null &&
                    this.HubHostname.Equals(input.HubHostname))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.ApiVersion == input.ApiVersion ||
                    (this.ApiVersion != null &&
                    this.ApiVersion.Equals(input.ApiVersion))
                ) && 
                (
                    this.SasToken == input.SasToken ||
                    (this.SasToken != null &&
                    this.SasToken.Equals(input.SasToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HubHostname != null)
                    hashCode = hashCode * 59 + this.HubHostname.GetHashCode();
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                if (this.ApiVersion != null)
                    hashCode = hashCode * 59 + this.ApiVersion.GetHashCode();
                if (this.SasToken != null)
                    hashCode = hashCode * 59 + this.SasToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
