/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault40Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault40Value :  IEquatable<InlineResponseDefault40Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault40Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="no">no.</param>
        /// <param name="inspectionOrderType">inspectionOrderType.</param>
        /// <param name="inspectionOrderTypeAsInt">inspectionOrderTypeAsInt.</param>
        /// <param name="inspectionOrderTypeName">inspectionOrderTypeName.</param>
        /// <param name="inspectionType">inspectionType.</param>
        /// <param name="inspectionTypeAsInt">inspectionTypeAsInt.</param>
        /// <param name="inspectionTypeName">inspectionTypeName.</param>
        /// <param name="description">description.</param>
        /// <param name="itemNo">itemNo.</param>
        /// <param name="inspectionPlanNo">inspectionPlanNo.</param>
        /// <param name="lotNo">lotNo.</param>
        /// <param name="serialNo">serialNo.</param>
        /// <param name="maxNonComplianceQty">maxNonComplianceQty.</param>
        /// <param name="inspectionResultCode">inspectionResultCode.</param>
        /// <param name="inspectionResult">inspectionResult.</param>
        /// <param name="inspectionResultAsInt">inspectionResultAsInt.</param>
        /// <param name="inspectionResultName">inspectionResultName.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="sampleSize">sampleSize.</param>
        /// <param name="complianceQty">complianceQty.</param>
        /// <param name="sampleComplianceQty">sampleComplianceQty.</param>
        /// <param name="blockedQty">blockedQty.</param>
        /// <param name="sampleBlockedQty">sampleBlockedQty.</param>
        /// <param name="refDocumentNo">refDocumentNo.</param>
        /// <param name="refType">refType.</param>
        /// <param name="refLineNo">refLineNo.</param>
        /// <param name="refProdOrderLine">refProdOrderLine.</param>
        /// <param name="refSubtype">refSubtype.</param>
        /// <param name="routingNo">routingNo.</param>
        /// <param name="routingReferenceNo">routingReferenceNo.</param>
        /// <param name="operationNo">operationNo.</param>
        /// <param name="panelId">panelId.</param>
        public InlineResponseDefault40Value(string odataEtag = default(string), string systemId = default(string), string no = default(string), string inspectionOrderType = default(string), decimal? inspectionOrderTypeAsInt = default(decimal?), string inspectionOrderTypeName = default(string), string inspectionType = default(string), decimal? inspectionTypeAsInt = default(decimal?), string inspectionTypeName = default(string), string description = default(string), string itemNo = default(string), string inspectionPlanNo = default(string), string lotNo = default(string), string serialNo = default(string), decimal? maxNonComplianceQty = default(decimal?), string inspectionResultCode = default(string), string inspectionResult = default(string), decimal? inspectionResultAsInt = default(decimal?), string inspectionResultName = default(string), decimal? quantity = default(decimal?), float? sampleSize = default(float?), decimal? complianceQty = default(decimal?), decimal? sampleComplianceQty = default(decimal?), decimal? blockedQty = default(decimal?), decimal? sampleBlockedQty = default(decimal?), string refDocumentNo = default(string), decimal? refType = default(decimal?), decimal? refLineNo = default(decimal?), decimal? refProdOrderLine = default(decimal?), string refSubtype = default(string), string routingNo = default(string), decimal? routingReferenceNo = default(decimal?), string operationNo = default(string), string panelId = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.No = no;
            this.InspectionOrderType = inspectionOrderType;
            this.InspectionOrderTypeAsInt = inspectionOrderTypeAsInt;
            this.InspectionOrderTypeName = inspectionOrderTypeName;
            this.InspectionType = inspectionType;
            this.InspectionTypeAsInt = inspectionTypeAsInt;
            this.InspectionTypeName = inspectionTypeName;
            this.Description = description;
            this.ItemNo = itemNo;
            this.InspectionPlanNo = inspectionPlanNo;
            this.LotNo = lotNo;
            this.SerialNo = serialNo;
            this.MaxNonComplianceQty = maxNonComplianceQty;
            this.InspectionResultCode = inspectionResultCode;
            this.InspectionResult = inspectionResult;
            this.InspectionResultAsInt = inspectionResultAsInt;
            this.InspectionResultName = inspectionResultName;
            this.Quantity = quantity;
            this.SampleSize = sampleSize;
            this.ComplianceQty = complianceQty;
            this.SampleComplianceQty = sampleComplianceQty;
            this.BlockedQty = blockedQty;
            this.SampleBlockedQty = sampleBlockedQty;
            this.RefDocumentNo = refDocumentNo;
            this.RefType = refType;
            this.RefLineNo = refLineNo;
            this.RefProdOrderLine = refProdOrderLine;
            this.RefSubtype = refSubtype;
            this.RoutingNo = routingNo;
            this.RoutingReferenceNo = routingReferenceNo;
            this.OperationNo = operationNo;
            this.PanelId = panelId;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// no
        /// </summary>
        /// <value>no</value>
        [DataMember(Name="no", EmitDefaultValue=false)]
        public string No { get; set; }

        /// <summary>
        /// inspectionOrderType
        /// </summary>
        /// <value>inspectionOrderType</value>
        [DataMember(Name="inspectionOrderType", EmitDefaultValue=false)]
        public string InspectionOrderType { get; set; }

        /// <summary>
        /// inspectionOrderTypeAsInt
        /// </summary>
        /// <value>inspectionOrderTypeAsInt</value>
        [DataMember(Name="inspectionOrderTypeAsInt", EmitDefaultValue=false)]
        public decimal? InspectionOrderTypeAsInt { get; set; }

        /// <summary>
        /// inspectionOrderTypeName
        /// </summary>
        /// <value>inspectionOrderTypeName</value>
        [DataMember(Name="inspectionOrderTypeName", EmitDefaultValue=false)]
        public string InspectionOrderTypeName { get; set; }

        /// <summary>
        /// inspectionType
        /// </summary>
        /// <value>inspectionType</value>
        [DataMember(Name="inspectionType", EmitDefaultValue=false)]
        public string InspectionType { get; set; }

        /// <summary>
        /// inspectionTypeAsInt
        /// </summary>
        /// <value>inspectionTypeAsInt</value>
        [DataMember(Name="inspectionTypeAsInt", EmitDefaultValue=false)]
        public decimal? InspectionTypeAsInt { get; set; }

        /// <summary>
        /// inspectionTypeName
        /// </summary>
        /// <value>inspectionTypeName</value>
        [DataMember(Name="inspectionTypeName", EmitDefaultValue=false)]
        public string InspectionTypeName { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// itemNo
        /// </summary>
        /// <value>itemNo</value>
        [DataMember(Name="itemNo", EmitDefaultValue=false)]
        public string ItemNo { get; set; }

        /// <summary>
        /// inspectionPlanNo
        /// </summary>
        /// <value>inspectionPlanNo</value>
        [DataMember(Name="inspectionPlanNo", EmitDefaultValue=false)]
        public string InspectionPlanNo { get; set; }

        /// <summary>
        /// lotNo
        /// </summary>
        /// <value>lotNo</value>
        [DataMember(Name="lotNo", EmitDefaultValue=false)]
        public string LotNo { get; set; }

        /// <summary>
        /// serialNo
        /// </summary>
        /// <value>serialNo</value>
        [DataMember(Name="serialNo", EmitDefaultValue=false)]
        public string SerialNo { get; set; }

        /// <summary>
        /// maxNonComplianceQty
        /// </summary>
        /// <value>maxNonComplianceQty</value>
        [DataMember(Name="maxNonComplianceQty", EmitDefaultValue=false)]
        public decimal? MaxNonComplianceQty { get; set; }

        /// <summary>
        /// inspectionResultCode
        /// </summary>
        /// <value>inspectionResultCode</value>
        [DataMember(Name="inspectionResultCode", EmitDefaultValue=false)]
        public string InspectionResultCode { get; set; }

        /// <summary>
        /// inspectionResult
        /// </summary>
        /// <value>inspectionResult</value>
        [DataMember(Name="inspectionResult", EmitDefaultValue=false)]
        public string InspectionResult { get; set; }

        /// <summary>
        /// inspectionResultAsInt
        /// </summary>
        /// <value>inspectionResultAsInt</value>
        [DataMember(Name="inspectionResultAsInt", EmitDefaultValue=false)]
        public decimal? InspectionResultAsInt { get; set; }

        /// <summary>
        /// inspectionResultName
        /// </summary>
        /// <value>inspectionResultName</value>
        [DataMember(Name="inspectionResultName", EmitDefaultValue=false)]
        public string InspectionResultName { get; set; }

        /// <summary>
        /// quantity
        /// </summary>
        /// <value>quantity</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// sampleSize
        /// </summary>
        /// <value>sampleSize</value>
        [DataMember(Name="sampleSize", EmitDefaultValue=false)]
        public float? SampleSize { get; set; }

        /// <summary>
        /// complianceQty
        /// </summary>
        /// <value>complianceQty</value>
        [DataMember(Name="complianceQty", EmitDefaultValue=false)]
        public decimal? ComplianceQty { get; set; }

        /// <summary>
        /// sampleComplianceQty
        /// </summary>
        /// <value>sampleComplianceQty</value>
        [DataMember(Name="sampleComplianceQty", EmitDefaultValue=false)]
        public decimal? SampleComplianceQty { get; set; }

        /// <summary>
        /// blockedQty
        /// </summary>
        /// <value>blockedQty</value>
        [DataMember(Name="blockedQty", EmitDefaultValue=false)]
        public decimal? BlockedQty { get; set; }

        /// <summary>
        /// sampleBlockedQty
        /// </summary>
        /// <value>sampleBlockedQty</value>
        [DataMember(Name="sampleBlockedQty", EmitDefaultValue=false)]
        public decimal? SampleBlockedQty { get; set; }

        /// <summary>
        /// refDocumentNo
        /// </summary>
        /// <value>refDocumentNo</value>
        [DataMember(Name="refDocumentNo", EmitDefaultValue=false)]
        public string RefDocumentNo { get; set; }

        /// <summary>
        /// refType
        /// </summary>
        /// <value>refType</value>
        [DataMember(Name="refType", EmitDefaultValue=false)]
        public decimal? RefType { get; set; }

        /// <summary>
        /// refLineNo
        /// </summary>
        /// <value>refLineNo</value>
        [DataMember(Name="refLineNo", EmitDefaultValue=false)]
        public decimal? RefLineNo { get; set; }

        /// <summary>
        /// refProdOrderLine
        /// </summary>
        /// <value>refProdOrderLine</value>
        [DataMember(Name="refProdOrderLine", EmitDefaultValue=false)]
        public decimal? RefProdOrderLine { get; set; }

        /// <summary>
        /// refSubtype
        /// </summary>
        /// <value>refSubtype</value>
        [DataMember(Name="refSubtype", EmitDefaultValue=false)]
        public string RefSubtype { get; set; }

        /// <summary>
        /// routingNo
        /// </summary>
        /// <value>routingNo</value>
        [DataMember(Name="routingNo", EmitDefaultValue=false)]
        public string RoutingNo { get; set; }

        /// <summary>
        /// routingReferenceNo
        /// </summary>
        /// <value>routingReferenceNo</value>
        [DataMember(Name="routingReferenceNo", EmitDefaultValue=false)]
        public decimal? RoutingReferenceNo { get; set; }

        /// <summary>
        /// operationNo
        /// </summary>
        /// <value>operationNo</value>
        [DataMember(Name="operationNo", EmitDefaultValue=false)]
        public string OperationNo { get; set; }

        /// <summary>
        /// panelId
        /// </summary>
        /// <value>panelId</value>
        [DataMember(Name="panelId", EmitDefaultValue=false)]
        public string PanelId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault40Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  No: ").Append(No).Append("\n");
            sb.Append("  InspectionOrderType: ").Append(InspectionOrderType).Append("\n");
            sb.Append("  InspectionOrderTypeAsInt: ").Append(InspectionOrderTypeAsInt).Append("\n");
            sb.Append("  InspectionOrderTypeName: ").Append(InspectionOrderTypeName).Append("\n");
            sb.Append("  InspectionType: ").Append(InspectionType).Append("\n");
            sb.Append("  InspectionTypeAsInt: ").Append(InspectionTypeAsInt).Append("\n");
            sb.Append("  InspectionTypeName: ").Append(InspectionTypeName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ItemNo: ").Append(ItemNo).Append("\n");
            sb.Append("  InspectionPlanNo: ").Append(InspectionPlanNo).Append("\n");
            sb.Append("  LotNo: ").Append(LotNo).Append("\n");
            sb.Append("  SerialNo: ").Append(SerialNo).Append("\n");
            sb.Append("  MaxNonComplianceQty: ").Append(MaxNonComplianceQty).Append("\n");
            sb.Append("  InspectionResultCode: ").Append(InspectionResultCode).Append("\n");
            sb.Append("  InspectionResult: ").Append(InspectionResult).Append("\n");
            sb.Append("  InspectionResultAsInt: ").Append(InspectionResultAsInt).Append("\n");
            sb.Append("  InspectionResultName: ").Append(InspectionResultName).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SampleSize: ").Append(SampleSize).Append("\n");
            sb.Append("  ComplianceQty: ").Append(ComplianceQty).Append("\n");
            sb.Append("  SampleComplianceQty: ").Append(SampleComplianceQty).Append("\n");
            sb.Append("  BlockedQty: ").Append(BlockedQty).Append("\n");
            sb.Append("  SampleBlockedQty: ").Append(SampleBlockedQty).Append("\n");
            sb.Append("  RefDocumentNo: ").Append(RefDocumentNo).Append("\n");
            sb.Append("  RefType: ").Append(RefType).Append("\n");
            sb.Append("  RefLineNo: ").Append(RefLineNo).Append("\n");
            sb.Append("  RefProdOrderLine: ").Append(RefProdOrderLine).Append("\n");
            sb.Append("  RefSubtype: ").Append(RefSubtype).Append("\n");
            sb.Append("  RoutingNo: ").Append(RoutingNo).Append("\n");
            sb.Append("  RoutingReferenceNo: ").Append(RoutingReferenceNo).Append("\n");
            sb.Append("  OperationNo: ").Append(OperationNo).Append("\n");
            sb.Append("  PanelId: ").Append(PanelId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault40Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault40Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault40Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault40Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.No == input.No ||
                    (this.No != null &&
                    this.No.Equals(input.No))
                ) && 
                (
                    this.InspectionOrderType == input.InspectionOrderType ||
                    (this.InspectionOrderType != null &&
                    this.InspectionOrderType.Equals(input.InspectionOrderType))
                ) && 
                (
                    this.InspectionOrderTypeAsInt == input.InspectionOrderTypeAsInt ||
                    (this.InspectionOrderTypeAsInt != null &&
                    this.InspectionOrderTypeAsInt.Equals(input.InspectionOrderTypeAsInt))
                ) && 
                (
                    this.InspectionOrderTypeName == input.InspectionOrderTypeName ||
                    (this.InspectionOrderTypeName != null &&
                    this.InspectionOrderTypeName.Equals(input.InspectionOrderTypeName))
                ) && 
                (
                    this.InspectionType == input.InspectionType ||
                    (this.InspectionType != null &&
                    this.InspectionType.Equals(input.InspectionType))
                ) && 
                (
                    this.InspectionTypeAsInt == input.InspectionTypeAsInt ||
                    (this.InspectionTypeAsInt != null &&
                    this.InspectionTypeAsInt.Equals(input.InspectionTypeAsInt))
                ) && 
                (
                    this.InspectionTypeName == input.InspectionTypeName ||
                    (this.InspectionTypeName != null &&
                    this.InspectionTypeName.Equals(input.InspectionTypeName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ItemNo == input.ItemNo ||
                    (this.ItemNo != null &&
                    this.ItemNo.Equals(input.ItemNo))
                ) && 
                (
                    this.InspectionPlanNo == input.InspectionPlanNo ||
                    (this.InspectionPlanNo != null &&
                    this.InspectionPlanNo.Equals(input.InspectionPlanNo))
                ) && 
                (
                    this.LotNo == input.LotNo ||
                    (this.LotNo != null &&
                    this.LotNo.Equals(input.LotNo))
                ) && 
                (
                    this.SerialNo == input.SerialNo ||
                    (this.SerialNo != null &&
                    this.SerialNo.Equals(input.SerialNo))
                ) && 
                (
                    this.MaxNonComplianceQty == input.MaxNonComplianceQty ||
                    (this.MaxNonComplianceQty != null &&
                    this.MaxNonComplianceQty.Equals(input.MaxNonComplianceQty))
                ) && 
                (
                    this.InspectionResultCode == input.InspectionResultCode ||
                    (this.InspectionResultCode != null &&
                    this.InspectionResultCode.Equals(input.InspectionResultCode))
                ) && 
                (
                    this.InspectionResult == input.InspectionResult ||
                    (this.InspectionResult != null &&
                    this.InspectionResult.Equals(input.InspectionResult))
                ) && 
                (
                    this.InspectionResultAsInt == input.InspectionResultAsInt ||
                    (this.InspectionResultAsInt != null &&
                    this.InspectionResultAsInt.Equals(input.InspectionResultAsInt))
                ) && 
                (
                    this.InspectionResultName == input.InspectionResultName ||
                    (this.InspectionResultName != null &&
                    this.InspectionResultName.Equals(input.InspectionResultName))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.SampleSize == input.SampleSize ||
                    (this.SampleSize != null &&
                    this.SampleSize.Equals(input.SampleSize))
                ) && 
                (
                    this.ComplianceQty == input.ComplianceQty ||
                    (this.ComplianceQty != null &&
                    this.ComplianceQty.Equals(input.ComplianceQty))
                ) && 
                (
                    this.SampleComplianceQty == input.SampleComplianceQty ||
                    (this.SampleComplianceQty != null &&
                    this.SampleComplianceQty.Equals(input.SampleComplianceQty))
                ) && 
                (
                    this.BlockedQty == input.BlockedQty ||
                    (this.BlockedQty != null &&
                    this.BlockedQty.Equals(input.BlockedQty))
                ) && 
                (
                    this.SampleBlockedQty == input.SampleBlockedQty ||
                    (this.SampleBlockedQty != null &&
                    this.SampleBlockedQty.Equals(input.SampleBlockedQty))
                ) && 
                (
                    this.RefDocumentNo == input.RefDocumentNo ||
                    (this.RefDocumentNo != null &&
                    this.RefDocumentNo.Equals(input.RefDocumentNo))
                ) && 
                (
                    this.RefType == input.RefType ||
                    (this.RefType != null &&
                    this.RefType.Equals(input.RefType))
                ) && 
                (
                    this.RefLineNo == input.RefLineNo ||
                    (this.RefLineNo != null &&
                    this.RefLineNo.Equals(input.RefLineNo))
                ) && 
                (
                    this.RefProdOrderLine == input.RefProdOrderLine ||
                    (this.RefProdOrderLine != null &&
                    this.RefProdOrderLine.Equals(input.RefProdOrderLine))
                ) && 
                (
                    this.RefSubtype == input.RefSubtype ||
                    (this.RefSubtype != null &&
                    this.RefSubtype.Equals(input.RefSubtype))
                ) && 
                (
                    this.RoutingNo == input.RoutingNo ||
                    (this.RoutingNo != null &&
                    this.RoutingNo.Equals(input.RoutingNo))
                ) && 
                (
                    this.RoutingReferenceNo == input.RoutingReferenceNo ||
                    (this.RoutingReferenceNo != null &&
                    this.RoutingReferenceNo.Equals(input.RoutingReferenceNo))
                ) && 
                (
                    this.OperationNo == input.OperationNo ||
                    (this.OperationNo != null &&
                    this.OperationNo.Equals(input.OperationNo))
                ) && 
                (
                    this.PanelId == input.PanelId ||
                    (this.PanelId != null &&
                    this.PanelId.Equals(input.PanelId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.No != null)
                    hashCode = hashCode * 59 + this.No.GetHashCode();
                if (this.InspectionOrderType != null)
                    hashCode = hashCode * 59 + this.InspectionOrderType.GetHashCode();
                if (this.InspectionOrderTypeAsInt != null)
                    hashCode = hashCode * 59 + this.InspectionOrderTypeAsInt.GetHashCode();
                if (this.InspectionOrderTypeName != null)
                    hashCode = hashCode * 59 + this.InspectionOrderTypeName.GetHashCode();
                if (this.InspectionType != null)
                    hashCode = hashCode * 59 + this.InspectionType.GetHashCode();
                if (this.InspectionTypeAsInt != null)
                    hashCode = hashCode * 59 + this.InspectionTypeAsInt.GetHashCode();
                if (this.InspectionTypeName != null)
                    hashCode = hashCode * 59 + this.InspectionTypeName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ItemNo != null)
                    hashCode = hashCode * 59 + this.ItemNo.GetHashCode();
                if (this.InspectionPlanNo != null)
                    hashCode = hashCode * 59 + this.InspectionPlanNo.GetHashCode();
                if (this.LotNo != null)
                    hashCode = hashCode * 59 + this.LotNo.GetHashCode();
                if (this.SerialNo != null)
                    hashCode = hashCode * 59 + this.SerialNo.GetHashCode();
                if (this.MaxNonComplianceQty != null)
                    hashCode = hashCode * 59 + this.MaxNonComplianceQty.GetHashCode();
                if (this.InspectionResultCode != null)
                    hashCode = hashCode * 59 + this.InspectionResultCode.GetHashCode();
                if (this.InspectionResult != null)
                    hashCode = hashCode * 59 + this.InspectionResult.GetHashCode();
                if (this.InspectionResultAsInt != null)
                    hashCode = hashCode * 59 + this.InspectionResultAsInt.GetHashCode();
                if (this.InspectionResultName != null)
                    hashCode = hashCode * 59 + this.InspectionResultName.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.SampleSize != null)
                    hashCode = hashCode * 59 + this.SampleSize.GetHashCode();
                if (this.ComplianceQty != null)
                    hashCode = hashCode * 59 + this.ComplianceQty.GetHashCode();
                if (this.SampleComplianceQty != null)
                    hashCode = hashCode * 59 + this.SampleComplianceQty.GetHashCode();
                if (this.BlockedQty != null)
                    hashCode = hashCode * 59 + this.BlockedQty.GetHashCode();
                if (this.SampleBlockedQty != null)
                    hashCode = hashCode * 59 + this.SampleBlockedQty.GetHashCode();
                if (this.RefDocumentNo != null)
                    hashCode = hashCode * 59 + this.RefDocumentNo.GetHashCode();
                if (this.RefType != null)
                    hashCode = hashCode * 59 + this.RefType.GetHashCode();
                if (this.RefLineNo != null)
                    hashCode = hashCode * 59 + this.RefLineNo.GetHashCode();
                if (this.RefProdOrderLine != null)
                    hashCode = hashCode * 59 + this.RefProdOrderLine.GetHashCode();
                if (this.RefSubtype != null)
                    hashCode = hashCode * 59 + this.RefSubtype.GetHashCode();
                if (this.RoutingNo != null)
                    hashCode = hashCode * 59 + this.RoutingNo.GetHashCode();
                if (this.RoutingReferenceNo != null)
                    hashCode = hashCode * 59 + this.RoutingReferenceNo.GetHashCode();
                if (this.OperationNo != null)
                    hashCode = hashCode * 59 + this.OperationNo.GetHashCode();
                if (this.PanelId != null)
                    hashCode = hashCode * 59 + this.PanelId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
