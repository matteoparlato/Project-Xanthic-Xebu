/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault39Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault39Value :  IEquatable<InlineResponseDefault39Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault39Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="inspectionOrderNo">inspectionOrderNo.</param>
        /// <param name="inspectionOrderType">inspectionOrderType.</param>
        /// <param name="lineNo">lineNo.</param>
        /// <param name="position">position.</param>
        /// <param name="parameterNo">parameterNo.</param>
        /// <param name="description">description.</param>
        /// <param name="inspectionDeviceNo">inspectionDeviceNo.</param>
        /// <param name="unitofMeasureCode">unitofMeasureCode.</param>
        /// <param name="expectedValue">expectedValue.</param>
        /// <param name="minimalValue">minimalValue.</param>
        /// <param name="maximalValue">maximalValue.</param>
        /// <param name="lastActualValue">lastActualValue.</param>
        /// <param name="noOfResults">noOfResults.</param>
        /// <param name="noOfFailures">noOfFailures.</param>
        /// <param name="actualMinValue">actualMinValue.</param>
        /// <param name="actualMaxValue">actualMaxValue.</param>
        /// <param name="actualAvgValue">actualAvgValue.</param>
        /// <param name="parameterType">parameterType.</param>
        /// <param name="parameterTypeName">parameterTypeName.</param>
        /// <param name="parameterTypeAsInt">parameterTypeAsInt.</param>
        /// <param name="lastAttributeFulfilled">lastAttributeFulfilled.</param>
        /// <param name="lastAttributeFulfilledName">lastAttributeFulfilledName.</param>
        /// <param name="lastAttributeFulfilledAsInt">lastAttributeFulfilledAsInt.</param>
        /// <param name="lastParamAttributeCode">lastParamAttributeCode.</param>
        /// <param name="panelId">panelId.</param>
        public InlineResponseDefault39Value(string odataEtag = default(string), string systemId = default(string), string inspectionOrderNo = default(string), string inspectionOrderType = default(string), decimal? lineNo = default(decimal?), string position = default(string), string parameterNo = default(string), string description = default(string), string inspectionDeviceNo = default(string), string unitofMeasureCode = default(string), decimal? expectedValue = default(decimal?), decimal? minimalValue = default(decimal?), decimal? maximalValue = default(decimal?), decimal? lastActualValue = default(decimal?), decimal? noOfResults = default(decimal?), decimal? noOfFailures = default(decimal?), decimal? actualMinValue = default(decimal?), decimal? actualMaxValue = default(decimal?), decimal? actualAvgValue = default(decimal?), string parameterType = default(string), string parameterTypeName = default(string), decimal? parameterTypeAsInt = default(decimal?), string lastAttributeFulfilled = default(string), string lastAttributeFulfilledName = default(string), decimal? lastAttributeFulfilledAsInt = default(decimal?), string lastParamAttributeCode = default(string), string panelId = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.InspectionOrderNo = inspectionOrderNo;
            this.InspectionOrderType = inspectionOrderType;
            this.LineNo = lineNo;
            this.Position = position;
            this.ParameterNo = parameterNo;
            this.Description = description;
            this.InspectionDeviceNo = inspectionDeviceNo;
            this.UnitofMeasureCode = unitofMeasureCode;
            this.ExpectedValue = expectedValue;
            this.MinimalValue = minimalValue;
            this.MaximalValue = maximalValue;
            this.LastActualValue = lastActualValue;
            this.NoOfResults = noOfResults;
            this.NoOfFailures = noOfFailures;
            this.ActualMinValue = actualMinValue;
            this.ActualMaxValue = actualMaxValue;
            this.ActualAvgValue = actualAvgValue;
            this.ParameterType = parameterType;
            this.ParameterTypeName = parameterTypeName;
            this.ParameterTypeAsInt = parameterTypeAsInt;
            this.LastAttributeFulfilled = lastAttributeFulfilled;
            this.LastAttributeFulfilledName = lastAttributeFulfilledName;
            this.LastAttributeFulfilledAsInt = lastAttributeFulfilledAsInt;
            this.LastParamAttributeCode = lastParamAttributeCode;
            this.PanelId = panelId;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// inspectionOrderNo
        /// </summary>
        /// <value>inspectionOrderNo</value>
        [DataMember(Name="inspectionOrderNo", EmitDefaultValue=false)]
        public string InspectionOrderNo { get; set; }

        /// <summary>
        /// inspectionOrderType
        /// </summary>
        /// <value>inspectionOrderType</value>
        [DataMember(Name="inspectionOrderType", EmitDefaultValue=false)]
        public string InspectionOrderType { get; set; }

        /// <summary>
        /// lineNo
        /// </summary>
        /// <value>lineNo</value>
        [DataMember(Name="lineNo", EmitDefaultValue=false)]
        public decimal? LineNo { get; set; }

        /// <summary>
        /// position
        /// </summary>
        /// <value>position</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public string Position { get; set; }

        /// <summary>
        /// parameterNo
        /// </summary>
        /// <value>parameterNo</value>
        [DataMember(Name="parameterNo", EmitDefaultValue=false)]
        public string ParameterNo { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// inspectionDeviceNo
        /// </summary>
        /// <value>inspectionDeviceNo</value>
        [DataMember(Name="inspectionDeviceNo", EmitDefaultValue=false)]
        public string InspectionDeviceNo { get; set; }

        /// <summary>
        /// unitofMeasureCode
        /// </summary>
        /// <value>unitofMeasureCode</value>
        [DataMember(Name="unitofMeasureCode", EmitDefaultValue=false)]
        public string UnitofMeasureCode { get; set; }

        /// <summary>
        /// expectedValue
        /// </summary>
        /// <value>expectedValue</value>
        [DataMember(Name="expectedValue", EmitDefaultValue=false)]
        public decimal? ExpectedValue { get; set; }

        /// <summary>
        /// minimalValue
        /// </summary>
        /// <value>minimalValue</value>
        [DataMember(Name="minimalValue", EmitDefaultValue=false)]
        public decimal? MinimalValue { get; set; }

        /// <summary>
        /// maximalValue
        /// </summary>
        /// <value>maximalValue</value>
        [DataMember(Name="maximalValue", EmitDefaultValue=false)]
        public decimal? MaximalValue { get; set; }

        /// <summary>
        /// lastActualValue
        /// </summary>
        /// <value>lastActualValue</value>
        [DataMember(Name="lastActualValue", EmitDefaultValue=false)]
        public decimal? LastActualValue { get; set; }

        /// <summary>
        /// noOfResults
        /// </summary>
        /// <value>noOfResults</value>
        [DataMember(Name="noOfResults", EmitDefaultValue=false)]
        public decimal? NoOfResults { get; set; }

        /// <summary>
        /// noOfFailures
        /// </summary>
        /// <value>noOfFailures</value>
        [DataMember(Name="noOfFailures", EmitDefaultValue=false)]
        public decimal? NoOfFailures { get; set; }

        /// <summary>
        /// actualMinValue
        /// </summary>
        /// <value>actualMinValue</value>
        [DataMember(Name="actualMinValue", EmitDefaultValue=false)]
        public decimal? ActualMinValue { get; set; }

        /// <summary>
        /// actualMaxValue
        /// </summary>
        /// <value>actualMaxValue</value>
        [DataMember(Name="actualMaxValue", EmitDefaultValue=false)]
        public decimal? ActualMaxValue { get; set; }

        /// <summary>
        /// actualAvgValue
        /// </summary>
        /// <value>actualAvgValue</value>
        [DataMember(Name="actualAvgValue", EmitDefaultValue=false)]
        public decimal? ActualAvgValue { get; set; }

        /// <summary>
        /// parameterType
        /// </summary>
        /// <value>parameterType</value>
        [DataMember(Name="parameterType", EmitDefaultValue=false)]
        public string ParameterType { get; set; }

        /// <summary>
        /// parameterTypeName
        /// </summary>
        /// <value>parameterTypeName</value>
        [DataMember(Name="parameterTypeName", EmitDefaultValue=false)]
        public string ParameterTypeName { get; set; }

        /// <summary>
        /// parameterTypeAsInt
        /// </summary>
        /// <value>parameterTypeAsInt</value>
        [DataMember(Name="parameterTypeAsInt", EmitDefaultValue=false)]
        public decimal? ParameterTypeAsInt { get; set; }

        /// <summary>
        /// lastAttributeFulfilled
        /// </summary>
        /// <value>lastAttributeFulfilled</value>
        [DataMember(Name="lastAttributeFulfilled", EmitDefaultValue=false)]
        public string LastAttributeFulfilled { get; set; }

        /// <summary>
        /// lastAttributeFulfilledName
        /// </summary>
        /// <value>lastAttributeFulfilledName</value>
        [DataMember(Name="lastAttributeFulfilledName", EmitDefaultValue=false)]
        public string LastAttributeFulfilledName { get; set; }

        /// <summary>
        /// lastAttributeFulfilledAsInt
        /// </summary>
        /// <value>lastAttributeFulfilledAsInt</value>
        [DataMember(Name="lastAttributeFulfilledAsInt", EmitDefaultValue=false)]
        public decimal? LastAttributeFulfilledAsInt { get; set; }

        /// <summary>
        /// lastParamAttributeCode
        /// </summary>
        /// <value>lastParamAttributeCode</value>
        [DataMember(Name="lastParamAttributeCode", EmitDefaultValue=false)]
        public string LastParamAttributeCode { get; set; }

        /// <summary>
        /// panelId
        /// </summary>
        /// <value>panelId</value>
        [DataMember(Name="panelId", EmitDefaultValue=false)]
        public string PanelId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault39Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  InspectionOrderNo: ").Append(InspectionOrderNo).Append("\n");
            sb.Append("  InspectionOrderType: ").Append(InspectionOrderType).Append("\n");
            sb.Append("  LineNo: ").Append(LineNo).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  ParameterNo: ").Append(ParameterNo).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  InspectionDeviceNo: ").Append(InspectionDeviceNo).Append("\n");
            sb.Append("  UnitofMeasureCode: ").Append(UnitofMeasureCode).Append("\n");
            sb.Append("  ExpectedValue: ").Append(ExpectedValue).Append("\n");
            sb.Append("  MinimalValue: ").Append(MinimalValue).Append("\n");
            sb.Append("  MaximalValue: ").Append(MaximalValue).Append("\n");
            sb.Append("  LastActualValue: ").Append(LastActualValue).Append("\n");
            sb.Append("  NoOfResults: ").Append(NoOfResults).Append("\n");
            sb.Append("  NoOfFailures: ").Append(NoOfFailures).Append("\n");
            sb.Append("  ActualMinValue: ").Append(ActualMinValue).Append("\n");
            sb.Append("  ActualMaxValue: ").Append(ActualMaxValue).Append("\n");
            sb.Append("  ActualAvgValue: ").Append(ActualAvgValue).Append("\n");
            sb.Append("  ParameterType: ").Append(ParameterType).Append("\n");
            sb.Append("  ParameterTypeName: ").Append(ParameterTypeName).Append("\n");
            sb.Append("  ParameterTypeAsInt: ").Append(ParameterTypeAsInt).Append("\n");
            sb.Append("  LastAttributeFulfilled: ").Append(LastAttributeFulfilled).Append("\n");
            sb.Append("  LastAttributeFulfilledName: ").Append(LastAttributeFulfilledName).Append("\n");
            sb.Append("  LastAttributeFulfilledAsInt: ").Append(LastAttributeFulfilledAsInt).Append("\n");
            sb.Append("  LastParamAttributeCode: ").Append(LastParamAttributeCode).Append("\n");
            sb.Append("  PanelId: ").Append(PanelId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault39Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault39Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault39Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault39Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.InspectionOrderNo == input.InspectionOrderNo ||
                    (this.InspectionOrderNo != null &&
                    this.InspectionOrderNo.Equals(input.InspectionOrderNo))
                ) && 
                (
                    this.InspectionOrderType == input.InspectionOrderType ||
                    (this.InspectionOrderType != null &&
                    this.InspectionOrderType.Equals(input.InspectionOrderType))
                ) && 
                (
                    this.LineNo == input.LineNo ||
                    (this.LineNo != null &&
                    this.LineNo.Equals(input.LineNo))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.ParameterNo == input.ParameterNo ||
                    (this.ParameterNo != null &&
                    this.ParameterNo.Equals(input.ParameterNo))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.InspectionDeviceNo == input.InspectionDeviceNo ||
                    (this.InspectionDeviceNo != null &&
                    this.InspectionDeviceNo.Equals(input.InspectionDeviceNo))
                ) && 
                (
                    this.UnitofMeasureCode == input.UnitofMeasureCode ||
                    (this.UnitofMeasureCode != null &&
                    this.UnitofMeasureCode.Equals(input.UnitofMeasureCode))
                ) && 
                (
                    this.ExpectedValue == input.ExpectedValue ||
                    (this.ExpectedValue != null &&
                    this.ExpectedValue.Equals(input.ExpectedValue))
                ) && 
                (
                    this.MinimalValue == input.MinimalValue ||
                    (this.MinimalValue != null &&
                    this.MinimalValue.Equals(input.MinimalValue))
                ) && 
                (
                    this.MaximalValue == input.MaximalValue ||
                    (this.MaximalValue != null &&
                    this.MaximalValue.Equals(input.MaximalValue))
                ) && 
                (
                    this.LastActualValue == input.LastActualValue ||
                    (this.LastActualValue != null &&
                    this.LastActualValue.Equals(input.LastActualValue))
                ) && 
                (
                    this.NoOfResults == input.NoOfResults ||
                    (this.NoOfResults != null &&
                    this.NoOfResults.Equals(input.NoOfResults))
                ) && 
                (
                    this.NoOfFailures == input.NoOfFailures ||
                    (this.NoOfFailures != null &&
                    this.NoOfFailures.Equals(input.NoOfFailures))
                ) && 
                (
                    this.ActualMinValue == input.ActualMinValue ||
                    (this.ActualMinValue != null &&
                    this.ActualMinValue.Equals(input.ActualMinValue))
                ) && 
                (
                    this.ActualMaxValue == input.ActualMaxValue ||
                    (this.ActualMaxValue != null &&
                    this.ActualMaxValue.Equals(input.ActualMaxValue))
                ) && 
                (
                    this.ActualAvgValue == input.ActualAvgValue ||
                    (this.ActualAvgValue != null &&
                    this.ActualAvgValue.Equals(input.ActualAvgValue))
                ) && 
                (
                    this.ParameterType == input.ParameterType ||
                    (this.ParameterType != null &&
                    this.ParameterType.Equals(input.ParameterType))
                ) && 
                (
                    this.ParameterTypeName == input.ParameterTypeName ||
                    (this.ParameterTypeName != null &&
                    this.ParameterTypeName.Equals(input.ParameterTypeName))
                ) && 
                (
                    this.ParameterTypeAsInt == input.ParameterTypeAsInt ||
                    (this.ParameterTypeAsInt != null &&
                    this.ParameterTypeAsInt.Equals(input.ParameterTypeAsInt))
                ) && 
                (
                    this.LastAttributeFulfilled == input.LastAttributeFulfilled ||
                    (this.LastAttributeFulfilled != null &&
                    this.LastAttributeFulfilled.Equals(input.LastAttributeFulfilled))
                ) && 
                (
                    this.LastAttributeFulfilledName == input.LastAttributeFulfilledName ||
                    (this.LastAttributeFulfilledName != null &&
                    this.LastAttributeFulfilledName.Equals(input.LastAttributeFulfilledName))
                ) && 
                (
                    this.LastAttributeFulfilledAsInt == input.LastAttributeFulfilledAsInt ||
                    (this.LastAttributeFulfilledAsInt != null &&
                    this.LastAttributeFulfilledAsInt.Equals(input.LastAttributeFulfilledAsInt))
                ) && 
                (
                    this.LastParamAttributeCode == input.LastParamAttributeCode ||
                    (this.LastParamAttributeCode != null &&
                    this.LastParamAttributeCode.Equals(input.LastParamAttributeCode))
                ) && 
                (
                    this.PanelId == input.PanelId ||
                    (this.PanelId != null &&
                    this.PanelId.Equals(input.PanelId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.InspectionOrderNo != null)
                    hashCode = hashCode * 59 + this.InspectionOrderNo.GetHashCode();
                if (this.InspectionOrderType != null)
                    hashCode = hashCode * 59 + this.InspectionOrderType.GetHashCode();
                if (this.LineNo != null)
                    hashCode = hashCode * 59 + this.LineNo.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.ParameterNo != null)
                    hashCode = hashCode * 59 + this.ParameterNo.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.InspectionDeviceNo != null)
                    hashCode = hashCode * 59 + this.InspectionDeviceNo.GetHashCode();
                if (this.UnitofMeasureCode != null)
                    hashCode = hashCode * 59 + this.UnitofMeasureCode.GetHashCode();
                if (this.ExpectedValue != null)
                    hashCode = hashCode * 59 + this.ExpectedValue.GetHashCode();
                if (this.MinimalValue != null)
                    hashCode = hashCode * 59 + this.MinimalValue.GetHashCode();
                if (this.MaximalValue != null)
                    hashCode = hashCode * 59 + this.MaximalValue.GetHashCode();
                if (this.LastActualValue != null)
                    hashCode = hashCode * 59 + this.LastActualValue.GetHashCode();
                if (this.NoOfResults != null)
                    hashCode = hashCode * 59 + this.NoOfResults.GetHashCode();
                if (this.NoOfFailures != null)
                    hashCode = hashCode * 59 + this.NoOfFailures.GetHashCode();
                if (this.ActualMinValue != null)
                    hashCode = hashCode * 59 + this.ActualMinValue.GetHashCode();
                if (this.ActualMaxValue != null)
                    hashCode = hashCode * 59 + this.ActualMaxValue.GetHashCode();
                if (this.ActualAvgValue != null)
                    hashCode = hashCode * 59 + this.ActualAvgValue.GetHashCode();
                if (this.ParameterType != null)
                    hashCode = hashCode * 59 + this.ParameterType.GetHashCode();
                if (this.ParameterTypeName != null)
                    hashCode = hashCode * 59 + this.ParameterTypeName.GetHashCode();
                if (this.ParameterTypeAsInt != null)
                    hashCode = hashCode * 59 + this.ParameterTypeAsInt.GetHashCode();
                if (this.LastAttributeFulfilled != null)
                    hashCode = hashCode * 59 + this.LastAttributeFulfilled.GetHashCode();
                if (this.LastAttributeFulfilledName != null)
                    hashCode = hashCode * 59 + this.LastAttributeFulfilledName.GetHashCode();
                if (this.LastAttributeFulfilledAsInt != null)
                    hashCode = hashCode * 59 + this.LastAttributeFulfilledAsInt.GetHashCode();
                if (this.LastParamAttributeCode != null)
                    hashCode = hashCode * 59 + this.LastParamAttributeCode.GetHashCode();
                if (this.PanelId != null)
                    hashCode = hashCode * 59 + this.PanelId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
