/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault13Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault13Value :  IEquatable<InlineResponseDefault13Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault13Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="no">no.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="eosBadgeNo">eosBadgeNo.</param>
        /// <param name="eosBadgeMD5Hash">eosBadgeMD5Hash.</param>
        /// <param name="teamLeader">teamLeader.</param>
        /// <param name="team">team.</param>
        public InlineResponseDefault13Value(string odataEtag = default(string), string systemId = default(string), string no = default(string), string firstName = default(string), string lastName = default(string), string eosBadgeNo = default(string), string eosBadgeMD5Hash = default(string), bool? teamLeader = default(bool?), string team = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.No = no;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.EosBadgeNo = eosBadgeNo;
            this.EosBadgeMD5Hash = eosBadgeMD5Hash;
            this.TeamLeader = teamLeader;
            this.Team = team;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// no
        /// </summary>
        /// <value>no</value>
        [DataMember(Name="no", EmitDefaultValue=false)]
        public string No { get; set; }

        /// <summary>
        /// firstName
        /// </summary>
        /// <value>firstName</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// lastName
        /// </summary>
        /// <value>lastName</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// eosBadgeNo
        /// </summary>
        /// <value>eosBadgeNo</value>
        [DataMember(Name="eosBadgeNo", EmitDefaultValue=false)]
        public string EosBadgeNo { get; set; }

        /// <summary>
        /// eosBadgeMD5Hash
        /// </summary>
        /// <value>eosBadgeMD5Hash</value>
        [DataMember(Name="eosBadgeMD5Hash", EmitDefaultValue=false)]
        public string EosBadgeMD5Hash { get; set; }

        /// <summary>
        /// teamLeader
        /// </summary>
        /// <value>teamLeader</value>
        [DataMember(Name="teamLeader", EmitDefaultValue=false)]
        public bool? TeamLeader { get; set; }

        /// <summary>
        /// team
        /// </summary>
        /// <value>team</value>
        [DataMember(Name="team", EmitDefaultValue=false)]
        public string Team { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault13Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  No: ").Append(No).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  EosBadgeNo: ").Append(EosBadgeNo).Append("\n");
            sb.Append("  EosBadgeMD5Hash: ").Append(EosBadgeMD5Hash).Append("\n");
            sb.Append("  TeamLeader: ").Append(TeamLeader).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault13Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault13Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault13Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault13Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.No == input.No ||
                    (this.No != null &&
                    this.No.Equals(input.No))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.EosBadgeNo == input.EosBadgeNo ||
                    (this.EosBadgeNo != null &&
                    this.EosBadgeNo.Equals(input.EosBadgeNo))
                ) && 
                (
                    this.EosBadgeMD5Hash == input.EosBadgeMD5Hash ||
                    (this.EosBadgeMD5Hash != null &&
                    this.EosBadgeMD5Hash.Equals(input.EosBadgeMD5Hash))
                ) && 
                (
                    this.TeamLeader == input.TeamLeader ||
                    (this.TeamLeader != null &&
                    this.TeamLeader.Equals(input.TeamLeader))
                ) && 
                (
                    this.Team == input.Team ||
                    (this.Team != null &&
                    this.Team.Equals(input.Team))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.No != null)
                    hashCode = hashCode * 59 + this.No.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.EosBadgeNo != null)
                    hashCode = hashCode * 59 + this.EosBadgeNo.GetHashCode();
                if (this.EosBadgeMD5Hash != null)
                    hashCode = hashCode * 59 + this.EosBadgeMD5Hash.GetHashCode();
                if (this.TeamLeader != null)
                    hashCode = hashCode * 59 + this.TeamLeader.GetHashCode();
                if (this.Team != null)
                    hashCode = hashCode * 59 + this.Team.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
