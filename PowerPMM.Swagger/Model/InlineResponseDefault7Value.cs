/* 
 * Power PLM Connector
 *
 * The custom connector used by Power PLM by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault7Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault7Value :  IEquatable<InlineResponseDefault7Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault7Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="no">no.</param>
        /// <param name="description">description.</param>
        /// <param name="maintenanceType">maintenanceType.</param>
        /// <param name="maintenanceTypeCode">maintenanceTypeCode.</param>
        /// <param name="maintenanceWorkTypeCode">maintenanceWorkTypeCode.</param>
        /// <param name="machineNo">machineNo.</param>
        /// <param name="blocked">blocked.</param>
        public InlineResponseDefault7Value(string odataEtag = default(string), string systemId = default(string), string no = default(string), string description = default(string), string maintenanceType = default(string), string maintenanceTypeCode = default(string), string maintenanceWorkTypeCode = default(string), string machineNo = default(string), bool? blocked = default(bool?))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.No = no;
            this.Description = description;
            this.MaintenanceType = maintenanceType;
            this.MaintenanceTypeCode = maintenanceTypeCode;
            this.MaintenanceWorkTypeCode = maintenanceWorkTypeCode;
            this.MachineNo = machineNo;
            this.Blocked = blocked;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// no
        /// </summary>
        /// <value>no</value>
        [DataMember(Name="no", EmitDefaultValue=false)]
        public string No { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// maintenanceType
        /// </summary>
        /// <value>maintenanceType</value>
        [DataMember(Name="maintenanceType", EmitDefaultValue=false)]
        public string MaintenanceType { get; set; }

        /// <summary>
        /// maintenanceTypeCode
        /// </summary>
        /// <value>maintenanceTypeCode</value>
        [DataMember(Name="maintenanceTypeCode", EmitDefaultValue=false)]
        public string MaintenanceTypeCode { get; set; }

        /// <summary>
        /// maintenanceWorkTypeCode
        /// </summary>
        /// <value>maintenanceWorkTypeCode</value>
        [DataMember(Name="maintenanceWorkTypeCode", EmitDefaultValue=false)]
        public string MaintenanceWorkTypeCode { get; set; }

        /// <summary>
        /// machineNo
        /// </summary>
        /// <value>machineNo</value>
        [DataMember(Name="machineNo", EmitDefaultValue=false)]
        public string MachineNo { get; set; }

        /// <summary>
        /// blocked
        /// </summary>
        /// <value>blocked</value>
        [DataMember(Name="blocked", EmitDefaultValue=false)]
        public bool? Blocked { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault7Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  No: ").Append(No).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MaintenanceType: ").Append(MaintenanceType).Append("\n");
            sb.Append("  MaintenanceTypeCode: ").Append(MaintenanceTypeCode).Append("\n");
            sb.Append("  MaintenanceWorkTypeCode: ").Append(MaintenanceWorkTypeCode).Append("\n");
            sb.Append("  MachineNo: ").Append(MachineNo).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault7Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault7Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault7Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault7Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.No == input.No ||
                    (this.No != null &&
                    this.No.Equals(input.No))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.MaintenanceType == input.MaintenanceType ||
                    (this.MaintenanceType != null &&
                    this.MaintenanceType.Equals(input.MaintenanceType))
                ) && 
                (
                    this.MaintenanceTypeCode == input.MaintenanceTypeCode ||
                    (this.MaintenanceTypeCode != null &&
                    this.MaintenanceTypeCode.Equals(input.MaintenanceTypeCode))
                ) && 
                (
                    this.MaintenanceWorkTypeCode == input.MaintenanceWorkTypeCode ||
                    (this.MaintenanceWorkTypeCode != null &&
                    this.MaintenanceWorkTypeCode.Equals(input.MaintenanceWorkTypeCode))
                ) && 
                (
                    this.MachineNo == input.MachineNo ||
                    (this.MachineNo != null &&
                    this.MachineNo.Equals(input.MachineNo))
                ) && 
                (
                    this.Blocked == input.Blocked ||
                    (this.Blocked != null &&
                    this.Blocked.Equals(input.Blocked))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.No != null)
                    hashCode = hashCode * 59 + this.No.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.MaintenanceType != null)
                    hashCode = hashCode * 59 + this.MaintenanceType.GetHashCode();
                if (this.MaintenanceTypeCode != null)
                    hashCode = hashCode * 59 + this.MaintenanceTypeCode.GetHashCode();
                if (this.MaintenanceWorkTypeCode != null)
                    hashCode = hashCode * 59 + this.MaintenanceWorkTypeCode.GetHashCode();
                if (this.MachineNo != null)
                    hashCode = hashCode * 59 + this.MachineNo.GetHashCode();
                if (this.Blocked != null)
                    hashCode = hashCode * 59 + this.Blocked.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
