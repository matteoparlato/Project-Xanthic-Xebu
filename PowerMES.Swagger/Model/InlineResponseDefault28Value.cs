/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault28Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault28Value :  IEquatable<InlineResponseDefault28Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault28Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="sourceType">sourceType.</param>
        /// <param name="sourceTypeAsInt">sourceTypeAsInt.</param>
        /// <param name="sourceTypeName">sourceTypeName.</param>
        /// <param name="status">status.</param>
        /// <param name="statusAsInt">statusAsInt.</param>
        /// <param name="statusName">statusName.</param>
        /// <param name="prodOrderNo">prodOrderNo.</param>
        /// <param name="routingNo">routingNo.</param>
        /// <param name="routingReferenceNo">routingReferenceNo.</param>
        /// <param name="operationNo">operationNo.</param>
        /// <param name="previousOperationNo">previousOperationNo.</param>
        /// <param name="nextOperationNo">nextOperationNo.</param>
        /// <param name="type">type.</param>
        /// <param name="typeAsInt">typeAsInt.</param>
        /// <param name="typeName">typeName.</param>
        /// <param name="no">no.</param>
        /// <param name="workCenterNo">workCenterNo.</param>
        /// <param name="description">description.</param>
        /// <param name="lineDescription">lineDescription.</param>
        /// <param name="lineDescription2">lineDescription2.</param>
        /// <param name="inputQuantity">inputQuantity.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="remainingQuantity">remainingQuantity.</param>
        /// <param name="startingDateTime">startingDateTime.</param>
        /// <param name="endingDateTime">endingDateTime.</param>
        /// <param name="waitTimeUnitOfMeasCode">waitTimeUnitOfMeasCode.</param>
        /// <param name="waitTime">waitTime.</param>
        /// <param name="setupTimeUnitOfMeasCode">setupTimeUnitOfMeasCode.</param>
        /// <param name="setupTime">setupTime.</param>
        /// <param name="runTimeUnitOfMeasCode">runTimeUnitOfMeasCode.</param>
        /// <param name="runTime">runTime.</param>
        /// <param name="routingLinkCode">routingLinkCode.</param>
        /// <param name="standardTaskCode">standardTaskCode.</param>
        /// <param name="eosOutputQuantity">eosOutputQuantity.</param>
        /// <param name="eosOutputQuantityOriginal">eosOutputQuantityOriginal.</param>
        /// <param name="eosTotalRunTime">eosTotalRunTime.</param>
        /// <param name="eosTotalScrapQty">eosTotalScrapQty.</param>
        /// <param name="eosTotalScrapQtyOriginal">eosTotalScrapQtyOriginal.</param>
        /// <param name="eosExpectedOutputQuantity">eosExpectedOutputQuantity.</param>
        /// <param name="eosExpectedOutputQuantityOriginal">eosExpectedOutputQuantityOriginal.</param>
        /// <param name="eosExpectedScrapQty">eosExpectedScrapQty.</param>
        /// <param name="eosExpectedScrapQtyOriginal">eosExpectedScrapQtyOriginal.</param>
        /// <param name="eosProdOrderQty">eosProdOrderQty.</param>
        /// <param name="staplingNo">staplingNo.</param>
        /// <param name="reworkAvailable">reworkAvailable.</param>
        /// <param name="inspectionOrderExists">inspectionOrderExists.</param>
        /// <param name="inspectionOrderNo">inspectionOrderNo.</param>
        /// <param name="inspectionOrderSystemId">inspectionOrderSystemId.</param>
        /// <param name="attachmentExists">attachmentExists.</param>
        /// <param name="panelId">panelId.</param>
        /// <param name="panelSetupId">panelSetupId.</param>
        public InlineResponseDefault28Value(string odataEtag = default(string), string systemId = default(string), string sourceType = default(string), decimal? sourceTypeAsInt = default(decimal?), string sourceTypeName = default(string), string status = default(string), decimal? statusAsInt = default(decimal?), string statusName = default(string), string prodOrderNo = default(string), string routingNo = default(string), decimal? routingReferenceNo = default(decimal?), string operationNo = default(string), string previousOperationNo = default(string), string nextOperationNo = default(string), string type = default(string), decimal? typeAsInt = default(decimal?), string typeName = default(string), string no = default(string), string workCenterNo = default(string), string description = default(string), string lineDescription = default(string), string lineDescription2 = default(string), decimal? inputQuantity = default(decimal?), decimal? quantity = default(decimal?), decimal? remainingQuantity = default(decimal?), DateTime? startingDateTime = default(DateTime?), DateTime? endingDateTime = default(DateTime?), string waitTimeUnitOfMeasCode = default(string), decimal? waitTime = default(decimal?), string setupTimeUnitOfMeasCode = default(string), decimal? setupTime = default(decimal?), string runTimeUnitOfMeasCode = default(string), decimal? runTime = default(decimal?), string routingLinkCode = default(string), string standardTaskCode = default(string), decimal? eosOutputQuantity = default(decimal?), decimal? eosOutputQuantityOriginal = default(decimal?), decimal? eosTotalRunTime = default(decimal?), decimal? eosTotalScrapQty = default(decimal?), decimal? eosTotalScrapQtyOriginal = default(decimal?), decimal? eosExpectedOutputQuantity = default(decimal?), decimal? eosExpectedOutputQuantityOriginal = default(decimal?), decimal? eosExpectedScrapQty = default(decimal?), decimal? eosExpectedScrapQtyOriginal = default(decimal?), decimal? eosProdOrderQty = default(decimal?), string staplingNo = default(string), bool? reworkAvailable = default(bool?), bool? inspectionOrderExists = default(bool?), string inspectionOrderNo = default(string), string inspectionOrderSystemId = default(string), bool? attachmentExists = default(bool?), string panelId = default(string), string panelSetupId = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.SourceType = sourceType;
            this.SourceTypeAsInt = sourceTypeAsInt;
            this.SourceTypeName = sourceTypeName;
            this.Status = status;
            this.StatusAsInt = statusAsInt;
            this.StatusName = statusName;
            this.ProdOrderNo = prodOrderNo;
            this.RoutingNo = routingNo;
            this.RoutingReferenceNo = routingReferenceNo;
            this.OperationNo = operationNo;
            this.PreviousOperationNo = previousOperationNo;
            this.NextOperationNo = nextOperationNo;
            this.Type = type;
            this.TypeAsInt = typeAsInt;
            this.TypeName = typeName;
            this.No = no;
            this.WorkCenterNo = workCenterNo;
            this.Description = description;
            this.LineDescription = lineDescription;
            this.LineDescription2 = lineDescription2;
            this.InputQuantity = inputQuantity;
            this.Quantity = quantity;
            this.RemainingQuantity = remainingQuantity;
            this.StartingDateTime = startingDateTime;
            this.EndingDateTime = endingDateTime;
            this.WaitTimeUnitOfMeasCode = waitTimeUnitOfMeasCode;
            this.WaitTime = waitTime;
            this.SetupTimeUnitOfMeasCode = setupTimeUnitOfMeasCode;
            this.SetupTime = setupTime;
            this.RunTimeUnitOfMeasCode = runTimeUnitOfMeasCode;
            this.RunTime = runTime;
            this.RoutingLinkCode = routingLinkCode;
            this.StandardTaskCode = standardTaskCode;
            this.EosOutputQuantity = eosOutputQuantity;
            this.EosOutputQuantityOriginal = eosOutputQuantityOriginal;
            this.EosTotalRunTime = eosTotalRunTime;
            this.EosTotalScrapQty = eosTotalScrapQty;
            this.EosTotalScrapQtyOriginal = eosTotalScrapQtyOriginal;
            this.EosExpectedOutputQuantity = eosExpectedOutputQuantity;
            this.EosExpectedOutputQuantityOriginal = eosExpectedOutputQuantityOriginal;
            this.EosExpectedScrapQty = eosExpectedScrapQty;
            this.EosExpectedScrapQtyOriginal = eosExpectedScrapQtyOriginal;
            this.EosProdOrderQty = eosProdOrderQty;
            this.StaplingNo = staplingNo;
            this.ReworkAvailable = reworkAvailable;
            this.InspectionOrderExists = inspectionOrderExists;
            this.InspectionOrderNo = inspectionOrderNo;
            this.InspectionOrderSystemId = inspectionOrderSystemId;
            this.AttachmentExists = attachmentExists;
            this.PanelId = panelId;
            this.PanelSetupId = panelSetupId;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// sourceType
        /// </summary>
        /// <value>sourceType</value>
        [DataMember(Name="sourceType", EmitDefaultValue=false)]
        public string SourceType { get; set; }

        /// <summary>
        /// sourceTypeAsInt
        /// </summary>
        /// <value>sourceTypeAsInt</value>
        [DataMember(Name="sourceTypeAsInt", EmitDefaultValue=false)]
        public decimal? SourceTypeAsInt { get; set; }

        /// <summary>
        /// sourceTypeName
        /// </summary>
        /// <value>sourceTypeName</value>
        [DataMember(Name="sourceTypeName", EmitDefaultValue=false)]
        public string SourceTypeName { get; set; }

        /// <summary>
        /// status
        /// </summary>
        /// <value>status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// statusAsInt
        /// </summary>
        /// <value>statusAsInt</value>
        [DataMember(Name="statusAsInt", EmitDefaultValue=false)]
        public decimal? StatusAsInt { get; set; }

        /// <summary>
        /// statusName
        /// </summary>
        /// <value>statusName</value>
        [DataMember(Name="statusName", EmitDefaultValue=false)]
        public string StatusName { get; set; }

        /// <summary>
        /// prodOrderNo
        /// </summary>
        /// <value>prodOrderNo</value>
        [DataMember(Name="prodOrderNo", EmitDefaultValue=false)]
        public string ProdOrderNo { get; set; }

        /// <summary>
        /// routingNo
        /// </summary>
        /// <value>routingNo</value>
        [DataMember(Name="routingNo", EmitDefaultValue=false)]
        public string RoutingNo { get; set; }

        /// <summary>
        /// routingReferenceNo
        /// </summary>
        /// <value>routingReferenceNo</value>
        [DataMember(Name="routingReferenceNo", EmitDefaultValue=false)]
        public decimal? RoutingReferenceNo { get; set; }

        /// <summary>
        /// operationNo
        /// </summary>
        /// <value>operationNo</value>
        [DataMember(Name="operationNo", EmitDefaultValue=false)]
        public string OperationNo { get; set; }

        /// <summary>
        /// previousOperationNo
        /// </summary>
        /// <value>previousOperationNo</value>
        [DataMember(Name="previousOperationNo", EmitDefaultValue=false)]
        public string PreviousOperationNo { get; set; }

        /// <summary>
        /// nextOperationNo
        /// </summary>
        /// <value>nextOperationNo</value>
        [DataMember(Name="nextOperationNo", EmitDefaultValue=false)]
        public string NextOperationNo { get; set; }

        /// <summary>
        /// type
        /// </summary>
        /// <value>type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// typeAsInt
        /// </summary>
        /// <value>typeAsInt</value>
        [DataMember(Name="typeAsInt", EmitDefaultValue=false)]
        public decimal? TypeAsInt { get; set; }

        /// <summary>
        /// typeName
        /// </summary>
        /// <value>typeName</value>
        [DataMember(Name="typeName", EmitDefaultValue=false)]
        public string TypeName { get; set; }

        /// <summary>
        /// no
        /// </summary>
        /// <value>no</value>
        [DataMember(Name="no", EmitDefaultValue=false)]
        public string No { get; set; }

        /// <summary>
        /// workCenterNo
        /// </summary>
        /// <value>workCenterNo</value>
        [DataMember(Name="workCenterNo", EmitDefaultValue=false)]
        public string WorkCenterNo { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// lineDescription
        /// </summary>
        /// <value>lineDescription</value>
        [DataMember(Name="lineDescription", EmitDefaultValue=false)]
        public string LineDescription { get; set; }

        /// <summary>
        /// lineDescription2
        /// </summary>
        /// <value>lineDescription2</value>
        [DataMember(Name="lineDescription2", EmitDefaultValue=false)]
        public string LineDescription2 { get; set; }

        /// <summary>
        /// inputQuantity
        /// </summary>
        /// <value>inputQuantity</value>
        [DataMember(Name="inputQuantity", EmitDefaultValue=false)]
        public decimal? InputQuantity { get; set; }

        /// <summary>
        /// quantity
        /// </summary>
        /// <value>quantity</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// remainingQuantity
        /// </summary>
        /// <value>remainingQuantity</value>
        [DataMember(Name="remainingQuantity", EmitDefaultValue=false)]
        public decimal? RemainingQuantity { get; set; }

        /// <summary>
        /// startingDateTime
        /// </summary>
        /// <value>startingDateTime</value>
        [DataMember(Name="startingDateTime", EmitDefaultValue=false)]
        public DateTime? StartingDateTime { get; set; }

        /// <summary>
        /// endingDateTime
        /// </summary>
        /// <value>endingDateTime</value>
        [DataMember(Name="endingDateTime", EmitDefaultValue=false)]
        public DateTime? EndingDateTime { get; set; }

        /// <summary>
        /// waitTimeUnitOfMeasCode
        /// </summary>
        /// <value>waitTimeUnitOfMeasCode</value>
        [DataMember(Name="waitTimeUnitOfMeasCode", EmitDefaultValue=false)]
        public string WaitTimeUnitOfMeasCode { get; set; }

        /// <summary>
        /// waitTime
        /// </summary>
        /// <value>waitTime</value>
        [DataMember(Name="waitTime", EmitDefaultValue=false)]
        public decimal? WaitTime { get; set; }

        /// <summary>
        /// setupTimeUnitOfMeasCode
        /// </summary>
        /// <value>setupTimeUnitOfMeasCode</value>
        [DataMember(Name="setupTimeUnitOfMeasCode", EmitDefaultValue=false)]
        public string SetupTimeUnitOfMeasCode { get; set; }

        /// <summary>
        /// setupTime
        /// </summary>
        /// <value>setupTime</value>
        [DataMember(Name="setupTime", EmitDefaultValue=false)]
        public decimal? SetupTime { get; set; }

        /// <summary>
        /// runTimeUnitOfMeasCode
        /// </summary>
        /// <value>runTimeUnitOfMeasCode</value>
        [DataMember(Name="runTimeUnitOfMeasCode", EmitDefaultValue=false)]
        public string RunTimeUnitOfMeasCode { get; set; }

        /// <summary>
        /// runTime
        /// </summary>
        /// <value>runTime</value>
        [DataMember(Name="runTime", EmitDefaultValue=false)]
        public decimal? RunTime { get; set; }

        /// <summary>
        /// routingLinkCode
        /// </summary>
        /// <value>routingLinkCode</value>
        [DataMember(Name="routingLinkCode", EmitDefaultValue=false)]
        public string RoutingLinkCode { get; set; }

        /// <summary>
        /// standardTaskCode
        /// </summary>
        /// <value>standardTaskCode</value>
        [DataMember(Name="standardTaskCode", EmitDefaultValue=false)]
        public string StandardTaskCode { get; set; }

        /// <summary>
        /// eosOutputQuantity
        /// </summary>
        /// <value>eosOutputQuantity</value>
        [DataMember(Name="eosOutputQuantity", EmitDefaultValue=false)]
        public decimal? EosOutputQuantity { get; set; }

        /// <summary>
        /// eosOutputQuantityOriginal
        /// </summary>
        /// <value>eosOutputQuantityOriginal</value>
        [DataMember(Name="eosOutputQuantityOriginal", EmitDefaultValue=false)]
        public decimal? EosOutputQuantityOriginal { get; set; }

        /// <summary>
        /// eosTotalRunTime
        /// </summary>
        /// <value>eosTotalRunTime</value>
        [DataMember(Name="eosTotalRunTime", EmitDefaultValue=false)]
        public decimal? EosTotalRunTime { get; set; }

        /// <summary>
        /// eosTotalScrapQty
        /// </summary>
        /// <value>eosTotalScrapQty</value>
        [DataMember(Name="eosTotalScrapQty", EmitDefaultValue=false)]
        public decimal? EosTotalScrapQty { get; set; }

        /// <summary>
        /// eosTotalScrapQtyOriginal
        /// </summary>
        /// <value>eosTotalScrapQtyOriginal</value>
        [DataMember(Name="eosTotalScrapQtyOriginal", EmitDefaultValue=false)]
        public decimal? EosTotalScrapQtyOriginal { get; set; }

        /// <summary>
        /// eosExpectedOutputQuantity
        /// </summary>
        /// <value>eosExpectedOutputQuantity</value>
        [DataMember(Name="eosExpectedOutputQuantity", EmitDefaultValue=false)]
        public decimal? EosExpectedOutputQuantity { get; set; }

        /// <summary>
        /// eosExpectedOutputQuantityOriginal
        /// </summary>
        /// <value>eosExpectedOutputQuantityOriginal</value>
        [DataMember(Name="eosExpectedOutputQuantityOriginal", EmitDefaultValue=false)]
        public decimal? EosExpectedOutputQuantityOriginal { get; set; }

        /// <summary>
        /// eosExpectedScrapQty
        /// </summary>
        /// <value>eosExpectedScrapQty</value>
        [DataMember(Name="eosExpectedScrapQty", EmitDefaultValue=false)]
        public decimal? EosExpectedScrapQty { get; set; }

        /// <summary>
        /// eosExpectedScrapQtyOriginal
        /// </summary>
        /// <value>eosExpectedScrapQtyOriginal</value>
        [DataMember(Name="eosExpectedScrapQtyOriginal", EmitDefaultValue=false)]
        public decimal? EosExpectedScrapQtyOriginal { get; set; }

        /// <summary>
        /// eosProdOrderQty
        /// </summary>
        /// <value>eosProdOrderQty</value>
        [DataMember(Name="eosProdOrderQty", EmitDefaultValue=false)]
        public decimal? EosProdOrderQty { get; set; }

        /// <summary>
        /// staplingNo
        /// </summary>
        /// <value>staplingNo</value>
        [DataMember(Name="staplingNo", EmitDefaultValue=false)]
        public string StaplingNo { get; set; }

        /// <summary>
        /// reworkAvailable
        /// </summary>
        /// <value>reworkAvailable</value>
        [DataMember(Name="reworkAvailable", EmitDefaultValue=false)]
        public bool? ReworkAvailable { get; set; }

        /// <summary>
        /// inspectionOrderExists
        /// </summary>
        /// <value>inspectionOrderExists</value>
        [DataMember(Name="inspectionOrderExists", EmitDefaultValue=false)]
        public bool? InspectionOrderExists { get; set; }

        /// <summary>
        /// inspectionOrderNo
        /// </summary>
        /// <value>inspectionOrderNo</value>
        [DataMember(Name="inspectionOrderNo", EmitDefaultValue=false)]
        public string InspectionOrderNo { get; set; }

        /// <summary>
        /// inspectionOrderSystemId
        /// </summary>
        /// <value>inspectionOrderSystemId</value>
        [DataMember(Name="inspectionOrderSystemId", EmitDefaultValue=false)]
        public string InspectionOrderSystemId { get; set; }

        /// <summary>
        /// attachmentExists
        /// </summary>
        /// <value>attachmentExists</value>
        [DataMember(Name="attachmentExists", EmitDefaultValue=false)]
        public bool? AttachmentExists { get; set; }

        /// <summary>
        /// panelId
        /// </summary>
        /// <value>panelId</value>
        [DataMember(Name="panelId", EmitDefaultValue=false)]
        public string PanelId { get; set; }

        /// <summary>
        /// panelSetupId
        /// </summary>
        /// <value>panelSetupId</value>
        [DataMember(Name="panelSetupId", EmitDefaultValue=false)]
        public string PanelSetupId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault28Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  SourceTypeAsInt: ").Append(SourceTypeAsInt).Append("\n");
            sb.Append("  SourceTypeName: ").Append(SourceTypeName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusAsInt: ").Append(StatusAsInt).Append("\n");
            sb.Append("  StatusName: ").Append(StatusName).Append("\n");
            sb.Append("  ProdOrderNo: ").Append(ProdOrderNo).Append("\n");
            sb.Append("  RoutingNo: ").Append(RoutingNo).Append("\n");
            sb.Append("  RoutingReferenceNo: ").Append(RoutingReferenceNo).Append("\n");
            sb.Append("  OperationNo: ").Append(OperationNo).Append("\n");
            sb.Append("  PreviousOperationNo: ").Append(PreviousOperationNo).Append("\n");
            sb.Append("  NextOperationNo: ").Append(NextOperationNo).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeAsInt: ").Append(TypeAsInt).Append("\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("  No: ").Append(No).Append("\n");
            sb.Append("  WorkCenterNo: ").Append(WorkCenterNo).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LineDescription: ").Append(LineDescription).Append("\n");
            sb.Append("  LineDescription2: ").Append(LineDescription2).Append("\n");
            sb.Append("  InputQuantity: ").Append(InputQuantity).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RemainingQuantity: ").Append(RemainingQuantity).Append("\n");
            sb.Append("  StartingDateTime: ").Append(StartingDateTime).Append("\n");
            sb.Append("  EndingDateTime: ").Append(EndingDateTime).Append("\n");
            sb.Append("  WaitTimeUnitOfMeasCode: ").Append(WaitTimeUnitOfMeasCode).Append("\n");
            sb.Append("  WaitTime: ").Append(WaitTime).Append("\n");
            sb.Append("  SetupTimeUnitOfMeasCode: ").Append(SetupTimeUnitOfMeasCode).Append("\n");
            sb.Append("  SetupTime: ").Append(SetupTime).Append("\n");
            sb.Append("  RunTimeUnitOfMeasCode: ").Append(RunTimeUnitOfMeasCode).Append("\n");
            sb.Append("  RunTime: ").Append(RunTime).Append("\n");
            sb.Append("  RoutingLinkCode: ").Append(RoutingLinkCode).Append("\n");
            sb.Append("  StandardTaskCode: ").Append(StandardTaskCode).Append("\n");
            sb.Append("  EosOutputQuantity: ").Append(EosOutputQuantity).Append("\n");
            sb.Append("  EosOutputQuantityOriginal: ").Append(EosOutputQuantityOriginal).Append("\n");
            sb.Append("  EosTotalRunTime: ").Append(EosTotalRunTime).Append("\n");
            sb.Append("  EosTotalScrapQty: ").Append(EosTotalScrapQty).Append("\n");
            sb.Append("  EosTotalScrapQtyOriginal: ").Append(EosTotalScrapQtyOriginal).Append("\n");
            sb.Append("  EosExpectedOutputQuantity: ").Append(EosExpectedOutputQuantity).Append("\n");
            sb.Append("  EosExpectedOutputQuantityOriginal: ").Append(EosExpectedOutputQuantityOriginal).Append("\n");
            sb.Append("  EosExpectedScrapQty: ").Append(EosExpectedScrapQty).Append("\n");
            sb.Append("  EosExpectedScrapQtyOriginal: ").Append(EosExpectedScrapQtyOriginal).Append("\n");
            sb.Append("  EosProdOrderQty: ").Append(EosProdOrderQty).Append("\n");
            sb.Append("  StaplingNo: ").Append(StaplingNo).Append("\n");
            sb.Append("  ReworkAvailable: ").Append(ReworkAvailable).Append("\n");
            sb.Append("  InspectionOrderExists: ").Append(InspectionOrderExists).Append("\n");
            sb.Append("  InspectionOrderNo: ").Append(InspectionOrderNo).Append("\n");
            sb.Append("  InspectionOrderSystemId: ").Append(InspectionOrderSystemId).Append("\n");
            sb.Append("  AttachmentExists: ").Append(AttachmentExists).Append("\n");
            sb.Append("  PanelId: ").Append(PanelId).Append("\n");
            sb.Append("  PanelSetupId: ").Append(PanelSetupId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault28Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault28Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault28Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault28Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.SourceType == input.SourceType ||
                    (this.SourceType != null &&
                    this.SourceType.Equals(input.SourceType))
                ) && 
                (
                    this.SourceTypeAsInt == input.SourceTypeAsInt ||
                    (this.SourceTypeAsInt != null &&
                    this.SourceTypeAsInt.Equals(input.SourceTypeAsInt))
                ) && 
                (
                    this.SourceTypeName == input.SourceTypeName ||
                    (this.SourceTypeName != null &&
                    this.SourceTypeName.Equals(input.SourceTypeName))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusAsInt == input.StatusAsInt ||
                    (this.StatusAsInt != null &&
                    this.StatusAsInt.Equals(input.StatusAsInt))
                ) && 
                (
                    this.StatusName == input.StatusName ||
                    (this.StatusName != null &&
                    this.StatusName.Equals(input.StatusName))
                ) && 
                (
                    this.ProdOrderNo == input.ProdOrderNo ||
                    (this.ProdOrderNo != null &&
                    this.ProdOrderNo.Equals(input.ProdOrderNo))
                ) && 
                (
                    this.RoutingNo == input.RoutingNo ||
                    (this.RoutingNo != null &&
                    this.RoutingNo.Equals(input.RoutingNo))
                ) && 
                (
                    this.RoutingReferenceNo == input.RoutingReferenceNo ||
                    (this.RoutingReferenceNo != null &&
                    this.RoutingReferenceNo.Equals(input.RoutingReferenceNo))
                ) && 
                (
                    this.OperationNo == input.OperationNo ||
                    (this.OperationNo != null &&
                    this.OperationNo.Equals(input.OperationNo))
                ) && 
                (
                    this.PreviousOperationNo == input.PreviousOperationNo ||
                    (this.PreviousOperationNo != null &&
                    this.PreviousOperationNo.Equals(input.PreviousOperationNo))
                ) && 
                (
                    this.NextOperationNo == input.NextOperationNo ||
                    (this.NextOperationNo != null &&
                    this.NextOperationNo.Equals(input.NextOperationNo))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TypeAsInt == input.TypeAsInt ||
                    (this.TypeAsInt != null &&
                    this.TypeAsInt.Equals(input.TypeAsInt))
                ) && 
                (
                    this.TypeName == input.TypeName ||
                    (this.TypeName != null &&
                    this.TypeName.Equals(input.TypeName))
                ) && 
                (
                    this.No == input.No ||
                    (this.No != null &&
                    this.No.Equals(input.No))
                ) && 
                (
                    this.WorkCenterNo == input.WorkCenterNo ||
                    (this.WorkCenterNo != null &&
                    this.WorkCenterNo.Equals(input.WorkCenterNo))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.LineDescription == input.LineDescription ||
                    (this.LineDescription != null &&
                    this.LineDescription.Equals(input.LineDescription))
                ) && 
                (
                    this.LineDescription2 == input.LineDescription2 ||
                    (this.LineDescription2 != null &&
                    this.LineDescription2.Equals(input.LineDescription2))
                ) && 
                (
                    this.InputQuantity == input.InputQuantity ||
                    (this.InputQuantity != null &&
                    this.InputQuantity.Equals(input.InputQuantity))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.RemainingQuantity == input.RemainingQuantity ||
                    (this.RemainingQuantity != null &&
                    this.RemainingQuantity.Equals(input.RemainingQuantity))
                ) && 
                (
                    this.StartingDateTime == input.StartingDateTime ||
                    (this.StartingDateTime != null &&
                    this.StartingDateTime.Equals(input.StartingDateTime))
                ) && 
                (
                    this.EndingDateTime == input.EndingDateTime ||
                    (this.EndingDateTime != null &&
                    this.EndingDateTime.Equals(input.EndingDateTime))
                ) && 
                (
                    this.WaitTimeUnitOfMeasCode == input.WaitTimeUnitOfMeasCode ||
                    (this.WaitTimeUnitOfMeasCode != null &&
                    this.WaitTimeUnitOfMeasCode.Equals(input.WaitTimeUnitOfMeasCode))
                ) && 
                (
                    this.WaitTime == input.WaitTime ||
                    (this.WaitTime != null &&
                    this.WaitTime.Equals(input.WaitTime))
                ) && 
                (
                    this.SetupTimeUnitOfMeasCode == input.SetupTimeUnitOfMeasCode ||
                    (this.SetupTimeUnitOfMeasCode != null &&
                    this.SetupTimeUnitOfMeasCode.Equals(input.SetupTimeUnitOfMeasCode))
                ) && 
                (
                    this.SetupTime == input.SetupTime ||
                    (this.SetupTime != null &&
                    this.SetupTime.Equals(input.SetupTime))
                ) && 
                (
                    this.RunTimeUnitOfMeasCode == input.RunTimeUnitOfMeasCode ||
                    (this.RunTimeUnitOfMeasCode != null &&
                    this.RunTimeUnitOfMeasCode.Equals(input.RunTimeUnitOfMeasCode))
                ) && 
                (
                    this.RunTime == input.RunTime ||
                    (this.RunTime != null &&
                    this.RunTime.Equals(input.RunTime))
                ) && 
                (
                    this.RoutingLinkCode == input.RoutingLinkCode ||
                    (this.RoutingLinkCode != null &&
                    this.RoutingLinkCode.Equals(input.RoutingLinkCode))
                ) && 
                (
                    this.StandardTaskCode == input.StandardTaskCode ||
                    (this.StandardTaskCode != null &&
                    this.StandardTaskCode.Equals(input.StandardTaskCode))
                ) && 
                (
                    this.EosOutputQuantity == input.EosOutputQuantity ||
                    (this.EosOutputQuantity != null &&
                    this.EosOutputQuantity.Equals(input.EosOutputQuantity))
                ) && 
                (
                    this.EosOutputQuantityOriginal == input.EosOutputQuantityOriginal ||
                    (this.EosOutputQuantityOriginal != null &&
                    this.EosOutputQuantityOriginal.Equals(input.EosOutputQuantityOriginal))
                ) && 
                (
                    this.EosTotalRunTime == input.EosTotalRunTime ||
                    (this.EosTotalRunTime != null &&
                    this.EosTotalRunTime.Equals(input.EosTotalRunTime))
                ) && 
                (
                    this.EosTotalScrapQty == input.EosTotalScrapQty ||
                    (this.EosTotalScrapQty != null &&
                    this.EosTotalScrapQty.Equals(input.EosTotalScrapQty))
                ) && 
                (
                    this.EosTotalScrapQtyOriginal == input.EosTotalScrapQtyOriginal ||
                    (this.EosTotalScrapQtyOriginal != null &&
                    this.EosTotalScrapQtyOriginal.Equals(input.EosTotalScrapQtyOriginal))
                ) && 
                (
                    this.EosExpectedOutputQuantity == input.EosExpectedOutputQuantity ||
                    (this.EosExpectedOutputQuantity != null &&
                    this.EosExpectedOutputQuantity.Equals(input.EosExpectedOutputQuantity))
                ) && 
                (
                    this.EosExpectedOutputQuantityOriginal == input.EosExpectedOutputQuantityOriginal ||
                    (this.EosExpectedOutputQuantityOriginal != null &&
                    this.EosExpectedOutputQuantityOriginal.Equals(input.EosExpectedOutputQuantityOriginal))
                ) && 
                (
                    this.EosExpectedScrapQty == input.EosExpectedScrapQty ||
                    (this.EosExpectedScrapQty != null &&
                    this.EosExpectedScrapQty.Equals(input.EosExpectedScrapQty))
                ) && 
                (
                    this.EosExpectedScrapQtyOriginal == input.EosExpectedScrapQtyOriginal ||
                    (this.EosExpectedScrapQtyOriginal != null &&
                    this.EosExpectedScrapQtyOriginal.Equals(input.EosExpectedScrapQtyOriginal))
                ) && 
                (
                    this.EosProdOrderQty == input.EosProdOrderQty ||
                    (this.EosProdOrderQty != null &&
                    this.EosProdOrderQty.Equals(input.EosProdOrderQty))
                ) && 
                (
                    this.StaplingNo == input.StaplingNo ||
                    (this.StaplingNo != null &&
                    this.StaplingNo.Equals(input.StaplingNo))
                ) && 
                (
                    this.ReworkAvailable == input.ReworkAvailable ||
                    (this.ReworkAvailable != null &&
                    this.ReworkAvailable.Equals(input.ReworkAvailable))
                ) && 
                (
                    this.InspectionOrderExists == input.InspectionOrderExists ||
                    (this.InspectionOrderExists != null &&
                    this.InspectionOrderExists.Equals(input.InspectionOrderExists))
                ) && 
                (
                    this.InspectionOrderNo == input.InspectionOrderNo ||
                    (this.InspectionOrderNo != null &&
                    this.InspectionOrderNo.Equals(input.InspectionOrderNo))
                ) && 
                (
                    this.InspectionOrderSystemId == input.InspectionOrderSystemId ||
                    (this.InspectionOrderSystemId != null &&
                    this.InspectionOrderSystemId.Equals(input.InspectionOrderSystemId))
                ) && 
                (
                    this.AttachmentExists == input.AttachmentExists ||
                    (this.AttachmentExists != null &&
                    this.AttachmentExists.Equals(input.AttachmentExists))
                ) && 
                (
                    this.PanelId == input.PanelId ||
                    (this.PanelId != null &&
                    this.PanelId.Equals(input.PanelId))
                ) && 
                (
                    this.PanelSetupId == input.PanelSetupId ||
                    (this.PanelSetupId != null &&
                    this.PanelSetupId.Equals(input.PanelSetupId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.SourceType != null)
                    hashCode = hashCode * 59 + this.SourceType.GetHashCode();
                if (this.SourceTypeAsInt != null)
                    hashCode = hashCode * 59 + this.SourceTypeAsInt.GetHashCode();
                if (this.SourceTypeName != null)
                    hashCode = hashCode * 59 + this.SourceTypeName.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusAsInt != null)
                    hashCode = hashCode * 59 + this.StatusAsInt.GetHashCode();
                if (this.StatusName != null)
                    hashCode = hashCode * 59 + this.StatusName.GetHashCode();
                if (this.ProdOrderNo != null)
                    hashCode = hashCode * 59 + this.ProdOrderNo.GetHashCode();
                if (this.RoutingNo != null)
                    hashCode = hashCode * 59 + this.RoutingNo.GetHashCode();
                if (this.RoutingReferenceNo != null)
                    hashCode = hashCode * 59 + this.RoutingReferenceNo.GetHashCode();
                if (this.OperationNo != null)
                    hashCode = hashCode * 59 + this.OperationNo.GetHashCode();
                if (this.PreviousOperationNo != null)
                    hashCode = hashCode * 59 + this.PreviousOperationNo.GetHashCode();
                if (this.NextOperationNo != null)
                    hashCode = hashCode * 59 + this.NextOperationNo.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TypeAsInt != null)
                    hashCode = hashCode * 59 + this.TypeAsInt.GetHashCode();
                if (this.TypeName != null)
                    hashCode = hashCode * 59 + this.TypeName.GetHashCode();
                if (this.No != null)
                    hashCode = hashCode * 59 + this.No.GetHashCode();
                if (this.WorkCenterNo != null)
                    hashCode = hashCode * 59 + this.WorkCenterNo.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.LineDescription != null)
                    hashCode = hashCode * 59 + this.LineDescription.GetHashCode();
                if (this.LineDescription2 != null)
                    hashCode = hashCode * 59 + this.LineDescription2.GetHashCode();
                if (this.InputQuantity != null)
                    hashCode = hashCode * 59 + this.InputQuantity.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.RemainingQuantity != null)
                    hashCode = hashCode * 59 + this.RemainingQuantity.GetHashCode();
                if (this.StartingDateTime != null)
                    hashCode = hashCode * 59 + this.StartingDateTime.GetHashCode();
                if (this.EndingDateTime != null)
                    hashCode = hashCode * 59 + this.EndingDateTime.GetHashCode();
                if (this.WaitTimeUnitOfMeasCode != null)
                    hashCode = hashCode * 59 + this.WaitTimeUnitOfMeasCode.GetHashCode();
                if (this.WaitTime != null)
                    hashCode = hashCode * 59 + this.WaitTime.GetHashCode();
                if (this.SetupTimeUnitOfMeasCode != null)
                    hashCode = hashCode * 59 + this.SetupTimeUnitOfMeasCode.GetHashCode();
                if (this.SetupTime != null)
                    hashCode = hashCode * 59 + this.SetupTime.GetHashCode();
                if (this.RunTimeUnitOfMeasCode != null)
                    hashCode = hashCode * 59 + this.RunTimeUnitOfMeasCode.GetHashCode();
                if (this.RunTime != null)
                    hashCode = hashCode * 59 + this.RunTime.GetHashCode();
                if (this.RoutingLinkCode != null)
                    hashCode = hashCode * 59 + this.RoutingLinkCode.GetHashCode();
                if (this.StandardTaskCode != null)
                    hashCode = hashCode * 59 + this.StandardTaskCode.GetHashCode();
                if (this.EosOutputQuantity != null)
                    hashCode = hashCode * 59 + this.EosOutputQuantity.GetHashCode();
                if (this.EosOutputQuantityOriginal != null)
                    hashCode = hashCode * 59 + this.EosOutputQuantityOriginal.GetHashCode();
                if (this.EosTotalRunTime != null)
                    hashCode = hashCode * 59 + this.EosTotalRunTime.GetHashCode();
                if (this.EosTotalScrapQty != null)
                    hashCode = hashCode * 59 + this.EosTotalScrapQty.GetHashCode();
                if (this.EosTotalScrapQtyOriginal != null)
                    hashCode = hashCode * 59 + this.EosTotalScrapQtyOriginal.GetHashCode();
                if (this.EosExpectedOutputQuantity != null)
                    hashCode = hashCode * 59 + this.EosExpectedOutputQuantity.GetHashCode();
                if (this.EosExpectedOutputQuantityOriginal != null)
                    hashCode = hashCode * 59 + this.EosExpectedOutputQuantityOriginal.GetHashCode();
                if (this.EosExpectedScrapQty != null)
                    hashCode = hashCode * 59 + this.EosExpectedScrapQty.GetHashCode();
                if (this.EosExpectedScrapQtyOriginal != null)
                    hashCode = hashCode * 59 + this.EosExpectedScrapQtyOriginal.GetHashCode();
                if (this.EosProdOrderQty != null)
                    hashCode = hashCode * 59 + this.EosProdOrderQty.GetHashCode();
                if (this.StaplingNo != null)
                    hashCode = hashCode * 59 + this.StaplingNo.GetHashCode();
                if (this.ReworkAvailable != null)
                    hashCode = hashCode * 59 + this.ReworkAvailable.GetHashCode();
                if (this.InspectionOrderExists != null)
                    hashCode = hashCode * 59 + this.InspectionOrderExists.GetHashCode();
                if (this.InspectionOrderNo != null)
                    hashCode = hashCode * 59 + this.InspectionOrderNo.GetHashCode();
                if (this.InspectionOrderSystemId != null)
                    hashCode = hashCode * 59 + this.InspectionOrderSystemId.GetHashCode();
                if (this.AttachmentExists != null)
                    hashCode = hashCode * 59 + this.AttachmentExists.GetHashCode();
                if (this.PanelId != null)
                    hashCode = hashCode * 59 + this.PanelId.GetHashCode();
                if (this.PanelSetupId != null)
                    hashCode = hashCode * 59 + this.PanelSetupId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
