/* 
 * Power PLM Connector
 *
 * The custom connector used by Power PLM by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault1Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault1Value :  IEquatable<InlineResponseDefault1Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault1Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="activityInt">activityInt.</param>
        /// <param name="activityCaption">activityCaption.</param>
        /// <param name="actionCode">actionCode.</param>
        /// <param name="code">code.</param>
        /// <param name="captionValue">captionValue.</param>
        /// <param name="sequence">sequence.</param>
        /// <param name="typeInt">typeInt.</param>
        /// <param name="typeCaption">typeCaption.</param>
        /// <param name="mandatory">mandatory.</param>
        /// <param name="lookUpListCode">lookUpListCode.</param>
        /// <param name="fixedLookUpValues">fixedLookUpValues.</param>
        public InlineResponseDefault1Value(string odataEtag = default(string), string systemId = default(string), decimal? activityInt = default(decimal?), string activityCaption = default(string), string actionCode = default(string), string code = default(string), string captionValue = default(string), decimal? sequence = default(decimal?), decimal? typeInt = default(decimal?), string typeCaption = default(string), bool? mandatory = default(bool?), string lookUpListCode = default(string), bool? fixedLookUpValues = default(bool?))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.ActivityInt = activityInt;
            this.ActivityCaption = activityCaption;
            this.ActionCode = actionCode;
            this.Code = code;
            this.CaptionValue = captionValue;
            this.Sequence = sequence;
            this.TypeInt = typeInt;
            this.TypeCaption = typeCaption;
            this.Mandatory = mandatory;
            this.LookUpListCode = lookUpListCode;
            this.FixedLookUpValues = fixedLookUpValues;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// activityInt
        /// </summary>
        /// <value>activityInt</value>
        [DataMember(Name="activityInt", EmitDefaultValue=false)]
        public decimal? ActivityInt { get; set; }

        /// <summary>
        /// activityCaption
        /// </summary>
        /// <value>activityCaption</value>
        [DataMember(Name="activityCaption", EmitDefaultValue=false)]
        public string ActivityCaption { get; set; }

        /// <summary>
        /// actionCode
        /// </summary>
        /// <value>actionCode</value>
        [DataMember(Name="actionCode", EmitDefaultValue=false)]
        public string ActionCode { get; set; }

        /// <summary>
        /// code
        /// </summary>
        /// <value>code</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// captionValue
        /// </summary>
        /// <value>captionValue</value>
        [DataMember(Name="captionValue", EmitDefaultValue=false)]
        public string CaptionValue { get; set; }

        /// <summary>
        /// sequence
        /// </summary>
        /// <value>sequence</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public decimal? Sequence { get; set; }

        /// <summary>
        /// typeInt
        /// </summary>
        /// <value>typeInt</value>
        [DataMember(Name="typeInt", EmitDefaultValue=false)]
        public decimal? TypeInt { get; set; }

        /// <summary>
        /// typeCaption
        /// </summary>
        /// <value>typeCaption</value>
        [DataMember(Name="typeCaption", EmitDefaultValue=false)]
        public string TypeCaption { get; set; }

        /// <summary>
        /// mandatory
        /// </summary>
        /// <value>mandatory</value>
        [DataMember(Name="mandatory", EmitDefaultValue=false)]
        public bool? Mandatory { get; set; }

        /// <summary>
        /// lookUpListCode
        /// </summary>
        /// <value>lookUpListCode</value>
        [DataMember(Name="lookUpListCode", EmitDefaultValue=false)]
        public string LookUpListCode { get; set; }

        /// <summary>
        /// fixedLookUpValues
        /// </summary>
        /// <value>fixedLookUpValues</value>
        [DataMember(Name="fixedLookUpValues", EmitDefaultValue=false)]
        public bool? FixedLookUpValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault1Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  ActivityInt: ").Append(ActivityInt).Append("\n");
            sb.Append("  ActivityCaption: ").Append(ActivityCaption).Append("\n");
            sb.Append("  ActionCode: ").Append(ActionCode).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CaptionValue: ").Append(CaptionValue).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  TypeInt: ").Append(TypeInt).Append("\n");
            sb.Append("  TypeCaption: ").Append(TypeCaption).Append("\n");
            sb.Append("  Mandatory: ").Append(Mandatory).Append("\n");
            sb.Append("  LookUpListCode: ").Append(LookUpListCode).Append("\n");
            sb.Append("  FixedLookUpValues: ").Append(FixedLookUpValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault1Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault1Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault1Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault1Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.ActivityInt == input.ActivityInt ||
                    (this.ActivityInt != null &&
                    this.ActivityInt.Equals(input.ActivityInt))
                ) && 
                (
                    this.ActivityCaption == input.ActivityCaption ||
                    (this.ActivityCaption != null &&
                    this.ActivityCaption.Equals(input.ActivityCaption))
                ) && 
                (
                    this.ActionCode == input.ActionCode ||
                    (this.ActionCode != null &&
                    this.ActionCode.Equals(input.ActionCode))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.CaptionValue == input.CaptionValue ||
                    (this.CaptionValue != null &&
                    this.CaptionValue.Equals(input.CaptionValue))
                ) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && 
                (
                    this.TypeInt == input.TypeInt ||
                    (this.TypeInt != null &&
                    this.TypeInt.Equals(input.TypeInt))
                ) && 
                (
                    this.TypeCaption == input.TypeCaption ||
                    (this.TypeCaption != null &&
                    this.TypeCaption.Equals(input.TypeCaption))
                ) && 
                (
                    this.Mandatory == input.Mandatory ||
                    (this.Mandatory != null &&
                    this.Mandatory.Equals(input.Mandatory))
                ) && 
                (
                    this.LookUpListCode == input.LookUpListCode ||
                    (this.LookUpListCode != null &&
                    this.LookUpListCode.Equals(input.LookUpListCode))
                ) && 
                (
                    this.FixedLookUpValues == input.FixedLookUpValues ||
                    (this.FixedLookUpValues != null &&
                    this.FixedLookUpValues.Equals(input.FixedLookUpValues))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.ActivityInt != null)
                    hashCode = hashCode * 59 + this.ActivityInt.GetHashCode();
                if (this.ActivityCaption != null)
                    hashCode = hashCode * 59 + this.ActivityCaption.GetHashCode();
                if (this.ActionCode != null)
                    hashCode = hashCode * 59 + this.ActionCode.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.CaptionValue != null)
                    hashCode = hashCode * 59 + this.CaptionValue.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.TypeInt != null)
                    hashCode = hashCode * 59 + this.TypeInt.GetHashCode();
                if (this.TypeCaption != null)
                    hashCode = hashCode * 59 + this.TypeCaption.GetHashCode();
                if (this.Mandatory != null)
                    hashCode = hashCode * 59 + this.Mandatory.GetHashCode();
                if (this.LookUpListCode != null)
                    hashCode = hashCode * 59 + this.LookUpListCode.GetHashCode();
                if (this.FixedLookUpValues != null)
                    hashCode = hashCode * 59 + this.FixedLookUpValues.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
