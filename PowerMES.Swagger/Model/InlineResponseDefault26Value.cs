/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault26Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault26Value :  IEquatable<InlineResponseDefault26Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault26Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="panelNo">panelNo.</param>
        /// <param name="sequenceNo">sequenceNo.</param>
        /// <param name="type">type.</param>
        /// <param name="typeAsInt">typeAsInt.</param>
        /// <param name="typeName">typeName.</param>
        /// <param name="no">no.</param>
        /// <param name="workCenterId">workCenterId.</param>
        /// <param name="workCenterNo">workCenterNo.</param>
        /// <param name="capacityId">capacityId.</param>
        /// <param name="freeAccess">freeAccess.</param>
        /// <param name="capacityStatus">capacityStatus.</param>
        /// <param name="capacityStatusAsInt">capacityStatusAsInt.</param>
        /// <param name="capacityStatusName">capacityStatusName.</param>
        /// <param name="ioTHubName">ioTHubName.</param>
        /// <param name="ioTDeviceId">ioTDeviceId.</param>
        /// <param name="resourceStop">resourceStop.</param>
        /// <param name="resourceStopAvailable">resourceStopAvailable.</param>
        /// <param name="productionResponsibles">productionResponsibles.</param>
        /// <param name="qualityResponsibles">qualityResponsibles.</param>
        /// <param name="linkId">linkId.</param>
        /// <param name="panelId">panelId.</param>
        /// <param name="handlingUnitManagement">handlingUnitManagement.</param>
        /// <param name="packagingMaterialManagement">packagingMaterialManagement.</param>
        /// <param name="disableOutputQuantity">disableOutputQuantity.</param>
        /// <param name="focusOnSearch">focusOnSearch.</param>
        /// <param name="automaticBarcodePrompt">automaticBarcodePrompt.</param>
        /// <param name="navigateToRoutingDetails">navigateToRoutingDetails.</param>
        public InlineResponseDefault26Value(string odataEtag = default(string), string systemId = default(string), string panelNo = default(string), decimal? sequenceNo = default(decimal?), string type = default(string), decimal? typeAsInt = default(decimal?), string typeName = default(string), string no = default(string), string workCenterId = default(string), string workCenterNo = default(string), string capacityId = default(string), bool? freeAccess = default(bool?), string capacityStatus = default(string), decimal? capacityStatusAsInt = default(decimal?), string capacityStatusName = default(string), string ioTHubName = default(string), string ioTDeviceId = default(string), bool? resourceStop = default(bool?), bool? resourceStopAvailable = default(bool?), decimal? productionResponsibles = default(decimal?), decimal? qualityResponsibles = default(decimal?), string linkId = default(string), string panelId = default(string), bool? handlingUnitManagement = default(bool?), bool? packagingMaterialManagement = default(bool?), bool? disableOutputQuantity = default(bool?), bool? focusOnSearch = default(bool?), bool? automaticBarcodePrompt = default(bool?), bool? navigateToRoutingDetails = default(bool?))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.PanelNo = panelNo;
            this.SequenceNo = sequenceNo;
            this.Type = type;
            this.TypeAsInt = typeAsInt;
            this.TypeName = typeName;
            this.No = no;
            this.WorkCenterId = workCenterId;
            this.WorkCenterNo = workCenterNo;
            this.CapacityId = capacityId;
            this.FreeAccess = freeAccess;
            this.CapacityStatus = capacityStatus;
            this.CapacityStatusAsInt = capacityStatusAsInt;
            this.CapacityStatusName = capacityStatusName;
            this.IoTHubName = ioTHubName;
            this.IoTDeviceId = ioTDeviceId;
            this.ResourceStop = resourceStop;
            this.ResourceStopAvailable = resourceStopAvailable;
            this.ProductionResponsibles = productionResponsibles;
            this.QualityResponsibles = qualityResponsibles;
            this.LinkId = linkId;
            this.PanelId = panelId;
            this.HandlingUnitManagement = handlingUnitManagement;
            this.PackagingMaterialManagement = packagingMaterialManagement;
            this.DisableOutputQuantity = disableOutputQuantity;
            this.FocusOnSearch = focusOnSearch;
            this.AutomaticBarcodePrompt = automaticBarcodePrompt;
            this.NavigateToRoutingDetails = navigateToRoutingDetails;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// panelNo
        /// </summary>
        /// <value>panelNo</value>
        [DataMember(Name="panelNo", EmitDefaultValue=false)]
        public string PanelNo { get; set; }

        /// <summary>
        /// sequenceNo
        /// </summary>
        /// <value>sequenceNo</value>
        [DataMember(Name="sequenceNo", EmitDefaultValue=false)]
        public decimal? SequenceNo { get; set; }

        /// <summary>
        /// type
        /// </summary>
        /// <value>type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// typeAsInt
        /// </summary>
        /// <value>typeAsInt</value>
        [DataMember(Name="typeAsInt", EmitDefaultValue=false)]
        public decimal? TypeAsInt { get; set; }

        /// <summary>
        /// typeName
        /// </summary>
        /// <value>typeName</value>
        [DataMember(Name="typeName", EmitDefaultValue=false)]
        public string TypeName { get; set; }

        /// <summary>
        /// no
        /// </summary>
        /// <value>no</value>
        [DataMember(Name="no", EmitDefaultValue=false)]
        public string No { get; set; }

        /// <summary>
        /// workCenterId
        /// </summary>
        /// <value>workCenterId</value>
        [DataMember(Name="workCenterId", EmitDefaultValue=false)]
        public string WorkCenterId { get; set; }

        /// <summary>
        /// workCenterNo
        /// </summary>
        /// <value>workCenterNo</value>
        [DataMember(Name="workCenterNo", EmitDefaultValue=false)]
        public string WorkCenterNo { get; set; }

        /// <summary>
        /// capacityId
        /// </summary>
        /// <value>capacityId</value>
        [DataMember(Name="capacityId", EmitDefaultValue=false)]
        public string CapacityId { get; set; }

        /// <summary>
        /// freeAccess
        /// </summary>
        /// <value>freeAccess</value>
        [DataMember(Name="freeAccess", EmitDefaultValue=false)]
        public bool? FreeAccess { get; set; }

        /// <summary>
        /// capacityStatus
        /// </summary>
        /// <value>capacityStatus</value>
        [DataMember(Name="capacityStatus", EmitDefaultValue=false)]
        public string CapacityStatus { get; set; }

        /// <summary>
        /// capacityStatusAsInt
        /// </summary>
        /// <value>capacityStatusAsInt</value>
        [DataMember(Name="capacityStatusAsInt", EmitDefaultValue=false)]
        public decimal? CapacityStatusAsInt { get; set; }

        /// <summary>
        /// capacityStatusName
        /// </summary>
        /// <value>capacityStatusName</value>
        [DataMember(Name="capacityStatusName", EmitDefaultValue=false)]
        public string CapacityStatusName { get; set; }

        /// <summary>
        /// ioTHubName
        /// </summary>
        /// <value>ioTHubName</value>
        [DataMember(Name="ioTHubName", EmitDefaultValue=false)]
        public string IoTHubName { get; set; }

        /// <summary>
        /// ioTDeviceId
        /// </summary>
        /// <value>ioTDeviceId</value>
        [DataMember(Name="ioTDeviceId", EmitDefaultValue=false)]
        public string IoTDeviceId { get; set; }

        /// <summary>
        /// resourceStop
        /// </summary>
        /// <value>resourceStop</value>
        [DataMember(Name="resourceStop", EmitDefaultValue=false)]
        public bool? ResourceStop { get; set; }

        /// <summary>
        /// resourceStopAvailable
        /// </summary>
        /// <value>resourceStopAvailable</value>
        [DataMember(Name="resourceStopAvailable", EmitDefaultValue=false)]
        public bool? ResourceStopAvailable { get; set; }

        /// <summary>
        /// productionResponsibles
        /// </summary>
        /// <value>productionResponsibles</value>
        [DataMember(Name="productionResponsibles", EmitDefaultValue=false)]
        public decimal? ProductionResponsibles { get; set; }

        /// <summary>
        /// qualityResponsibles
        /// </summary>
        /// <value>qualityResponsibles</value>
        [DataMember(Name="qualityResponsibles", EmitDefaultValue=false)]
        public decimal? QualityResponsibles { get; set; }

        /// <summary>
        /// linkId
        /// </summary>
        /// <value>linkId</value>
        [DataMember(Name="linkId", EmitDefaultValue=false)]
        public string LinkId { get; set; }

        /// <summary>
        /// panelId
        /// </summary>
        /// <value>panelId</value>
        [DataMember(Name="panelId", EmitDefaultValue=false)]
        public string PanelId { get; set; }

        /// <summary>
        /// handlingUnitManagement
        /// </summary>
        /// <value>handlingUnitManagement</value>
        [DataMember(Name="handlingUnitManagement", EmitDefaultValue=false)]
        public bool? HandlingUnitManagement { get; set; }

        /// <summary>
        /// packagingMaterialManagement
        /// </summary>
        /// <value>packagingMaterialManagement</value>
        [DataMember(Name="packagingMaterialManagement", EmitDefaultValue=false)]
        public bool? PackagingMaterialManagement { get; set; }

        /// <summary>
        /// disableOutputQuantity
        /// </summary>
        /// <value>disableOutputQuantity</value>
        [DataMember(Name="disableOutputQuantity", EmitDefaultValue=false)]
        public bool? DisableOutputQuantity { get; set; }

        /// <summary>
        /// focusOnSearch
        /// </summary>
        /// <value>focusOnSearch</value>
        [DataMember(Name="focusOnSearch", EmitDefaultValue=false)]
        public bool? FocusOnSearch { get; set; }

        /// <summary>
        /// automaticBarcodePrompt
        /// </summary>
        /// <value>automaticBarcodePrompt</value>
        [DataMember(Name="automaticBarcodePrompt", EmitDefaultValue=false)]
        public bool? AutomaticBarcodePrompt { get; set; }

        /// <summary>
        /// navigateToRoutingDetails
        /// </summary>
        /// <value>navigateToRoutingDetails</value>
        [DataMember(Name="navigateToRoutingDetails", EmitDefaultValue=false)]
        public bool? NavigateToRoutingDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault26Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  PanelNo: ").Append(PanelNo).Append("\n");
            sb.Append("  SequenceNo: ").Append(SequenceNo).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeAsInt: ").Append(TypeAsInt).Append("\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("  No: ").Append(No).Append("\n");
            sb.Append("  WorkCenterId: ").Append(WorkCenterId).Append("\n");
            sb.Append("  WorkCenterNo: ").Append(WorkCenterNo).Append("\n");
            sb.Append("  CapacityId: ").Append(CapacityId).Append("\n");
            sb.Append("  FreeAccess: ").Append(FreeAccess).Append("\n");
            sb.Append("  CapacityStatus: ").Append(CapacityStatus).Append("\n");
            sb.Append("  CapacityStatusAsInt: ").Append(CapacityStatusAsInt).Append("\n");
            sb.Append("  CapacityStatusName: ").Append(CapacityStatusName).Append("\n");
            sb.Append("  IoTHubName: ").Append(IoTHubName).Append("\n");
            sb.Append("  IoTDeviceId: ").Append(IoTDeviceId).Append("\n");
            sb.Append("  ResourceStop: ").Append(ResourceStop).Append("\n");
            sb.Append("  ResourceStopAvailable: ").Append(ResourceStopAvailable).Append("\n");
            sb.Append("  ProductionResponsibles: ").Append(ProductionResponsibles).Append("\n");
            sb.Append("  QualityResponsibles: ").Append(QualityResponsibles).Append("\n");
            sb.Append("  LinkId: ").Append(LinkId).Append("\n");
            sb.Append("  PanelId: ").Append(PanelId).Append("\n");
            sb.Append("  HandlingUnitManagement: ").Append(HandlingUnitManagement).Append("\n");
            sb.Append("  PackagingMaterialManagement: ").Append(PackagingMaterialManagement).Append("\n");
            sb.Append("  DisableOutputQuantity: ").Append(DisableOutputQuantity).Append("\n");
            sb.Append("  FocusOnSearch: ").Append(FocusOnSearch).Append("\n");
            sb.Append("  AutomaticBarcodePrompt: ").Append(AutomaticBarcodePrompt).Append("\n");
            sb.Append("  NavigateToRoutingDetails: ").Append(NavigateToRoutingDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault26Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault26Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault26Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault26Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.PanelNo == input.PanelNo ||
                    (this.PanelNo != null &&
                    this.PanelNo.Equals(input.PanelNo))
                ) && 
                (
                    this.SequenceNo == input.SequenceNo ||
                    (this.SequenceNo != null &&
                    this.SequenceNo.Equals(input.SequenceNo))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TypeAsInt == input.TypeAsInt ||
                    (this.TypeAsInt != null &&
                    this.TypeAsInt.Equals(input.TypeAsInt))
                ) && 
                (
                    this.TypeName == input.TypeName ||
                    (this.TypeName != null &&
                    this.TypeName.Equals(input.TypeName))
                ) && 
                (
                    this.No == input.No ||
                    (this.No != null &&
                    this.No.Equals(input.No))
                ) && 
                (
                    this.WorkCenterId == input.WorkCenterId ||
                    (this.WorkCenterId != null &&
                    this.WorkCenterId.Equals(input.WorkCenterId))
                ) && 
                (
                    this.WorkCenterNo == input.WorkCenterNo ||
                    (this.WorkCenterNo != null &&
                    this.WorkCenterNo.Equals(input.WorkCenterNo))
                ) && 
                (
                    this.CapacityId == input.CapacityId ||
                    (this.CapacityId != null &&
                    this.CapacityId.Equals(input.CapacityId))
                ) && 
                (
                    this.FreeAccess == input.FreeAccess ||
                    (this.FreeAccess != null &&
                    this.FreeAccess.Equals(input.FreeAccess))
                ) && 
                (
                    this.CapacityStatus == input.CapacityStatus ||
                    (this.CapacityStatus != null &&
                    this.CapacityStatus.Equals(input.CapacityStatus))
                ) && 
                (
                    this.CapacityStatusAsInt == input.CapacityStatusAsInt ||
                    (this.CapacityStatusAsInt != null &&
                    this.CapacityStatusAsInt.Equals(input.CapacityStatusAsInt))
                ) && 
                (
                    this.CapacityStatusName == input.CapacityStatusName ||
                    (this.CapacityStatusName != null &&
                    this.CapacityStatusName.Equals(input.CapacityStatusName))
                ) && 
                (
                    this.IoTHubName == input.IoTHubName ||
                    (this.IoTHubName != null &&
                    this.IoTHubName.Equals(input.IoTHubName))
                ) && 
                (
                    this.IoTDeviceId == input.IoTDeviceId ||
                    (this.IoTDeviceId != null &&
                    this.IoTDeviceId.Equals(input.IoTDeviceId))
                ) && 
                (
                    this.ResourceStop == input.ResourceStop ||
                    (this.ResourceStop != null &&
                    this.ResourceStop.Equals(input.ResourceStop))
                ) && 
                (
                    this.ResourceStopAvailable == input.ResourceStopAvailable ||
                    (this.ResourceStopAvailable != null &&
                    this.ResourceStopAvailable.Equals(input.ResourceStopAvailable))
                ) && 
                (
                    this.ProductionResponsibles == input.ProductionResponsibles ||
                    (this.ProductionResponsibles != null &&
                    this.ProductionResponsibles.Equals(input.ProductionResponsibles))
                ) && 
                (
                    this.QualityResponsibles == input.QualityResponsibles ||
                    (this.QualityResponsibles != null &&
                    this.QualityResponsibles.Equals(input.QualityResponsibles))
                ) && 
                (
                    this.LinkId == input.LinkId ||
                    (this.LinkId != null &&
                    this.LinkId.Equals(input.LinkId))
                ) && 
                (
                    this.PanelId == input.PanelId ||
                    (this.PanelId != null &&
                    this.PanelId.Equals(input.PanelId))
                ) && 
                (
                    this.HandlingUnitManagement == input.HandlingUnitManagement ||
                    (this.HandlingUnitManagement != null &&
                    this.HandlingUnitManagement.Equals(input.HandlingUnitManagement))
                ) && 
                (
                    this.PackagingMaterialManagement == input.PackagingMaterialManagement ||
                    (this.PackagingMaterialManagement != null &&
                    this.PackagingMaterialManagement.Equals(input.PackagingMaterialManagement))
                ) && 
                (
                    this.DisableOutputQuantity == input.DisableOutputQuantity ||
                    (this.DisableOutputQuantity != null &&
                    this.DisableOutputQuantity.Equals(input.DisableOutputQuantity))
                ) && 
                (
                    this.FocusOnSearch == input.FocusOnSearch ||
                    (this.FocusOnSearch != null &&
                    this.FocusOnSearch.Equals(input.FocusOnSearch))
                ) && 
                (
                    this.AutomaticBarcodePrompt == input.AutomaticBarcodePrompt ||
                    (this.AutomaticBarcodePrompt != null &&
                    this.AutomaticBarcodePrompt.Equals(input.AutomaticBarcodePrompt))
                ) && 
                (
                    this.NavigateToRoutingDetails == input.NavigateToRoutingDetails ||
                    (this.NavigateToRoutingDetails != null &&
                    this.NavigateToRoutingDetails.Equals(input.NavigateToRoutingDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.PanelNo != null)
                    hashCode = hashCode * 59 + this.PanelNo.GetHashCode();
                if (this.SequenceNo != null)
                    hashCode = hashCode * 59 + this.SequenceNo.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TypeAsInt != null)
                    hashCode = hashCode * 59 + this.TypeAsInt.GetHashCode();
                if (this.TypeName != null)
                    hashCode = hashCode * 59 + this.TypeName.GetHashCode();
                if (this.No != null)
                    hashCode = hashCode * 59 + this.No.GetHashCode();
                if (this.WorkCenterId != null)
                    hashCode = hashCode * 59 + this.WorkCenterId.GetHashCode();
                if (this.WorkCenterNo != null)
                    hashCode = hashCode * 59 + this.WorkCenterNo.GetHashCode();
                if (this.CapacityId != null)
                    hashCode = hashCode * 59 + this.CapacityId.GetHashCode();
                if (this.FreeAccess != null)
                    hashCode = hashCode * 59 + this.FreeAccess.GetHashCode();
                if (this.CapacityStatus != null)
                    hashCode = hashCode * 59 + this.CapacityStatus.GetHashCode();
                if (this.CapacityStatusAsInt != null)
                    hashCode = hashCode * 59 + this.CapacityStatusAsInt.GetHashCode();
                if (this.CapacityStatusName != null)
                    hashCode = hashCode * 59 + this.CapacityStatusName.GetHashCode();
                if (this.IoTHubName != null)
                    hashCode = hashCode * 59 + this.IoTHubName.GetHashCode();
                if (this.IoTDeviceId != null)
                    hashCode = hashCode * 59 + this.IoTDeviceId.GetHashCode();
                if (this.ResourceStop != null)
                    hashCode = hashCode * 59 + this.ResourceStop.GetHashCode();
                if (this.ResourceStopAvailable != null)
                    hashCode = hashCode * 59 + this.ResourceStopAvailable.GetHashCode();
                if (this.ProductionResponsibles != null)
                    hashCode = hashCode * 59 + this.ProductionResponsibles.GetHashCode();
                if (this.QualityResponsibles != null)
                    hashCode = hashCode * 59 + this.QualityResponsibles.GetHashCode();
                if (this.LinkId != null)
                    hashCode = hashCode * 59 + this.LinkId.GetHashCode();
                if (this.PanelId != null)
                    hashCode = hashCode * 59 + this.PanelId.GetHashCode();
                if (this.HandlingUnitManagement != null)
                    hashCode = hashCode * 59 + this.HandlingUnitManagement.GetHashCode();
                if (this.PackagingMaterialManagement != null)
                    hashCode = hashCode * 59 + this.PackagingMaterialManagement.GetHashCode();
                if (this.DisableOutputQuantity != null)
                    hashCode = hashCode * 59 + this.DisableOutputQuantity.GetHashCode();
                if (this.FocusOnSearch != null)
                    hashCode = hashCode * 59 + this.FocusOnSearch.GetHashCode();
                if (this.AutomaticBarcodePrompt != null)
                    hashCode = hashCode * 59 + this.AutomaticBarcodePrompt.GetHashCode();
                if (this.NavigateToRoutingDetails != null)
                    hashCode = hashCode * 59 + this.NavigateToRoutingDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
