/* 
 * Power PLM Connector
 *
 * The custom connector used by Power PLM by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault9Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault9Value :  IEquatable<InlineResponseDefault9Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault9Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="workRequestNo">workRequestNo.</param>
        /// <param name="maintenancePointNo">maintenancePointNo.</param>
        /// <param name="machineNo">machineNo.</param>
        /// <param name="type">type.</param>
        /// <param name="no">no.</param>
        /// <param name="description">description.</param>
        /// <param name="description2">description2.</param>
        /// <param name="unitOfMeasureCode">unitOfMeasureCode.</param>
        /// <param name="capUnitOfMeasureCode">capUnitOfMeasureCode.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="suggestedQuantity">suggestedQuantity.</param>
        /// <param name="locationCode">locationCode.</param>
        /// <param name="binCode">binCode.</param>
        /// <param name="variantCode">variantCode.</param>
        public InlineResponseDefault9Value(string odataEtag = default(string), string systemId = default(string), string workRequestNo = default(string), string maintenancePointNo = default(string), string machineNo = default(string), string type = default(string), string no = default(string), string description = default(string), string description2 = default(string), string unitOfMeasureCode = default(string), string capUnitOfMeasureCode = default(string), decimal? quantity = default(decimal?), decimal? suggestedQuantity = default(decimal?), string locationCode = default(string), string binCode = default(string), string variantCode = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.WorkRequestNo = workRequestNo;
            this.MaintenancePointNo = maintenancePointNo;
            this.MachineNo = machineNo;
            this.Type = type;
            this.No = no;
            this.Description = description;
            this.Description2 = description2;
            this.UnitOfMeasureCode = unitOfMeasureCode;
            this.CapUnitOfMeasureCode = capUnitOfMeasureCode;
            this.Quantity = quantity;
            this.SuggestedQuantity = suggestedQuantity;
            this.LocationCode = locationCode;
            this.BinCode = binCode;
            this.VariantCode = variantCode;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// workRequestNo
        /// </summary>
        /// <value>workRequestNo</value>
        [DataMember(Name="workRequestNo", EmitDefaultValue=false)]
        public string WorkRequestNo { get; set; }

        /// <summary>
        /// maintenancePointNo
        /// </summary>
        /// <value>maintenancePointNo</value>
        [DataMember(Name="maintenancePointNo", EmitDefaultValue=false)]
        public string MaintenancePointNo { get; set; }

        /// <summary>
        /// machineNo
        /// </summary>
        /// <value>machineNo</value>
        [DataMember(Name="machineNo", EmitDefaultValue=false)]
        public string MachineNo { get; set; }

        /// <summary>
        /// type
        /// </summary>
        /// <value>type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// no
        /// </summary>
        /// <value>no</value>
        [DataMember(Name="no", EmitDefaultValue=false)]
        public string No { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// description2
        /// </summary>
        /// <value>description2</value>
        [DataMember(Name="description2", EmitDefaultValue=false)]
        public string Description2 { get; set; }

        /// <summary>
        /// unitOfMeasureCode
        /// </summary>
        /// <value>unitOfMeasureCode</value>
        [DataMember(Name="unitOfMeasureCode", EmitDefaultValue=false)]
        public string UnitOfMeasureCode { get; set; }

        /// <summary>
        /// capUnitOfMeasureCode
        /// </summary>
        /// <value>capUnitOfMeasureCode</value>
        [DataMember(Name="capUnitOfMeasureCode", EmitDefaultValue=false)]
        public string CapUnitOfMeasureCode { get; set; }

        /// <summary>
        /// quantity
        /// </summary>
        /// <value>quantity</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// suggestedQuantity
        /// </summary>
        /// <value>suggestedQuantity</value>
        [DataMember(Name="suggestedQuantity", EmitDefaultValue=false)]
        public decimal? SuggestedQuantity { get; set; }

        /// <summary>
        /// locationCode
        /// </summary>
        /// <value>locationCode</value>
        [DataMember(Name="locationCode", EmitDefaultValue=false)]
        public string LocationCode { get; set; }

        /// <summary>
        /// binCode
        /// </summary>
        /// <value>binCode</value>
        [DataMember(Name="binCode", EmitDefaultValue=false)]
        public string BinCode { get; set; }

        /// <summary>
        /// variantCode
        /// </summary>
        /// <value>variantCode</value>
        [DataMember(Name="variantCode", EmitDefaultValue=false)]
        public string VariantCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault9Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  WorkRequestNo: ").Append(WorkRequestNo).Append("\n");
            sb.Append("  MaintenancePointNo: ").Append(MaintenancePointNo).Append("\n");
            sb.Append("  MachineNo: ").Append(MachineNo).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  No: ").Append(No).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Description2: ").Append(Description2).Append("\n");
            sb.Append("  UnitOfMeasureCode: ").Append(UnitOfMeasureCode).Append("\n");
            sb.Append("  CapUnitOfMeasureCode: ").Append(CapUnitOfMeasureCode).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SuggestedQuantity: ").Append(SuggestedQuantity).Append("\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  BinCode: ").Append(BinCode).Append("\n");
            sb.Append("  VariantCode: ").Append(VariantCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault9Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault9Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault9Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault9Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.WorkRequestNo == input.WorkRequestNo ||
                    (this.WorkRequestNo != null &&
                    this.WorkRequestNo.Equals(input.WorkRequestNo))
                ) && 
                (
                    this.MaintenancePointNo == input.MaintenancePointNo ||
                    (this.MaintenancePointNo != null &&
                    this.MaintenancePointNo.Equals(input.MaintenancePointNo))
                ) && 
                (
                    this.MachineNo == input.MachineNo ||
                    (this.MachineNo != null &&
                    this.MachineNo.Equals(input.MachineNo))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.No == input.No ||
                    (this.No != null &&
                    this.No.Equals(input.No))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Description2 == input.Description2 ||
                    (this.Description2 != null &&
                    this.Description2.Equals(input.Description2))
                ) && 
                (
                    this.UnitOfMeasureCode == input.UnitOfMeasureCode ||
                    (this.UnitOfMeasureCode != null &&
                    this.UnitOfMeasureCode.Equals(input.UnitOfMeasureCode))
                ) && 
                (
                    this.CapUnitOfMeasureCode == input.CapUnitOfMeasureCode ||
                    (this.CapUnitOfMeasureCode != null &&
                    this.CapUnitOfMeasureCode.Equals(input.CapUnitOfMeasureCode))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.SuggestedQuantity == input.SuggestedQuantity ||
                    (this.SuggestedQuantity != null &&
                    this.SuggestedQuantity.Equals(input.SuggestedQuantity))
                ) && 
                (
                    this.LocationCode == input.LocationCode ||
                    (this.LocationCode != null &&
                    this.LocationCode.Equals(input.LocationCode))
                ) && 
                (
                    this.BinCode == input.BinCode ||
                    (this.BinCode != null &&
                    this.BinCode.Equals(input.BinCode))
                ) && 
                (
                    this.VariantCode == input.VariantCode ||
                    (this.VariantCode != null &&
                    this.VariantCode.Equals(input.VariantCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.WorkRequestNo != null)
                    hashCode = hashCode * 59 + this.WorkRequestNo.GetHashCode();
                if (this.MaintenancePointNo != null)
                    hashCode = hashCode * 59 + this.MaintenancePointNo.GetHashCode();
                if (this.MachineNo != null)
                    hashCode = hashCode * 59 + this.MachineNo.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.No != null)
                    hashCode = hashCode * 59 + this.No.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Description2 != null)
                    hashCode = hashCode * 59 + this.Description2.GetHashCode();
                if (this.UnitOfMeasureCode != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasureCode.GetHashCode();
                if (this.CapUnitOfMeasureCode != null)
                    hashCode = hashCode * 59 + this.CapUnitOfMeasureCode.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.SuggestedQuantity != null)
                    hashCode = hashCode * 59 + this.SuggestedQuantity.GetHashCode();
                if (this.LocationCode != null)
                    hashCode = hashCode * 59 + this.LocationCode.GetHashCode();
                if (this.BinCode != null)
                    hashCode = hashCode * 59 + this.BinCode.GetHashCode();
                if (this.VariantCode != null)
                    hashCode = hashCode * 59 + this.VariantCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
