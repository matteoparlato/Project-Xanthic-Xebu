/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault20Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault20Value :  IEquatable<InlineResponseDefault20Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault20Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="entryId">entryId.</param>
        /// <param name="panelNo">panelNo.</param>
        /// <param name="type">type.</param>
        /// <param name="typeAsInt">typeAsInt.</param>
        /// <param name="typeName">typeName.</param>
        /// <param name="no">no.</param>
        /// <param name="notificationType">notificationType.</param>
        /// <param name="notificationTypeAsInt">notificationTypeAsInt.</param>
        /// <param name="notificationTypeName">notificationTypeName.</param>
        /// <param name="notificationMessage">notificationMessage.</param>
        /// <param name="read">read.</param>
        public InlineResponseDefault20Value(string odataEtag = default(string), string systemId = default(string), string entryId = default(string), string panelNo = default(string), string type = default(string), decimal? typeAsInt = default(decimal?), string typeName = default(string), string no = default(string), string notificationType = default(string), decimal? notificationTypeAsInt = default(decimal?), string notificationTypeName = default(string), string notificationMessage = default(string), bool? read = default(bool?))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.EntryId = entryId;
            this.PanelNo = panelNo;
            this.Type = type;
            this.TypeAsInt = typeAsInt;
            this.TypeName = typeName;
            this.No = no;
            this.NotificationType = notificationType;
            this.NotificationTypeAsInt = notificationTypeAsInt;
            this.NotificationTypeName = notificationTypeName;
            this.NotificationMessage = notificationMessage;
            this.Read = read;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// entryId
        /// </summary>
        /// <value>entryId</value>
        [DataMember(Name="entryId", EmitDefaultValue=false)]
        public string EntryId { get; set; }

        /// <summary>
        /// panelNo
        /// </summary>
        /// <value>panelNo</value>
        [DataMember(Name="panelNo", EmitDefaultValue=false)]
        public string PanelNo { get; set; }

        /// <summary>
        /// type
        /// </summary>
        /// <value>type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// typeAsInt
        /// </summary>
        /// <value>typeAsInt</value>
        [DataMember(Name="typeAsInt", EmitDefaultValue=false)]
        public decimal? TypeAsInt { get; set; }

        /// <summary>
        /// typeName
        /// </summary>
        /// <value>typeName</value>
        [DataMember(Name="typeName", EmitDefaultValue=false)]
        public string TypeName { get; set; }

        /// <summary>
        /// no
        /// </summary>
        /// <value>no</value>
        [DataMember(Name="no", EmitDefaultValue=false)]
        public string No { get; set; }

        /// <summary>
        /// notificationType
        /// </summary>
        /// <value>notificationType</value>
        [DataMember(Name="notificationType", EmitDefaultValue=false)]
        public string NotificationType { get; set; }

        /// <summary>
        /// notificationTypeAsInt
        /// </summary>
        /// <value>notificationTypeAsInt</value>
        [DataMember(Name="notificationTypeAsInt", EmitDefaultValue=false)]
        public decimal? NotificationTypeAsInt { get; set; }

        /// <summary>
        /// notificationTypeName
        /// </summary>
        /// <value>notificationTypeName</value>
        [DataMember(Name="notificationTypeName", EmitDefaultValue=false)]
        public string NotificationTypeName { get; set; }

        /// <summary>
        /// notificationMessage
        /// </summary>
        /// <value>notificationMessage</value>
        [DataMember(Name="notificationMessage", EmitDefaultValue=false)]
        public string NotificationMessage { get; set; }

        /// <summary>
        /// read
        /// </summary>
        /// <value>read</value>
        [DataMember(Name="read", EmitDefaultValue=false)]
        public bool? Read { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault20Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  EntryId: ").Append(EntryId).Append("\n");
            sb.Append("  PanelNo: ").Append(PanelNo).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeAsInt: ").Append(TypeAsInt).Append("\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("  No: ").Append(No).Append("\n");
            sb.Append("  NotificationType: ").Append(NotificationType).Append("\n");
            sb.Append("  NotificationTypeAsInt: ").Append(NotificationTypeAsInt).Append("\n");
            sb.Append("  NotificationTypeName: ").Append(NotificationTypeName).Append("\n");
            sb.Append("  NotificationMessage: ").Append(NotificationMessage).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault20Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault20Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault20Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault20Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.EntryId == input.EntryId ||
                    (this.EntryId != null &&
                    this.EntryId.Equals(input.EntryId))
                ) && 
                (
                    this.PanelNo == input.PanelNo ||
                    (this.PanelNo != null &&
                    this.PanelNo.Equals(input.PanelNo))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TypeAsInt == input.TypeAsInt ||
                    (this.TypeAsInt != null &&
                    this.TypeAsInt.Equals(input.TypeAsInt))
                ) && 
                (
                    this.TypeName == input.TypeName ||
                    (this.TypeName != null &&
                    this.TypeName.Equals(input.TypeName))
                ) && 
                (
                    this.No == input.No ||
                    (this.No != null &&
                    this.No.Equals(input.No))
                ) && 
                (
                    this.NotificationType == input.NotificationType ||
                    (this.NotificationType != null &&
                    this.NotificationType.Equals(input.NotificationType))
                ) && 
                (
                    this.NotificationTypeAsInt == input.NotificationTypeAsInt ||
                    (this.NotificationTypeAsInt != null &&
                    this.NotificationTypeAsInt.Equals(input.NotificationTypeAsInt))
                ) && 
                (
                    this.NotificationTypeName == input.NotificationTypeName ||
                    (this.NotificationTypeName != null &&
                    this.NotificationTypeName.Equals(input.NotificationTypeName))
                ) && 
                (
                    this.NotificationMessage == input.NotificationMessage ||
                    (this.NotificationMessage != null &&
                    this.NotificationMessage.Equals(input.NotificationMessage))
                ) && 
                (
                    this.Read == input.Read ||
                    (this.Read != null &&
                    this.Read.Equals(input.Read))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.EntryId != null)
                    hashCode = hashCode * 59 + this.EntryId.GetHashCode();
                if (this.PanelNo != null)
                    hashCode = hashCode * 59 + this.PanelNo.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TypeAsInt != null)
                    hashCode = hashCode * 59 + this.TypeAsInt.GetHashCode();
                if (this.TypeName != null)
                    hashCode = hashCode * 59 + this.TypeName.GetHashCode();
                if (this.No != null)
                    hashCode = hashCode * 59 + this.No.GetHashCode();
                if (this.NotificationType != null)
                    hashCode = hashCode * 59 + this.NotificationType.GetHashCode();
                if (this.NotificationTypeAsInt != null)
                    hashCode = hashCode * 59 + this.NotificationTypeAsInt.GetHashCode();
                if (this.NotificationTypeName != null)
                    hashCode = hashCode * 59 + this.NotificationTypeName.GetHashCode();
                if (this.NotificationMessage != null)
                    hashCode = hashCode * 59 + this.NotificationMessage.GetHashCode();
                if (this.Read != null)
                    hashCode = hashCode * 59 + this.Read.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
