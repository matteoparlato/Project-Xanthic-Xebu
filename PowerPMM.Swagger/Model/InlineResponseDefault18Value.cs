/* 
 * Power PLM Connector
 *
 * The custom connector used by Power PLM by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault18Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault18Value :  IEquatable<InlineResponseDefault18Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault18Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="capUnitOfMeasureCode">capUnitOfMeasureCode.</param>
        /// <param name="comment">comment.</param>
        /// <param name="controlResult">controlResult.</param>
        /// <param name="description">description.</param>
        /// <param name="description2">description2.</param>
        /// <param name="executed">executed.</param>
        /// <param name="lineNo">lineNo.</param>
        /// <param name="type">type.</param>
        /// <param name="typeAsInt">typeAsInt.</param>
        /// <param name="typeName">typeName.</param>
        /// <param name="typeNo">typeNo.</param>
        /// <param name="typeNoName">typeNoName.</param>
        /// <param name="maintenanceDuration">maintenanceDuration.</param>
        /// <param name="parameterNo">parameterNo.</param>
        /// <param name="position">position.</param>
        /// <param name="reasonCode">reasonCode.</param>
        /// <param name="vendorNo">vendorNo.</param>
        /// <param name="workRequestNo">workRequestNo.</param>
        /// <param name="operationDuration">operationDuration.</param>
        /// <param name="operationDurationAsText">operationDurationAsText.</param>
        /// <param name="operationDurationAsInt">operationDurationAsInt.</param>
        /// <param name="operationStatus">operationStatus.</param>
        /// <param name="operationStatusAsInt">operationStatusAsInt.</param>
        /// <param name="operationStatusName">operationStatusName.</param>
        /// <param name="startingDateTime">startingDateTime.</param>
        /// <param name="endingDateTime">endingDateTime.</param>
        /// <param name="resolutionCode">resolutionCode.</param>
        /// <param name="resourceNoFilter">resourceNoFilter.</param>
        public InlineResponseDefault18Value(string odataEtag = default(string), string systemId = default(string), string capUnitOfMeasureCode = default(string), bool? comment = default(bool?), string controlResult = default(string), string description = default(string), string description2 = default(string), bool? executed = default(bool?), decimal? lineNo = default(decimal?), string type = default(string), decimal? typeAsInt = default(decimal?), string typeName = default(string), string typeNo = default(string), string typeNoName = default(string), decimal? maintenanceDuration = default(decimal?), string parameterNo = default(string), string position = default(string), string reasonCode = default(string), string vendorNo = default(string), string workRequestNo = default(string), string operationDuration = default(string), string operationDurationAsText = default(string), decimal? operationDurationAsInt = default(decimal?), string operationStatus = default(string), decimal? operationStatusAsInt = default(decimal?), string operationStatusName = default(string), DateTime? startingDateTime = default(DateTime?), DateTime? endingDateTime = default(DateTime?), string resolutionCode = default(string), string resourceNoFilter = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.CapUnitOfMeasureCode = capUnitOfMeasureCode;
            this.Comment = comment;
            this.ControlResult = controlResult;
            this.Description = description;
            this.Description2 = description2;
            this.Executed = executed;
            this.LineNo = lineNo;
            this.Type = type;
            this.TypeAsInt = typeAsInt;
            this.TypeName = typeName;
            this.TypeNo = typeNo;
            this.TypeNoName = typeNoName;
            this.MaintenanceDuration = maintenanceDuration;
            this.ParameterNo = parameterNo;
            this.Position = position;
            this.ReasonCode = reasonCode;
            this.VendorNo = vendorNo;
            this.WorkRequestNo = workRequestNo;
            this.OperationDuration = operationDuration;
            this.OperationDurationAsText = operationDurationAsText;
            this.OperationDurationAsInt = operationDurationAsInt;
            this.OperationStatus = operationStatus;
            this.OperationStatusAsInt = operationStatusAsInt;
            this.OperationStatusName = operationStatusName;
            this.StartingDateTime = startingDateTime;
            this.EndingDateTime = endingDateTime;
            this.ResolutionCode = resolutionCode;
            this.ResourceNoFilter = resourceNoFilter;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// capUnitOfMeasureCode
        /// </summary>
        /// <value>capUnitOfMeasureCode</value>
        [DataMember(Name="capUnitOfMeasureCode", EmitDefaultValue=false)]
        public string CapUnitOfMeasureCode { get; set; }

        /// <summary>
        /// comment
        /// </summary>
        /// <value>comment</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public bool? Comment { get; set; }

        /// <summary>
        /// controlResult
        /// </summary>
        /// <value>controlResult</value>
        [DataMember(Name="controlResult", EmitDefaultValue=false)]
        public string ControlResult { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// description2
        /// </summary>
        /// <value>description2</value>
        [DataMember(Name="description2", EmitDefaultValue=false)]
        public string Description2 { get; set; }

        /// <summary>
        /// executed
        /// </summary>
        /// <value>executed</value>
        [DataMember(Name="executed", EmitDefaultValue=false)]
        public bool? Executed { get; set; }

        /// <summary>
        /// lineNo
        /// </summary>
        /// <value>lineNo</value>
        [DataMember(Name="lineNo", EmitDefaultValue=false)]
        public decimal? LineNo { get; set; }

        /// <summary>
        /// type
        /// </summary>
        /// <value>type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// typeAsInt
        /// </summary>
        /// <value>typeAsInt</value>
        [DataMember(Name="typeAsInt", EmitDefaultValue=false)]
        public decimal? TypeAsInt { get; set; }

        /// <summary>
        /// typeName
        /// </summary>
        /// <value>typeName</value>
        [DataMember(Name="typeName", EmitDefaultValue=false)]
        public string TypeName { get; set; }

        /// <summary>
        /// typeNo
        /// </summary>
        /// <value>typeNo</value>
        [DataMember(Name="typeNo", EmitDefaultValue=false)]
        public string TypeNo { get; set; }

        /// <summary>
        /// typeNoName
        /// </summary>
        /// <value>typeNoName</value>
        [DataMember(Name="typeNoName", EmitDefaultValue=false)]
        public string TypeNoName { get; set; }

        /// <summary>
        /// maintenanceDuration
        /// </summary>
        /// <value>maintenanceDuration</value>
        [DataMember(Name="maintenanceDuration", EmitDefaultValue=false)]
        public decimal? MaintenanceDuration { get; set; }

        /// <summary>
        /// parameterNo
        /// </summary>
        /// <value>parameterNo</value>
        [DataMember(Name="parameterNo", EmitDefaultValue=false)]
        public string ParameterNo { get; set; }

        /// <summary>
        /// position
        /// </summary>
        /// <value>position</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public string Position { get; set; }

        /// <summary>
        /// reasonCode
        /// </summary>
        /// <value>reasonCode</value>
        [DataMember(Name="reasonCode", EmitDefaultValue=false)]
        public string ReasonCode { get; set; }

        /// <summary>
        /// vendorNo
        /// </summary>
        /// <value>vendorNo</value>
        [DataMember(Name="vendorNo", EmitDefaultValue=false)]
        public string VendorNo { get; set; }

        /// <summary>
        /// workRequestNo
        /// </summary>
        /// <value>workRequestNo</value>
        [DataMember(Name="workRequestNo", EmitDefaultValue=false)]
        public string WorkRequestNo { get; set; }

        /// <summary>
        /// operationDuration
        /// </summary>
        /// <value>operationDuration</value>
        [DataMember(Name="operationDuration", EmitDefaultValue=false)]
        public string OperationDuration { get; set; }

        /// <summary>
        /// operationDurationAsText
        /// </summary>
        /// <value>operationDurationAsText</value>
        [DataMember(Name="operationDurationAsText", EmitDefaultValue=false)]
        public string OperationDurationAsText { get; set; }

        /// <summary>
        /// operationDurationAsInt
        /// </summary>
        /// <value>operationDurationAsInt</value>
        [DataMember(Name="operationDurationAsInt", EmitDefaultValue=false)]
        public decimal? OperationDurationAsInt { get; set; }

        /// <summary>
        /// operationStatus
        /// </summary>
        /// <value>operationStatus</value>
        [DataMember(Name="operationStatus", EmitDefaultValue=false)]
        public string OperationStatus { get; set; }

        /// <summary>
        /// operationStatusAsInt
        /// </summary>
        /// <value>operationStatusAsInt</value>
        [DataMember(Name="operationStatusAsInt", EmitDefaultValue=false)]
        public decimal? OperationStatusAsInt { get; set; }

        /// <summary>
        /// operationStatusName
        /// </summary>
        /// <value>operationStatusName</value>
        [DataMember(Name="operationStatusName", EmitDefaultValue=false)]
        public string OperationStatusName { get; set; }

        /// <summary>
        /// startingDateTime
        /// </summary>
        /// <value>startingDateTime</value>
        [DataMember(Name="startingDateTime", EmitDefaultValue=false)]
        public DateTime? StartingDateTime { get; set; }

        /// <summary>
        /// endingDateTime
        /// </summary>
        /// <value>endingDateTime</value>
        [DataMember(Name="endingDateTime", EmitDefaultValue=false)]
        public DateTime? EndingDateTime { get; set; }

        /// <summary>
        /// resolutionCode
        /// </summary>
        /// <value>resolutionCode</value>
        [DataMember(Name="resolutionCode", EmitDefaultValue=false)]
        public string ResolutionCode { get; set; }

        /// <summary>
        /// resourceNoFilter
        /// </summary>
        /// <value>resourceNoFilter</value>
        [DataMember(Name="resourceNoFilter", EmitDefaultValue=false)]
        public string ResourceNoFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault18Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  CapUnitOfMeasureCode: ").Append(CapUnitOfMeasureCode).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  ControlResult: ").Append(ControlResult).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Description2: ").Append(Description2).Append("\n");
            sb.Append("  Executed: ").Append(Executed).Append("\n");
            sb.Append("  LineNo: ").Append(LineNo).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeAsInt: ").Append(TypeAsInt).Append("\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("  TypeNo: ").Append(TypeNo).Append("\n");
            sb.Append("  TypeNoName: ").Append(TypeNoName).Append("\n");
            sb.Append("  MaintenanceDuration: ").Append(MaintenanceDuration).Append("\n");
            sb.Append("  ParameterNo: ").Append(ParameterNo).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  VendorNo: ").Append(VendorNo).Append("\n");
            sb.Append("  WorkRequestNo: ").Append(WorkRequestNo).Append("\n");
            sb.Append("  OperationDuration: ").Append(OperationDuration).Append("\n");
            sb.Append("  OperationDurationAsText: ").Append(OperationDurationAsText).Append("\n");
            sb.Append("  OperationDurationAsInt: ").Append(OperationDurationAsInt).Append("\n");
            sb.Append("  OperationStatus: ").Append(OperationStatus).Append("\n");
            sb.Append("  OperationStatusAsInt: ").Append(OperationStatusAsInt).Append("\n");
            sb.Append("  OperationStatusName: ").Append(OperationStatusName).Append("\n");
            sb.Append("  StartingDateTime: ").Append(StartingDateTime).Append("\n");
            sb.Append("  EndingDateTime: ").Append(EndingDateTime).Append("\n");
            sb.Append("  ResolutionCode: ").Append(ResolutionCode).Append("\n");
            sb.Append("  ResourceNoFilter: ").Append(ResourceNoFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault18Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault18Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault18Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault18Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.CapUnitOfMeasureCode == input.CapUnitOfMeasureCode ||
                    (this.CapUnitOfMeasureCode != null &&
                    this.CapUnitOfMeasureCode.Equals(input.CapUnitOfMeasureCode))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.ControlResult == input.ControlResult ||
                    (this.ControlResult != null &&
                    this.ControlResult.Equals(input.ControlResult))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Description2 == input.Description2 ||
                    (this.Description2 != null &&
                    this.Description2.Equals(input.Description2))
                ) && 
                (
                    this.Executed == input.Executed ||
                    (this.Executed != null &&
                    this.Executed.Equals(input.Executed))
                ) && 
                (
                    this.LineNo == input.LineNo ||
                    (this.LineNo != null &&
                    this.LineNo.Equals(input.LineNo))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TypeAsInt == input.TypeAsInt ||
                    (this.TypeAsInt != null &&
                    this.TypeAsInt.Equals(input.TypeAsInt))
                ) && 
                (
                    this.TypeName == input.TypeName ||
                    (this.TypeName != null &&
                    this.TypeName.Equals(input.TypeName))
                ) && 
                (
                    this.TypeNo == input.TypeNo ||
                    (this.TypeNo != null &&
                    this.TypeNo.Equals(input.TypeNo))
                ) && 
                (
                    this.TypeNoName == input.TypeNoName ||
                    (this.TypeNoName != null &&
                    this.TypeNoName.Equals(input.TypeNoName))
                ) && 
                (
                    this.MaintenanceDuration == input.MaintenanceDuration ||
                    (this.MaintenanceDuration != null &&
                    this.MaintenanceDuration.Equals(input.MaintenanceDuration))
                ) && 
                (
                    this.ParameterNo == input.ParameterNo ||
                    (this.ParameterNo != null &&
                    this.ParameterNo.Equals(input.ParameterNo))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.ReasonCode == input.ReasonCode ||
                    (this.ReasonCode != null &&
                    this.ReasonCode.Equals(input.ReasonCode))
                ) && 
                (
                    this.VendorNo == input.VendorNo ||
                    (this.VendorNo != null &&
                    this.VendorNo.Equals(input.VendorNo))
                ) && 
                (
                    this.WorkRequestNo == input.WorkRequestNo ||
                    (this.WorkRequestNo != null &&
                    this.WorkRequestNo.Equals(input.WorkRequestNo))
                ) && 
                (
                    this.OperationDuration == input.OperationDuration ||
                    (this.OperationDuration != null &&
                    this.OperationDuration.Equals(input.OperationDuration))
                ) && 
                (
                    this.OperationDurationAsText == input.OperationDurationAsText ||
                    (this.OperationDurationAsText != null &&
                    this.OperationDurationAsText.Equals(input.OperationDurationAsText))
                ) && 
                (
                    this.OperationDurationAsInt == input.OperationDurationAsInt ||
                    (this.OperationDurationAsInt != null &&
                    this.OperationDurationAsInt.Equals(input.OperationDurationAsInt))
                ) && 
                (
                    this.OperationStatus == input.OperationStatus ||
                    (this.OperationStatus != null &&
                    this.OperationStatus.Equals(input.OperationStatus))
                ) && 
                (
                    this.OperationStatusAsInt == input.OperationStatusAsInt ||
                    (this.OperationStatusAsInt != null &&
                    this.OperationStatusAsInt.Equals(input.OperationStatusAsInt))
                ) && 
                (
                    this.OperationStatusName == input.OperationStatusName ||
                    (this.OperationStatusName != null &&
                    this.OperationStatusName.Equals(input.OperationStatusName))
                ) && 
                (
                    this.StartingDateTime == input.StartingDateTime ||
                    (this.StartingDateTime != null &&
                    this.StartingDateTime.Equals(input.StartingDateTime))
                ) && 
                (
                    this.EndingDateTime == input.EndingDateTime ||
                    (this.EndingDateTime != null &&
                    this.EndingDateTime.Equals(input.EndingDateTime))
                ) && 
                (
                    this.ResolutionCode == input.ResolutionCode ||
                    (this.ResolutionCode != null &&
                    this.ResolutionCode.Equals(input.ResolutionCode))
                ) && 
                (
                    this.ResourceNoFilter == input.ResourceNoFilter ||
                    (this.ResourceNoFilter != null &&
                    this.ResourceNoFilter.Equals(input.ResourceNoFilter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.CapUnitOfMeasureCode != null)
                    hashCode = hashCode * 59 + this.CapUnitOfMeasureCode.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.ControlResult != null)
                    hashCode = hashCode * 59 + this.ControlResult.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Description2 != null)
                    hashCode = hashCode * 59 + this.Description2.GetHashCode();
                if (this.Executed != null)
                    hashCode = hashCode * 59 + this.Executed.GetHashCode();
                if (this.LineNo != null)
                    hashCode = hashCode * 59 + this.LineNo.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TypeAsInt != null)
                    hashCode = hashCode * 59 + this.TypeAsInt.GetHashCode();
                if (this.TypeName != null)
                    hashCode = hashCode * 59 + this.TypeName.GetHashCode();
                if (this.TypeNo != null)
                    hashCode = hashCode * 59 + this.TypeNo.GetHashCode();
                if (this.TypeNoName != null)
                    hashCode = hashCode * 59 + this.TypeNoName.GetHashCode();
                if (this.MaintenanceDuration != null)
                    hashCode = hashCode * 59 + this.MaintenanceDuration.GetHashCode();
                if (this.ParameterNo != null)
                    hashCode = hashCode * 59 + this.ParameterNo.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.ReasonCode != null)
                    hashCode = hashCode * 59 + this.ReasonCode.GetHashCode();
                if (this.VendorNo != null)
                    hashCode = hashCode * 59 + this.VendorNo.GetHashCode();
                if (this.WorkRequestNo != null)
                    hashCode = hashCode * 59 + this.WorkRequestNo.GetHashCode();
                if (this.OperationDuration != null)
                    hashCode = hashCode * 59 + this.OperationDuration.GetHashCode();
                if (this.OperationDurationAsText != null)
                    hashCode = hashCode * 59 + this.OperationDurationAsText.GetHashCode();
                if (this.OperationDurationAsInt != null)
                    hashCode = hashCode * 59 + this.OperationDurationAsInt.GetHashCode();
                if (this.OperationStatus != null)
                    hashCode = hashCode * 59 + this.OperationStatus.GetHashCode();
                if (this.OperationStatusAsInt != null)
                    hashCode = hashCode * 59 + this.OperationStatusAsInt.GetHashCode();
                if (this.OperationStatusName != null)
                    hashCode = hashCode * 59 + this.OperationStatusName.GetHashCode();
                if (this.StartingDateTime != null)
                    hashCode = hashCode * 59 + this.StartingDateTime.GetHashCode();
                if (this.EndingDateTime != null)
                    hashCode = hashCode * 59 + this.EndingDateTime.GetHashCode();
                if (this.ResolutionCode != null)
                    hashCode = hashCode * 59 + this.ResolutionCode.GetHashCode();
                if (this.ResourceNoFilter != null)
                    hashCode = hashCode * 59 + this.ResourceNoFilter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
