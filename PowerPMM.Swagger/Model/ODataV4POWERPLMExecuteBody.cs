/* 
 * Power PLM Connector
 *
 * The custom connector used by Power PLM by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ODataV4POWERPLMExecuteBody
    /// </summary>
    [DataContract]
        public partial class ODataV4POWERPLMExecuteBody :  IEquatable<ODataV4POWERPLMExecuteBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ODataV4POWERPLMExecuteBody" /> class.
        /// </summary>
        /// <param name="action">action.</param>
        /// <param name="textJsonPayload">textJsonPayload.</param>
        public ODataV4POWERPLMExecuteBody(string action = default(string), string textJsonPayload = default(string))
        {
            this.Action = action;
            this.TextJsonPayload = textJsonPayload;
        }
        
        /// <summary>
        /// action
        /// </summary>
        /// <value>action</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// textJsonPayload
        /// </summary>
        /// <value>textJsonPayload</value>
        [DataMember(Name="textJsonPayload", EmitDefaultValue=false)]
        public string TextJsonPayload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ODataV4POWERPLMExecuteBody {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  TextJsonPayload: ").Append(TextJsonPayload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ODataV4POWERPLMExecuteBody);
        }

        /// <summary>
        /// Returns true if ODataV4POWERPLMExecuteBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ODataV4POWERPLMExecuteBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ODataV4POWERPLMExecuteBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.TextJsonPayload == input.TextJsonPayload ||
                    (this.TextJsonPayload != null &&
                    this.TextJsonPayload.Equals(input.TextJsonPayload))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.TextJsonPayload != null)
                    hashCode = hashCode * 59 + this.TextJsonPayload.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
