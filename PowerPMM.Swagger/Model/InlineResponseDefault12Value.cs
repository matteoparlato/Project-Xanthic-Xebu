/* 
 * Power PLM Connector
 *
 * The custom connector used by Power PLM by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault12Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault12Value :  IEquatable<InlineResponseDefault12Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault12Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="code">code.</param>
        /// <param name="name">name.</param>
        /// <param name="name2">name2.</param>
        /// <param name="directedPutAwayAndPick">directedPutAwayAndPick.</param>
        /// <param name="binExists">binExists.</param>
        /// <param name="defaultBinCode">defaultBinCode.</param>
        public InlineResponseDefault12Value(string odataEtag = default(string), string systemId = default(string), string code = default(string), string name = default(string), string name2 = default(string), bool? directedPutAwayAndPick = default(bool?), bool? binExists = default(bool?), string defaultBinCode = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.Code = code;
            this.Name = name;
            this.Name2 = name2;
            this.DirectedPutAwayAndPick = directedPutAwayAndPick;
            this.BinExists = binExists;
            this.DefaultBinCode = defaultBinCode;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// code
        /// </summary>
        /// <value>code</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// name
        /// </summary>
        /// <value>name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// name2
        /// </summary>
        /// <value>name2</value>
        [DataMember(Name="name2", EmitDefaultValue=false)]
        public string Name2 { get; set; }

        /// <summary>
        /// directedPutAwayAndPick
        /// </summary>
        /// <value>directedPutAwayAndPick</value>
        [DataMember(Name="directedPutAwayAndPick", EmitDefaultValue=false)]
        public bool? DirectedPutAwayAndPick { get; set; }

        /// <summary>
        /// binExists
        /// </summary>
        /// <value>binExists</value>
        [DataMember(Name="binExists", EmitDefaultValue=false)]
        public bool? BinExists { get; set; }

        /// <summary>
        /// defaultBinCode
        /// </summary>
        /// <value>defaultBinCode</value>
        [DataMember(Name="defaultBinCode", EmitDefaultValue=false)]
        public string DefaultBinCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault12Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Name2: ").Append(Name2).Append("\n");
            sb.Append("  DirectedPutAwayAndPick: ").Append(DirectedPutAwayAndPick).Append("\n");
            sb.Append("  BinExists: ").Append(BinExists).Append("\n");
            sb.Append("  DefaultBinCode: ").Append(DefaultBinCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault12Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault12Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault12Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault12Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Name2 == input.Name2 ||
                    (this.Name2 != null &&
                    this.Name2.Equals(input.Name2))
                ) && 
                (
                    this.DirectedPutAwayAndPick == input.DirectedPutAwayAndPick ||
                    (this.DirectedPutAwayAndPick != null &&
                    this.DirectedPutAwayAndPick.Equals(input.DirectedPutAwayAndPick))
                ) && 
                (
                    this.BinExists == input.BinExists ||
                    (this.BinExists != null &&
                    this.BinExists.Equals(input.BinExists))
                ) && 
                (
                    this.DefaultBinCode == input.DefaultBinCode ||
                    (this.DefaultBinCode != null &&
                    this.DefaultBinCode.Equals(input.DefaultBinCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Name2 != null)
                    hashCode = hashCode * 59 + this.Name2.GetHashCode();
                if (this.DirectedPutAwayAndPick != null)
                    hashCode = hashCode * 59 + this.DirectedPutAwayAndPick.GetHashCode();
                if (this.BinExists != null)
                    hashCode = hashCode * 59 + this.BinExists.GetHashCode();
                if (this.DefaultBinCode != null)
                    hashCode = hashCode * 59 + this.DefaultBinCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
