/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault44Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault44Value :  IEquatable<InlineResponseDefault44Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault44Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="panelNo">panelNo.</param>
        /// <param name="linkId">linkId.</param>
        /// <param name="resourceType">resourceType.</param>
        /// <param name="resourceTypeAsInt">resourceTypeAsInt.</param>
        /// <param name="resourceTypeName">resourceTypeName.</param>
        /// <param name="resourceNo">resourceNo.</param>
        /// <param name="resourceStatus">resourceStatus.</param>
        /// <param name="resourceStatusAsInt">resourceStatusAsInt.</param>
        /// <param name="resourceStatusName">resourceStatusName.</param>
        /// <param name="stopReasonCode">stopReasonCode.</param>
        /// <param name="stopReasonDescription">stopReasonDescription.</param>
        /// <param name="stopTime">stopTime.</param>
        /// <param name="stopTimeMs">stopTimeMs.</param>
        /// <param name="prodOrdersCount">prodOrdersCount.</param>
        /// <param name="prodOrdersQuantity">prodOrdersQuantity.</param>
        /// <param name="prodOrdersRemainingQuantity">prodOrdersRemainingQuantity.</param>
        /// <param name="prodOrdersTotalRunTime">prodOrdersTotalRunTime.</param>
        /// <param name="prodOrdersTotalRunTimeMs">prodOrdersTotalRunTimeMs.</param>
        /// <param name="totalRunTime">totalRunTime.</param>
        /// <param name="totalRunTimeMs">totalRunTimeMs.</param>
        /// <param name="totalStopTime">totalStopTime.</param>
        /// <param name="totalStopTimeMs">totalStopTimeMs.</param>
        /// <param name="expectedRunTime">expectedRunTime.</param>
        /// <param name="expectedRunTimeMs">expectedRunTimeMs.</param>
        /// <param name="totalOutputQuantity">totalOutputQuantity.</param>
        /// <param name="totalScrapQuantity">totalScrapQuantity.</param>
        /// <param name="dailyOutputQuantity">dailyOutputQuantity.</param>
        /// <param name="dailyScrapQuantity">dailyScrapQuantity.</param>
        /// <param name="kpiAvailability">kpiAvailability.</param>
        /// <param name="kpiPerformance">kpiPerformance.</param>
        /// <param name="kpiQuality">kpiQuality.</param>
        /// <param name="kpiOEE">kpiOEE.</param>
        /// <param name="synopticProductionOrders">synopticProductionOrders.</param>
        public InlineResponseDefault44Value(string odataEtag = default(string), string systemId = default(string), string panelNo = default(string), string linkId = default(string), string resourceType = default(string), decimal? resourceTypeAsInt = default(decimal?), string resourceTypeName = default(string), string resourceNo = default(string), string resourceStatus = default(string), decimal? resourceStatusAsInt = default(decimal?), string resourceStatusName = default(string), string stopReasonCode = default(string), string stopReasonDescription = default(string), string stopTime = default(string), decimal? stopTimeMs = default(decimal?), decimal? prodOrdersCount = default(decimal?), decimal? prodOrdersQuantity = default(decimal?), decimal? prodOrdersRemainingQuantity = default(decimal?), string prodOrdersTotalRunTime = default(string), decimal? prodOrdersTotalRunTimeMs = default(decimal?), string totalRunTime = default(string), decimal? totalRunTimeMs = default(decimal?), string totalStopTime = default(string), decimal? totalStopTimeMs = default(decimal?), string expectedRunTime = default(string), decimal? expectedRunTimeMs = default(decimal?), decimal? totalOutputQuantity = default(decimal?), decimal? totalScrapQuantity = default(decimal?), decimal? dailyOutputQuantity = default(decimal?), decimal? dailyScrapQuantity = default(decimal?), decimal? kpiAvailability = default(decimal?), decimal? kpiPerformance = default(decimal?), decimal? kpiQuality = default(decimal?), decimal? kpiOEE = default(decimal?), string synopticProductionOrders = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.PanelNo = panelNo;
            this.LinkId = linkId;
            this.ResourceType = resourceType;
            this.ResourceTypeAsInt = resourceTypeAsInt;
            this.ResourceTypeName = resourceTypeName;
            this.ResourceNo = resourceNo;
            this.ResourceStatus = resourceStatus;
            this.ResourceStatusAsInt = resourceStatusAsInt;
            this.ResourceStatusName = resourceStatusName;
            this.StopReasonCode = stopReasonCode;
            this.StopReasonDescription = stopReasonDescription;
            this.StopTime = stopTime;
            this.StopTimeMs = stopTimeMs;
            this.ProdOrdersCount = prodOrdersCount;
            this.ProdOrdersQuantity = prodOrdersQuantity;
            this.ProdOrdersRemainingQuantity = prodOrdersRemainingQuantity;
            this.ProdOrdersTotalRunTime = prodOrdersTotalRunTime;
            this.ProdOrdersTotalRunTimeMs = prodOrdersTotalRunTimeMs;
            this.TotalRunTime = totalRunTime;
            this.TotalRunTimeMs = totalRunTimeMs;
            this.TotalStopTime = totalStopTime;
            this.TotalStopTimeMs = totalStopTimeMs;
            this.ExpectedRunTime = expectedRunTime;
            this.ExpectedRunTimeMs = expectedRunTimeMs;
            this.TotalOutputQuantity = totalOutputQuantity;
            this.TotalScrapQuantity = totalScrapQuantity;
            this.DailyOutputQuantity = dailyOutputQuantity;
            this.DailyScrapQuantity = dailyScrapQuantity;
            this.KpiAvailability = kpiAvailability;
            this.KpiPerformance = kpiPerformance;
            this.KpiQuality = kpiQuality;
            this.KpiOEE = kpiOEE;
            this.SynopticProductionOrders = synopticProductionOrders;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// panelNo
        /// </summary>
        /// <value>panelNo</value>
        [DataMember(Name="panelNo", EmitDefaultValue=false)]
        public string PanelNo { get; set; }

        /// <summary>
        /// linkId
        /// </summary>
        /// <value>linkId</value>
        [DataMember(Name="linkId", EmitDefaultValue=false)]
        public string LinkId { get; set; }

        /// <summary>
        /// resourceType
        /// </summary>
        /// <value>resourceType</value>
        [DataMember(Name="resourceType", EmitDefaultValue=false)]
        public string ResourceType { get; set; }

        /// <summary>
        /// resourceTypeAsInt
        /// </summary>
        /// <value>resourceTypeAsInt</value>
        [DataMember(Name="resourceTypeAsInt", EmitDefaultValue=false)]
        public decimal? ResourceTypeAsInt { get; set; }

        /// <summary>
        /// resourceTypeName
        /// </summary>
        /// <value>resourceTypeName</value>
        [DataMember(Name="resourceTypeName", EmitDefaultValue=false)]
        public string ResourceTypeName { get; set; }

        /// <summary>
        /// resourceNo
        /// </summary>
        /// <value>resourceNo</value>
        [DataMember(Name="resourceNo", EmitDefaultValue=false)]
        public string ResourceNo { get; set; }

        /// <summary>
        /// resourceStatus
        /// </summary>
        /// <value>resourceStatus</value>
        [DataMember(Name="resourceStatus", EmitDefaultValue=false)]
        public string ResourceStatus { get; set; }

        /// <summary>
        /// resourceStatusAsInt
        /// </summary>
        /// <value>resourceStatusAsInt</value>
        [DataMember(Name="resourceStatusAsInt", EmitDefaultValue=false)]
        public decimal? ResourceStatusAsInt { get; set; }

        /// <summary>
        /// resourceStatusName
        /// </summary>
        /// <value>resourceStatusName</value>
        [DataMember(Name="resourceStatusName", EmitDefaultValue=false)]
        public string ResourceStatusName { get; set; }

        /// <summary>
        /// stopReasonCode
        /// </summary>
        /// <value>stopReasonCode</value>
        [DataMember(Name="stopReasonCode", EmitDefaultValue=false)]
        public string StopReasonCode { get; set; }

        /// <summary>
        /// stopReasonDescription
        /// </summary>
        /// <value>stopReasonDescription</value>
        [DataMember(Name="stopReasonDescription", EmitDefaultValue=false)]
        public string StopReasonDescription { get; set; }

        /// <summary>
        /// stopTime
        /// </summary>
        /// <value>stopTime</value>
        [DataMember(Name="stopTime", EmitDefaultValue=false)]
        public string StopTime { get; set; }

        /// <summary>
        /// stopTimeMs
        /// </summary>
        /// <value>stopTimeMs</value>
        [DataMember(Name="stopTimeMs", EmitDefaultValue=false)]
        public decimal? StopTimeMs { get; set; }

        /// <summary>
        /// prodOrdersCount
        /// </summary>
        /// <value>prodOrdersCount</value>
        [DataMember(Name="prodOrdersCount", EmitDefaultValue=false)]
        public decimal? ProdOrdersCount { get; set; }

        /// <summary>
        /// prodOrdersQuantity
        /// </summary>
        /// <value>prodOrdersQuantity</value>
        [DataMember(Name="prodOrdersQuantity", EmitDefaultValue=false)]
        public decimal? ProdOrdersQuantity { get; set; }

        /// <summary>
        /// prodOrdersRemainingQuantity
        /// </summary>
        /// <value>prodOrdersRemainingQuantity</value>
        [DataMember(Name="prodOrdersRemainingQuantity", EmitDefaultValue=false)]
        public decimal? ProdOrdersRemainingQuantity { get; set; }

        /// <summary>
        /// prodOrdersTotalRunTime
        /// </summary>
        /// <value>prodOrdersTotalRunTime</value>
        [DataMember(Name="prodOrdersTotalRunTime", EmitDefaultValue=false)]
        public string ProdOrdersTotalRunTime { get; set; }

        /// <summary>
        /// prodOrdersTotalRunTimeMs
        /// </summary>
        /// <value>prodOrdersTotalRunTimeMs</value>
        [DataMember(Name="prodOrdersTotalRunTimeMs", EmitDefaultValue=false)]
        public decimal? ProdOrdersTotalRunTimeMs { get; set; }

        /// <summary>
        /// totalRunTime
        /// </summary>
        /// <value>totalRunTime</value>
        [DataMember(Name="totalRunTime", EmitDefaultValue=false)]
        public string TotalRunTime { get; set; }

        /// <summary>
        /// totalRunTimeMs
        /// </summary>
        /// <value>totalRunTimeMs</value>
        [DataMember(Name="totalRunTimeMs", EmitDefaultValue=false)]
        public decimal? TotalRunTimeMs { get; set; }

        /// <summary>
        /// totalStopTime
        /// </summary>
        /// <value>totalStopTime</value>
        [DataMember(Name="totalStopTime", EmitDefaultValue=false)]
        public string TotalStopTime { get; set; }

        /// <summary>
        /// totalStopTimeMs
        /// </summary>
        /// <value>totalStopTimeMs</value>
        [DataMember(Name="totalStopTimeMs", EmitDefaultValue=false)]
        public decimal? TotalStopTimeMs { get; set; }

        /// <summary>
        /// expectedRunTime
        /// </summary>
        /// <value>expectedRunTime</value>
        [DataMember(Name="expectedRunTime", EmitDefaultValue=false)]
        public string ExpectedRunTime { get; set; }

        /// <summary>
        /// expectedRunTimeMs
        /// </summary>
        /// <value>expectedRunTimeMs</value>
        [DataMember(Name="expectedRunTimeMs", EmitDefaultValue=false)]
        public decimal? ExpectedRunTimeMs { get; set; }

        /// <summary>
        /// totalOutputQuantity
        /// </summary>
        /// <value>totalOutputQuantity</value>
        [DataMember(Name="totalOutputQuantity", EmitDefaultValue=false)]
        public decimal? TotalOutputQuantity { get; set; }

        /// <summary>
        /// totalScrapQuantity
        /// </summary>
        /// <value>totalScrapQuantity</value>
        [DataMember(Name="totalScrapQuantity", EmitDefaultValue=false)]
        public decimal? TotalScrapQuantity { get; set; }

        /// <summary>
        /// dailyOutputQuantity
        /// </summary>
        /// <value>dailyOutputQuantity</value>
        [DataMember(Name="dailyOutputQuantity", EmitDefaultValue=false)]
        public decimal? DailyOutputQuantity { get; set; }

        /// <summary>
        /// dailyScrapQuantity
        /// </summary>
        /// <value>dailyScrapQuantity</value>
        [DataMember(Name="dailyScrapQuantity", EmitDefaultValue=false)]
        public decimal? DailyScrapQuantity { get; set; }

        /// <summary>
        /// kpiAvailability
        /// </summary>
        /// <value>kpiAvailability</value>
        [DataMember(Name="kpiAvailability", EmitDefaultValue=false)]
        public decimal? KpiAvailability { get; set; }

        /// <summary>
        /// kpiPerformance
        /// </summary>
        /// <value>kpiPerformance</value>
        [DataMember(Name="kpiPerformance", EmitDefaultValue=false)]
        public decimal? KpiPerformance { get; set; }

        /// <summary>
        /// kpiQuality
        /// </summary>
        /// <value>kpiQuality</value>
        [DataMember(Name="kpiQuality", EmitDefaultValue=false)]
        public decimal? KpiQuality { get; set; }

        /// <summary>
        /// kpiOEE
        /// </summary>
        /// <value>kpiOEE</value>
        [DataMember(Name="kpiOEE", EmitDefaultValue=false)]
        public decimal? KpiOEE { get; set; }

        /// <summary>
        /// synopticProductionOrders
        /// </summary>
        /// <value>synopticProductionOrders</value>
        [DataMember(Name="synopticProductionOrders", EmitDefaultValue=false)]
        public string SynopticProductionOrders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault44Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  PanelNo: ").Append(PanelNo).Append("\n");
            sb.Append("  LinkId: ").Append(LinkId).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  ResourceTypeAsInt: ").Append(ResourceTypeAsInt).Append("\n");
            sb.Append("  ResourceTypeName: ").Append(ResourceTypeName).Append("\n");
            sb.Append("  ResourceNo: ").Append(ResourceNo).Append("\n");
            sb.Append("  ResourceStatus: ").Append(ResourceStatus).Append("\n");
            sb.Append("  ResourceStatusAsInt: ").Append(ResourceStatusAsInt).Append("\n");
            sb.Append("  ResourceStatusName: ").Append(ResourceStatusName).Append("\n");
            sb.Append("  StopReasonCode: ").Append(StopReasonCode).Append("\n");
            sb.Append("  StopReasonDescription: ").Append(StopReasonDescription).Append("\n");
            sb.Append("  StopTime: ").Append(StopTime).Append("\n");
            sb.Append("  StopTimeMs: ").Append(StopTimeMs).Append("\n");
            sb.Append("  ProdOrdersCount: ").Append(ProdOrdersCount).Append("\n");
            sb.Append("  ProdOrdersQuantity: ").Append(ProdOrdersQuantity).Append("\n");
            sb.Append("  ProdOrdersRemainingQuantity: ").Append(ProdOrdersRemainingQuantity).Append("\n");
            sb.Append("  ProdOrdersTotalRunTime: ").Append(ProdOrdersTotalRunTime).Append("\n");
            sb.Append("  ProdOrdersTotalRunTimeMs: ").Append(ProdOrdersTotalRunTimeMs).Append("\n");
            sb.Append("  TotalRunTime: ").Append(TotalRunTime).Append("\n");
            sb.Append("  TotalRunTimeMs: ").Append(TotalRunTimeMs).Append("\n");
            sb.Append("  TotalStopTime: ").Append(TotalStopTime).Append("\n");
            sb.Append("  TotalStopTimeMs: ").Append(TotalStopTimeMs).Append("\n");
            sb.Append("  ExpectedRunTime: ").Append(ExpectedRunTime).Append("\n");
            sb.Append("  ExpectedRunTimeMs: ").Append(ExpectedRunTimeMs).Append("\n");
            sb.Append("  TotalOutputQuantity: ").Append(TotalOutputQuantity).Append("\n");
            sb.Append("  TotalScrapQuantity: ").Append(TotalScrapQuantity).Append("\n");
            sb.Append("  DailyOutputQuantity: ").Append(DailyOutputQuantity).Append("\n");
            sb.Append("  DailyScrapQuantity: ").Append(DailyScrapQuantity).Append("\n");
            sb.Append("  KpiAvailability: ").Append(KpiAvailability).Append("\n");
            sb.Append("  KpiPerformance: ").Append(KpiPerformance).Append("\n");
            sb.Append("  KpiQuality: ").Append(KpiQuality).Append("\n");
            sb.Append("  KpiOEE: ").Append(KpiOEE).Append("\n");
            sb.Append("  SynopticProductionOrders: ").Append(SynopticProductionOrders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault44Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault44Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault44Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault44Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.PanelNo == input.PanelNo ||
                    (this.PanelNo != null &&
                    this.PanelNo.Equals(input.PanelNo))
                ) && 
                (
                    this.LinkId == input.LinkId ||
                    (this.LinkId != null &&
                    this.LinkId.Equals(input.LinkId))
                ) && 
                (
                    this.ResourceType == input.ResourceType ||
                    (this.ResourceType != null &&
                    this.ResourceType.Equals(input.ResourceType))
                ) && 
                (
                    this.ResourceTypeAsInt == input.ResourceTypeAsInt ||
                    (this.ResourceTypeAsInt != null &&
                    this.ResourceTypeAsInt.Equals(input.ResourceTypeAsInt))
                ) && 
                (
                    this.ResourceTypeName == input.ResourceTypeName ||
                    (this.ResourceTypeName != null &&
                    this.ResourceTypeName.Equals(input.ResourceTypeName))
                ) && 
                (
                    this.ResourceNo == input.ResourceNo ||
                    (this.ResourceNo != null &&
                    this.ResourceNo.Equals(input.ResourceNo))
                ) && 
                (
                    this.ResourceStatus == input.ResourceStatus ||
                    (this.ResourceStatus != null &&
                    this.ResourceStatus.Equals(input.ResourceStatus))
                ) && 
                (
                    this.ResourceStatusAsInt == input.ResourceStatusAsInt ||
                    (this.ResourceStatusAsInt != null &&
                    this.ResourceStatusAsInt.Equals(input.ResourceStatusAsInt))
                ) && 
                (
                    this.ResourceStatusName == input.ResourceStatusName ||
                    (this.ResourceStatusName != null &&
                    this.ResourceStatusName.Equals(input.ResourceStatusName))
                ) && 
                (
                    this.StopReasonCode == input.StopReasonCode ||
                    (this.StopReasonCode != null &&
                    this.StopReasonCode.Equals(input.StopReasonCode))
                ) && 
                (
                    this.StopReasonDescription == input.StopReasonDescription ||
                    (this.StopReasonDescription != null &&
                    this.StopReasonDescription.Equals(input.StopReasonDescription))
                ) && 
                (
                    this.StopTime == input.StopTime ||
                    (this.StopTime != null &&
                    this.StopTime.Equals(input.StopTime))
                ) && 
                (
                    this.StopTimeMs == input.StopTimeMs ||
                    (this.StopTimeMs != null &&
                    this.StopTimeMs.Equals(input.StopTimeMs))
                ) && 
                (
                    this.ProdOrdersCount == input.ProdOrdersCount ||
                    (this.ProdOrdersCount != null &&
                    this.ProdOrdersCount.Equals(input.ProdOrdersCount))
                ) && 
                (
                    this.ProdOrdersQuantity == input.ProdOrdersQuantity ||
                    (this.ProdOrdersQuantity != null &&
                    this.ProdOrdersQuantity.Equals(input.ProdOrdersQuantity))
                ) && 
                (
                    this.ProdOrdersRemainingQuantity == input.ProdOrdersRemainingQuantity ||
                    (this.ProdOrdersRemainingQuantity != null &&
                    this.ProdOrdersRemainingQuantity.Equals(input.ProdOrdersRemainingQuantity))
                ) && 
                (
                    this.ProdOrdersTotalRunTime == input.ProdOrdersTotalRunTime ||
                    (this.ProdOrdersTotalRunTime != null &&
                    this.ProdOrdersTotalRunTime.Equals(input.ProdOrdersTotalRunTime))
                ) && 
                (
                    this.ProdOrdersTotalRunTimeMs == input.ProdOrdersTotalRunTimeMs ||
                    (this.ProdOrdersTotalRunTimeMs != null &&
                    this.ProdOrdersTotalRunTimeMs.Equals(input.ProdOrdersTotalRunTimeMs))
                ) && 
                (
                    this.TotalRunTime == input.TotalRunTime ||
                    (this.TotalRunTime != null &&
                    this.TotalRunTime.Equals(input.TotalRunTime))
                ) && 
                (
                    this.TotalRunTimeMs == input.TotalRunTimeMs ||
                    (this.TotalRunTimeMs != null &&
                    this.TotalRunTimeMs.Equals(input.TotalRunTimeMs))
                ) && 
                (
                    this.TotalStopTime == input.TotalStopTime ||
                    (this.TotalStopTime != null &&
                    this.TotalStopTime.Equals(input.TotalStopTime))
                ) && 
                (
                    this.TotalStopTimeMs == input.TotalStopTimeMs ||
                    (this.TotalStopTimeMs != null &&
                    this.TotalStopTimeMs.Equals(input.TotalStopTimeMs))
                ) && 
                (
                    this.ExpectedRunTime == input.ExpectedRunTime ||
                    (this.ExpectedRunTime != null &&
                    this.ExpectedRunTime.Equals(input.ExpectedRunTime))
                ) && 
                (
                    this.ExpectedRunTimeMs == input.ExpectedRunTimeMs ||
                    (this.ExpectedRunTimeMs != null &&
                    this.ExpectedRunTimeMs.Equals(input.ExpectedRunTimeMs))
                ) && 
                (
                    this.TotalOutputQuantity == input.TotalOutputQuantity ||
                    (this.TotalOutputQuantity != null &&
                    this.TotalOutputQuantity.Equals(input.TotalOutputQuantity))
                ) && 
                (
                    this.TotalScrapQuantity == input.TotalScrapQuantity ||
                    (this.TotalScrapQuantity != null &&
                    this.TotalScrapQuantity.Equals(input.TotalScrapQuantity))
                ) && 
                (
                    this.DailyOutputQuantity == input.DailyOutputQuantity ||
                    (this.DailyOutputQuantity != null &&
                    this.DailyOutputQuantity.Equals(input.DailyOutputQuantity))
                ) && 
                (
                    this.DailyScrapQuantity == input.DailyScrapQuantity ||
                    (this.DailyScrapQuantity != null &&
                    this.DailyScrapQuantity.Equals(input.DailyScrapQuantity))
                ) && 
                (
                    this.KpiAvailability == input.KpiAvailability ||
                    (this.KpiAvailability != null &&
                    this.KpiAvailability.Equals(input.KpiAvailability))
                ) && 
                (
                    this.KpiPerformance == input.KpiPerformance ||
                    (this.KpiPerformance != null &&
                    this.KpiPerformance.Equals(input.KpiPerformance))
                ) && 
                (
                    this.KpiQuality == input.KpiQuality ||
                    (this.KpiQuality != null &&
                    this.KpiQuality.Equals(input.KpiQuality))
                ) && 
                (
                    this.KpiOEE == input.KpiOEE ||
                    (this.KpiOEE != null &&
                    this.KpiOEE.Equals(input.KpiOEE))
                ) && 
                (
                    this.SynopticProductionOrders == input.SynopticProductionOrders ||
                    (this.SynopticProductionOrders != null &&
                    this.SynopticProductionOrders.Equals(input.SynopticProductionOrders))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.PanelNo != null)
                    hashCode = hashCode * 59 + this.PanelNo.GetHashCode();
                if (this.LinkId != null)
                    hashCode = hashCode * 59 + this.LinkId.GetHashCode();
                if (this.ResourceType != null)
                    hashCode = hashCode * 59 + this.ResourceType.GetHashCode();
                if (this.ResourceTypeAsInt != null)
                    hashCode = hashCode * 59 + this.ResourceTypeAsInt.GetHashCode();
                if (this.ResourceTypeName != null)
                    hashCode = hashCode * 59 + this.ResourceTypeName.GetHashCode();
                if (this.ResourceNo != null)
                    hashCode = hashCode * 59 + this.ResourceNo.GetHashCode();
                if (this.ResourceStatus != null)
                    hashCode = hashCode * 59 + this.ResourceStatus.GetHashCode();
                if (this.ResourceStatusAsInt != null)
                    hashCode = hashCode * 59 + this.ResourceStatusAsInt.GetHashCode();
                if (this.ResourceStatusName != null)
                    hashCode = hashCode * 59 + this.ResourceStatusName.GetHashCode();
                if (this.StopReasonCode != null)
                    hashCode = hashCode * 59 + this.StopReasonCode.GetHashCode();
                if (this.StopReasonDescription != null)
                    hashCode = hashCode * 59 + this.StopReasonDescription.GetHashCode();
                if (this.StopTime != null)
                    hashCode = hashCode * 59 + this.StopTime.GetHashCode();
                if (this.StopTimeMs != null)
                    hashCode = hashCode * 59 + this.StopTimeMs.GetHashCode();
                if (this.ProdOrdersCount != null)
                    hashCode = hashCode * 59 + this.ProdOrdersCount.GetHashCode();
                if (this.ProdOrdersQuantity != null)
                    hashCode = hashCode * 59 + this.ProdOrdersQuantity.GetHashCode();
                if (this.ProdOrdersRemainingQuantity != null)
                    hashCode = hashCode * 59 + this.ProdOrdersRemainingQuantity.GetHashCode();
                if (this.ProdOrdersTotalRunTime != null)
                    hashCode = hashCode * 59 + this.ProdOrdersTotalRunTime.GetHashCode();
                if (this.ProdOrdersTotalRunTimeMs != null)
                    hashCode = hashCode * 59 + this.ProdOrdersTotalRunTimeMs.GetHashCode();
                if (this.TotalRunTime != null)
                    hashCode = hashCode * 59 + this.TotalRunTime.GetHashCode();
                if (this.TotalRunTimeMs != null)
                    hashCode = hashCode * 59 + this.TotalRunTimeMs.GetHashCode();
                if (this.TotalStopTime != null)
                    hashCode = hashCode * 59 + this.TotalStopTime.GetHashCode();
                if (this.TotalStopTimeMs != null)
                    hashCode = hashCode * 59 + this.TotalStopTimeMs.GetHashCode();
                if (this.ExpectedRunTime != null)
                    hashCode = hashCode * 59 + this.ExpectedRunTime.GetHashCode();
                if (this.ExpectedRunTimeMs != null)
                    hashCode = hashCode * 59 + this.ExpectedRunTimeMs.GetHashCode();
                if (this.TotalOutputQuantity != null)
                    hashCode = hashCode * 59 + this.TotalOutputQuantity.GetHashCode();
                if (this.TotalScrapQuantity != null)
                    hashCode = hashCode * 59 + this.TotalScrapQuantity.GetHashCode();
                if (this.DailyOutputQuantity != null)
                    hashCode = hashCode * 59 + this.DailyOutputQuantity.GetHashCode();
                if (this.DailyScrapQuantity != null)
                    hashCode = hashCode * 59 + this.DailyScrapQuantity.GetHashCode();
                if (this.KpiAvailability != null)
                    hashCode = hashCode * 59 + this.KpiAvailability.GetHashCode();
                if (this.KpiPerformance != null)
                    hashCode = hashCode * 59 + this.KpiPerformance.GetHashCode();
                if (this.KpiQuality != null)
                    hashCode = hashCode * 59 + this.KpiQuality.GetHashCode();
                if (this.KpiOEE != null)
                    hashCode = hashCode * 59 + this.KpiOEE.GetHashCode();
                if (this.SynopticProductionOrders != null)
                    hashCode = hashCode * 59 + this.SynopticProductionOrders.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
