/* 
 * Power PLM Connector
 *
 * The custom connector used by Power PLM by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault27Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault27Value :  IEquatable<InlineResponseDefault27Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault27Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="serialNo">serialNo.</param>
        /// <param name="lotNo">lotNo.</param>
        /// <param name="sourceTypeFilter">sourceTypeFilter.</param>
        /// <param name="sourceNoFilter">sourceNoFilter.</param>
        /// <param name="lineNoFilter">lineNoFilter.</param>
        public InlineResponseDefault27Value(string odataEtag = default(string), string systemId = default(string), string serialNo = default(string), string lotNo = default(string), string sourceTypeFilter = default(string), string sourceNoFilter = default(string), string lineNoFilter = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.SerialNo = serialNo;
            this.LotNo = lotNo;
            this.SourceTypeFilter = sourceTypeFilter;
            this.SourceNoFilter = sourceNoFilter;
            this.LineNoFilter = lineNoFilter;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// serialNo
        /// </summary>
        /// <value>serialNo</value>
        [DataMember(Name="serialNo", EmitDefaultValue=false)]
        public string SerialNo { get; set; }

        /// <summary>
        /// lotNo
        /// </summary>
        /// <value>lotNo</value>
        [DataMember(Name="lotNo", EmitDefaultValue=false)]
        public string LotNo { get; set; }

        /// <summary>
        /// sourceTypeFilter
        /// </summary>
        /// <value>sourceTypeFilter</value>
        [DataMember(Name="sourceTypeFilter", EmitDefaultValue=false)]
        public string SourceTypeFilter { get; set; }

        /// <summary>
        /// sourceNoFilter
        /// </summary>
        /// <value>sourceNoFilter</value>
        [DataMember(Name="sourceNoFilter", EmitDefaultValue=false)]
        public string SourceNoFilter { get; set; }

        /// <summary>
        /// lineNoFilter
        /// </summary>
        /// <value>lineNoFilter</value>
        [DataMember(Name="lineNoFilter", EmitDefaultValue=false)]
        public string LineNoFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault27Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  SerialNo: ").Append(SerialNo).Append("\n");
            sb.Append("  LotNo: ").Append(LotNo).Append("\n");
            sb.Append("  SourceTypeFilter: ").Append(SourceTypeFilter).Append("\n");
            sb.Append("  SourceNoFilter: ").Append(SourceNoFilter).Append("\n");
            sb.Append("  LineNoFilter: ").Append(LineNoFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault27Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault27Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault27Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault27Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.SerialNo == input.SerialNo ||
                    (this.SerialNo != null &&
                    this.SerialNo.Equals(input.SerialNo))
                ) && 
                (
                    this.LotNo == input.LotNo ||
                    (this.LotNo != null &&
                    this.LotNo.Equals(input.LotNo))
                ) && 
                (
                    this.SourceTypeFilter == input.SourceTypeFilter ||
                    (this.SourceTypeFilter != null &&
                    this.SourceTypeFilter.Equals(input.SourceTypeFilter))
                ) && 
                (
                    this.SourceNoFilter == input.SourceNoFilter ||
                    (this.SourceNoFilter != null &&
                    this.SourceNoFilter.Equals(input.SourceNoFilter))
                ) && 
                (
                    this.LineNoFilter == input.LineNoFilter ||
                    (this.LineNoFilter != null &&
                    this.LineNoFilter.Equals(input.LineNoFilter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.SerialNo != null)
                    hashCode = hashCode * 59 + this.SerialNo.GetHashCode();
                if (this.LotNo != null)
                    hashCode = hashCode * 59 + this.LotNo.GetHashCode();
                if (this.SourceTypeFilter != null)
                    hashCode = hashCode * 59 + this.SourceTypeFilter.GetHashCode();
                if (this.SourceNoFilter != null)
                    hashCode = hashCode * 59 + this.SourceNoFilter.GetHashCode();
                if (this.LineNoFilter != null)
                    hashCode = hashCode * 59 + this.LineNoFilter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
