/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault3Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault3Value :  IEquatable<InlineResponseDefault3Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault3Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="hubName">hubName.</param>
        /// <param name="deviceId">deviceId.</param>
        /// <param name="key">key.</param>
        /// <param name="description">description.</param>
        /// <param name="category">category.</param>
        /// <param name="categoryInt">categoryInt.</param>
        /// <param name="categoryCaption">categoryCaption.</param>
        /// <param name="sequence">sequence.</param>
        /// <param name="type">type.</param>
        /// <param name="typeInt">typeInt.</param>
        /// <param name="typeCaption">typeCaption.</param>
        /// <param name="minTreshold">minTreshold.</param>
        /// <param name="midTreshold">midTreshold.</param>
        /// <param name="maxTreshold">maxTreshold.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="unitOfMeasureCode">unitOfMeasureCode.</param>
        /// <param name="categoryColor">categoryColor.</param>
        /// <param name="visibleInRoutingDetails">visibleInRoutingDetails.</param>
        public InlineResponseDefault3Value(string odataEtag = default(string), string hubName = default(string), string deviceId = default(string), string key = default(string), string description = default(string), string category = default(string), decimal? categoryInt = default(decimal?), string categoryCaption = default(string), decimal? sequence = default(decimal?), string type = default(string), decimal? typeInt = default(decimal?), string typeCaption = default(string), string minTreshold = default(string), string midTreshold = default(string), string maxTreshold = default(string), bool? enabled = default(bool?), string unitOfMeasureCode = default(string), string categoryColor = default(string), bool? visibleInRoutingDetails = default(bool?))
        {
            this.OdataEtag = odataEtag;
            this.HubName = hubName;
            this.DeviceId = deviceId;
            this.Key = key;
            this.Description = description;
            this.Category = category;
            this.CategoryInt = categoryInt;
            this.CategoryCaption = categoryCaption;
            this.Sequence = sequence;
            this.Type = type;
            this.TypeInt = typeInt;
            this.TypeCaption = typeCaption;
            this.MinTreshold = minTreshold;
            this.MidTreshold = midTreshold;
            this.MaxTreshold = maxTreshold;
            this.Enabled = enabled;
            this.UnitOfMeasureCode = unitOfMeasureCode;
            this.CategoryColor = categoryColor;
            this.VisibleInRoutingDetails = visibleInRoutingDetails;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// hubName
        /// </summary>
        /// <value>hubName</value>
        [DataMember(Name="hubName", EmitDefaultValue=false)]
        public string HubName { get; set; }

        /// <summary>
        /// deviceId
        /// </summary>
        /// <value>deviceId</value>
        [DataMember(Name="deviceId", EmitDefaultValue=false)]
        public string DeviceId { get; set; }

        /// <summary>
        /// key
        /// </summary>
        /// <value>key</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// category
        /// </summary>
        /// <value>category</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// categoryInt
        /// </summary>
        /// <value>categoryInt</value>
        [DataMember(Name="categoryInt", EmitDefaultValue=false)]
        public decimal? CategoryInt { get; set; }

        /// <summary>
        /// categoryCaption
        /// </summary>
        /// <value>categoryCaption</value>
        [DataMember(Name="categoryCaption", EmitDefaultValue=false)]
        public string CategoryCaption { get; set; }

        /// <summary>
        /// sequence
        /// </summary>
        /// <value>sequence</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public decimal? Sequence { get; set; }

        /// <summary>
        /// type
        /// </summary>
        /// <value>type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// typeInt
        /// </summary>
        /// <value>typeInt</value>
        [DataMember(Name="typeInt", EmitDefaultValue=false)]
        public decimal? TypeInt { get; set; }

        /// <summary>
        /// typeCaption
        /// </summary>
        /// <value>typeCaption</value>
        [DataMember(Name="typeCaption", EmitDefaultValue=false)]
        public string TypeCaption { get; set; }

        /// <summary>
        /// minTreshold
        /// </summary>
        /// <value>minTreshold</value>
        [DataMember(Name="minTreshold", EmitDefaultValue=false)]
        public string MinTreshold { get; set; }

        /// <summary>
        /// midTreshold
        /// </summary>
        /// <value>midTreshold</value>
        [DataMember(Name="midTreshold", EmitDefaultValue=false)]
        public string MidTreshold { get; set; }

        /// <summary>
        /// maxTreshold
        /// </summary>
        /// <value>maxTreshold</value>
        [DataMember(Name="maxTreshold", EmitDefaultValue=false)]
        public string MaxTreshold { get; set; }

        /// <summary>
        /// enabled
        /// </summary>
        /// <value>enabled</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// unitOfMeasureCode
        /// </summary>
        /// <value>unitOfMeasureCode</value>
        [DataMember(Name="unitOfMeasureCode", EmitDefaultValue=false)]
        public string UnitOfMeasureCode { get; set; }

        /// <summary>
        /// categoryColor
        /// </summary>
        /// <value>categoryColor</value>
        [DataMember(Name="categoryColor", EmitDefaultValue=false)]
        public string CategoryColor { get; set; }

        /// <summary>
        /// visibleInRoutingDetails
        /// </summary>
        /// <value>visibleInRoutingDetails</value>
        [DataMember(Name="visibleInRoutingDetails", EmitDefaultValue=false)]
        public bool? VisibleInRoutingDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault3Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  HubName: ").Append(HubName).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CategoryInt: ").Append(CategoryInt).Append("\n");
            sb.Append("  CategoryCaption: ").Append(CategoryCaption).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeInt: ").Append(TypeInt).Append("\n");
            sb.Append("  TypeCaption: ").Append(TypeCaption).Append("\n");
            sb.Append("  MinTreshold: ").Append(MinTreshold).Append("\n");
            sb.Append("  MidTreshold: ").Append(MidTreshold).Append("\n");
            sb.Append("  MaxTreshold: ").Append(MaxTreshold).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  UnitOfMeasureCode: ").Append(UnitOfMeasureCode).Append("\n");
            sb.Append("  CategoryColor: ").Append(CategoryColor).Append("\n");
            sb.Append("  VisibleInRoutingDetails: ").Append(VisibleInRoutingDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault3Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault3Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault3Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault3Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.HubName == input.HubName ||
                    (this.HubName != null &&
                    this.HubName.Equals(input.HubName))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.CategoryInt == input.CategoryInt ||
                    (this.CategoryInt != null &&
                    this.CategoryInt.Equals(input.CategoryInt))
                ) && 
                (
                    this.CategoryCaption == input.CategoryCaption ||
                    (this.CategoryCaption != null &&
                    this.CategoryCaption.Equals(input.CategoryCaption))
                ) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TypeInt == input.TypeInt ||
                    (this.TypeInt != null &&
                    this.TypeInt.Equals(input.TypeInt))
                ) && 
                (
                    this.TypeCaption == input.TypeCaption ||
                    (this.TypeCaption != null &&
                    this.TypeCaption.Equals(input.TypeCaption))
                ) && 
                (
                    this.MinTreshold == input.MinTreshold ||
                    (this.MinTreshold != null &&
                    this.MinTreshold.Equals(input.MinTreshold))
                ) && 
                (
                    this.MidTreshold == input.MidTreshold ||
                    (this.MidTreshold != null &&
                    this.MidTreshold.Equals(input.MidTreshold))
                ) && 
                (
                    this.MaxTreshold == input.MaxTreshold ||
                    (this.MaxTreshold != null &&
                    this.MaxTreshold.Equals(input.MaxTreshold))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.UnitOfMeasureCode == input.UnitOfMeasureCode ||
                    (this.UnitOfMeasureCode != null &&
                    this.UnitOfMeasureCode.Equals(input.UnitOfMeasureCode))
                ) && 
                (
                    this.CategoryColor == input.CategoryColor ||
                    (this.CategoryColor != null &&
                    this.CategoryColor.Equals(input.CategoryColor))
                ) && 
                (
                    this.VisibleInRoutingDetails == input.VisibleInRoutingDetails ||
                    (this.VisibleInRoutingDetails != null &&
                    this.VisibleInRoutingDetails.Equals(input.VisibleInRoutingDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.HubName != null)
                    hashCode = hashCode * 59 + this.HubName.GetHashCode();
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.CategoryInt != null)
                    hashCode = hashCode * 59 + this.CategoryInt.GetHashCode();
                if (this.CategoryCaption != null)
                    hashCode = hashCode * 59 + this.CategoryCaption.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TypeInt != null)
                    hashCode = hashCode * 59 + this.TypeInt.GetHashCode();
                if (this.TypeCaption != null)
                    hashCode = hashCode * 59 + this.TypeCaption.GetHashCode();
                if (this.MinTreshold != null)
                    hashCode = hashCode * 59 + this.MinTreshold.GetHashCode();
                if (this.MidTreshold != null)
                    hashCode = hashCode * 59 + this.MidTreshold.GetHashCode();
                if (this.MaxTreshold != null)
                    hashCode = hashCode * 59 + this.MaxTreshold.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.UnitOfMeasureCode != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasureCode.GetHashCode();
                if (this.CategoryColor != null)
                    hashCode = hashCode * 59 + this.CategoryColor.GetHashCode();
                if (this.VisibleInRoutingDetails != null)
                    hashCode = hashCode * 59 + this.VisibleInRoutingDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
