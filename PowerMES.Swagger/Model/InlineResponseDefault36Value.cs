/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault36Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault36Value :  IEquatable<InlineResponseDefault36Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault36Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="itemNo">itemNo.</param>
        /// <param name="serialNo">serialNo.</param>
        /// <param name="lotNo">lotNo.</param>
        /// <param name="packageNo">packageNo.</param>
        /// <param name="quantityBase">quantityBase.</param>
        /// <param name="sourceType">sourceType.</param>
        /// <param name="sourceSubtype">sourceSubtype.</param>
        /// <param name="sourceID">sourceID.</param>
        /// <param name="sourceBatchName">sourceBatchName.</param>
        /// <param name="sourceRefNo">sourceRefNo.</param>
        /// <param name="sourceProdOrderLine">sourceProdOrderLine.</param>
        /// <param name="baseUnitOfMeasure">baseUnitOfMeasure.</param>
        public InlineResponseDefault36Value(string odataEtag = default(string), string systemId = default(string), string itemNo = default(string), string serialNo = default(string), string lotNo = default(string), string packageNo = default(string), float? quantityBase = default(float?), decimal? sourceType = default(decimal?), string sourceSubtype = default(string), string sourceID = default(string), string sourceBatchName = default(string), decimal? sourceRefNo = default(decimal?), decimal? sourceProdOrderLine = default(decimal?), string baseUnitOfMeasure = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.ItemNo = itemNo;
            this.SerialNo = serialNo;
            this.LotNo = lotNo;
            this.PackageNo = packageNo;
            this.QuantityBase = quantityBase;
            this.SourceType = sourceType;
            this.SourceSubtype = sourceSubtype;
            this.SourceID = sourceID;
            this.SourceBatchName = sourceBatchName;
            this.SourceRefNo = sourceRefNo;
            this.SourceProdOrderLine = sourceProdOrderLine;
            this.BaseUnitOfMeasure = baseUnitOfMeasure;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// itemNo
        /// </summary>
        /// <value>itemNo</value>
        [DataMember(Name="itemNo", EmitDefaultValue=false)]
        public string ItemNo { get; set; }

        /// <summary>
        /// serialNo
        /// </summary>
        /// <value>serialNo</value>
        [DataMember(Name="serialNo", EmitDefaultValue=false)]
        public string SerialNo { get; set; }

        /// <summary>
        /// lotNo
        /// </summary>
        /// <value>lotNo</value>
        [DataMember(Name="lotNo", EmitDefaultValue=false)]
        public string LotNo { get; set; }

        /// <summary>
        /// packageNo
        /// </summary>
        /// <value>packageNo</value>
        [DataMember(Name="packageNo", EmitDefaultValue=false)]
        public string PackageNo { get; set; }

        /// <summary>
        /// quantityBase
        /// </summary>
        /// <value>quantityBase</value>
        [DataMember(Name="quantityBase", EmitDefaultValue=false)]
        public float? QuantityBase { get; set; }

        /// <summary>
        /// sourceType
        /// </summary>
        /// <value>sourceType</value>
        [DataMember(Name="sourceType", EmitDefaultValue=false)]
        public decimal? SourceType { get; set; }

        /// <summary>
        /// sourceSubtype
        /// </summary>
        /// <value>sourceSubtype</value>
        [DataMember(Name="sourceSubtype", EmitDefaultValue=false)]
        public string SourceSubtype { get; set; }

        /// <summary>
        /// sourceID
        /// </summary>
        /// <value>sourceID</value>
        [DataMember(Name="sourceID", EmitDefaultValue=false)]
        public string SourceID { get; set; }

        /// <summary>
        /// sourceBatchName
        /// </summary>
        /// <value>sourceBatchName</value>
        [DataMember(Name="sourceBatchName", EmitDefaultValue=false)]
        public string SourceBatchName { get; set; }

        /// <summary>
        /// sourceRefNo
        /// </summary>
        /// <value>sourceRefNo</value>
        [DataMember(Name="sourceRefNo", EmitDefaultValue=false)]
        public decimal? SourceRefNo { get; set; }

        /// <summary>
        /// sourceProdOrderLine
        /// </summary>
        /// <value>sourceProdOrderLine</value>
        [DataMember(Name="sourceProdOrderLine", EmitDefaultValue=false)]
        public decimal? SourceProdOrderLine { get; set; }

        /// <summary>
        /// baseUnitOfMeasure
        /// </summary>
        /// <value>baseUnitOfMeasure</value>
        [DataMember(Name="baseUnitOfMeasure", EmitDefaultValue=false)]
        public string BaseUnitOfMeasure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault36Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  ItemNo: ").Append(ItemNo).Append("\n");
            sb.Append("  SerialNo: ").Append(SerialNo).Append("\n");
            sb.Append("  LotNo: ").Append(LotNo).Append("\n");
            sb.Append("  PackageNo: ").Append(PackageNo).Append("\n");
            sb.Append("  QuantityBase: ").Append(QuantityBase).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  SourceSubtype: ").Append(SourceSubtype).Append("\n");
            sb.Append("  SourceID: ").Append(SourceID).Append("\n");
            sb.Append("  SourceBatchName: ").Append(SourceBatchName).Append("\n");
            sb.Append("  SourceRefNo: ").Append(SourceRefNo).Append("\n");
            sb.Append("  SourceProdOrderLine: ").Append(SourceProdOrderLine).Append("\n");
            sb.Append("  BaseUnitOfMeasure: ").Append(BaseUnitOfMeasure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault36Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault36Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault36Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault36Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.ItemNo == input.ItemNo ||
                    (this.ItemNo != null &&
                    this.ItemNo.Equals(input.ItemNo))
                ) && 
                (
                    this.SerialNo == input.SerialNo ||
                    (this.SerialNo != null &&
                    this.SerialNo.Equals(input.SerialNo))
                ) && 
                (
                    this.LotNo == input.LotNo ||
                    (this.LotNo != null &&
                    this.LotNo.Equals(input.LotNo))
                ) && 
                (
                    this.PackageNo == input.PackageNo ||
                    (this.PackageNo != null &&
                    this.PackageNo.Equals(input.PackageNo))
                ) && 
                (
                    this.QuantityBase == input.QuantityBase ||
                    (this.QuantityBase != null &&
                    this.QuantityBase.Equals(input.QuantityBase))
                ) && 
                (
                    this.SourceType == input.SourceType ||
                    (this.SourceType != null &&
                    this.SourceType.Equals(input.SourceType))
                ) && 
                (
                    this.SourceSubtype == input.SourceSubtype ||
                    (this.SourceSubtype != null &&
                    this.SourceSubtype.Equals(input.SourceSubtype))
                ) && 
                (
                    this.SourceID == input.SourceID ||
                    (this.SourceID != null &&
                    this.SourceID.Equals(input.SourceID))
                ) && 
                (
                    this.SourceBatchName == input.SourceBatchName ||
                    (this.SourceBatchName != null &&
                    this.SourceBatchName.Equals(input.SourceBatchName))
                ) && 
                (
                    this.SourceRefNo == input.SourceRefNo ||
                    (this.SourceRefNo != null &&
                    this.SourceRefNo.Equals(input.SourceRefNo))
                ) && 
                (
                    this.SourceProdOrderLine == input.SourceProdOrderLine ||
                    (this.SourceProdOrderLine != null &&
                    this.SourceProdOrderLine.Equals(input.SourceProdOrderLine))
                ) && 
                (
                    this.BaseUnitOfMeasure == input.BaseUnitOfMeasure ||
                    (this.BaseUnitOfMeasure != null &&
                    this.BaseUnitOfMeasure.Equals(input.BaseUnitOfMeasure))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.ItemNo != null)
                    hashCode = hashCode * 59 + this.ItemNo.GetHashCode();
                if (this.SerialNo != null)
                    hashCode = hashCode * 59 + this.SerialNo.GetHashCode();
                if (this.LotNo != null)
                    hashCode = hashCode * 59 + this.LotNo.GetHashCode();
                if (this.PackageNo != null)
                    hashCode = hashCode * 59 + this.PackageNo.GetHashCode();
                if (this.QuantityBase != null)
                    hashCode = hashCode * 59 + this.QuantityBase.GetHashCode();
                if (this.SourceType != null)
                    hashCode = hashCode * 59 + this.SourceType.GetHashCode();
                if (this.SourceSubtype != null)
                    hashCode = hashCode * 59 + this.SourceSubtype.GetHashCode();
                if (this.SourceID != null)
                    hashCode = hashCode * 59 + this.SourceID.GetHashCode();
                if (this.SourceBatchName != null)
                    hashCode = hashCode * 59 + this.SourceBatchName.GetHashCode();
                if (this.SourceRefNo != null)
                    hashCode = hashCode * 59 + this.SourceRefNo.GetHashCode();
                if (this.SourceProdOrderLine != null)
                    hashCode = hashCode * 59 + this.SourceProdOrderLine.GetHashCode();
                if (this.BaseUnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.BaseUnitOfMeasure.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
