/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault35Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault35Value :  IEquatable<InlineResponseDefault35Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault35Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="itemNo">itemNo.</param>
        /// <param name="variantCode">variantCode.</param>
        /// <param name="description">description.</param>
        /// <param name="remainingQtyBase">remainingQtyBase.</param>
        /// <param name="remainingQuantity">remainingQuantity.</param>
        /// <param name="unitOfMeasureCode">unitOfMeasureCode.</param>
        /// <param name="trackingType">trackingType.</param>
        /// <param name="trackingTypeAsInt">trackingTypeAsInt.</param>
        /// <param name="trackingTypeName">trackingTypeName.</param>
        /// <param name="trackedQuantity">trackedQuantity.</param>
        /// <param name="undefinedQuantity">undefinedQuantity.</param>
        /// <param name="prodOrderNo">prodOrderNo.</param>
        /// <param name="prodOrderLineNo">prodOrderLineNo.</param>
        /// <param name="prodOrderCompLineNo">prodOrderCompLineNo.</param>
        /// <param name="routingNo">routingNo.</param>
        /// <param name="routingReferenceNo">routingReferenceNo.</param>
        /// <param name="baseUnitOfMeasure">baseUnitOfMeasure.</param>
        public InlineResponseDefault35Value(string odataEtag = default(string), string systemId = default(string), string itemNo = default(string), string variantCode = default(string), string description = default(string), float? remainingQtyBase = default(float?), float? remainingQuantity = default(float?), string unitOfMeasureCode = default(string), string trackingType = default(string), decimal? trackingTypeAsInt = default(decimal?), string trackingTypeName = default(string), decimal? trackedQuantity = default(decimal?), decimal? undefinedQuantity = default(decimal?), string prodOrderNo = default(string), decimal? prodOrderLineNo = default(decimal?), decimal? prodOrderCompLineNo = default(decimal?), string routingNo = default(string), decimal? routingReferenceNo = default(decimal?), string baseUnitOfMeasure = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.ItemNo = itemNo;
            this.VariantCode = variantCode;
            this.Description = description;
            this.RemainingQtyBase = remainingQtyBase;
            this.RemainingQuantity = remainingQuantity;
            this.UnitOfMeasureCode = unitOfMeasureCode;
            this.TrackingType = trackingType;
            this.TrackingTypeAsInt = trackingTypeAsInt;
            this.TrackingTypeName = trackingTypeName;
            this.TrackedQuantity = trackedQuantity;
            this.UndefinedQuantity = undefinedQuantity;
            this.ProdOrderNo = prodOrderNo;
            this.ProdOrderLineNo = prodOrderLineNo;
            this.ProdOrderCompLineNo = prodOrderCompLineNo;
            this.RoutingNo = routingNo;
            this.RoutingReferenceNo = routingReferenceNo;
            this.BaseUnitOfMeasure = baseUnitOfMeasure;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// itemNo
        /// </summary>
        /// <value>itemNo</value>
        [DataMember(Name="itemNo", EmitDefaultValue=false)]
        public string ItemNo { get; set; }

        /// <summary>
        /// variantCode
        /// </summary>
        /// <value>variantCode</value>
        [DataMember(Name="variantCode", EmitDefaultValue=false)]
        public string VariantCode { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// remainingQtyBase
        /// </summary>
        /// <value>remainingQtyBase</value>
        [DataMember(Name="remainingQtyBase", EmitDefaultValue=false)]
        public float? RemainingQtyBase { get; set; }

        /// <summary>
        /// remainingQuantity
        /// </summary>
        /// <value>remainingQuantity</value>
        [DataMember(Name="remainingQuantity", EmitDefaultValue=false)]
        public float? RemainingQuantity { get; set; }

        /// <summary>
        /// unitOfMeasureCode
        /// </summary>
        /// <value>unitOfMeasureCode</value>
        [DataMember(Name="unitOfMeasureCode", EmitDefaultValue=false)]
        public string UnitOfMeasureCode { get; set; }

        /// <summary>
        /// trackingType
        /// </summary>
        /// <value>trackingType</value>
        [DataMember(Name="trackingType", EmitDefaultValue=false)]
        public string TrackingType { get; set; }

        /// <summary>
        /// trackingTypeAsInt
        /// </summary>
        /// <value>trackingTypeAsInt</value>
        [DataMember(Name="trackingTypeAsInt", EmitDefaultValue=false)]
        public decimal? TrackingTypeAsInt { get; set; }

        /// <summary>
        /// trackingTypeName
        /// </summary>
        /// <value>trackingTypeName</value>
        [DataMember(Name="trackingTypeName", EmitDefaultValue=false)]
        public string TrackingTypeName { get; set; }

        /// <summary>
        /// trackedQuantity
        /// </summary>
        /// <value>trackedQuantity</value>
        [DataMember(Name="trackedQuantity", EmitDefaultValue=false)]
        public decimal? TrackedQuantity { get; set; }

        /// <summary>
        /// undefinedQuantity
        /// </summary>
        /// <value>undefinedQuantity</value>
        [DataMember(Name="undefinedQuantity", EmitDefaultValue=false)]
        public decimal? UndefinedQuantity { get; set; }

        /// <summary>
        /// prodOrderNo
        /// </summary>
        /// <value>prodOrderNo</value>
        [DataMember(Name="prodOrderNo", EmitDefaultValue=false)]
        public string ProdOrderNo { get; set; }

        /// <summary>
        /// prodOrderLineNo
        /// </summary>
        /// <value>prodOrderLineNo</value>
        [DataMember(Name="prodOrderLineNo", EmitDefaultValue=false)]
        public decimal? ProdOrderLineNo { get; set; }

        /// <summary>
        /// prodOrderCompLineNo
        /// </summary>
        /// <value>prodOrderCompLineNo</value>
        [DataMember(Name="prodOrderCompLineNo", EmitDefaultValue=false)]
        public decimal? ProdOrderCompLineNo { get; set; }

        /// <summary>
        /// routingNo
        /// </summary>
        /// <value>routingNo</value>
        [DataMember(Name="routingNo", EmitDefaultValue=false)]
        public string RoutingNo { get; set; }

        /// <summary>
        /// routingReferenceNo
        /// </summary>
        /// <value>routingReferenceNo</value>
        [DataMember(Name="routingReferenceNo", EmitDefaultValue=false)]
        public decimal? RoutingReferenceNo { get; set; }

        /// <summary>
        /// baseUnitOfMeasure
        /// </summary>
        /// <value>baseUnitOfMeasure</value>
        [DataMember(Name="baseUnitOfMeasure", EmitDefaultValue=false)]
        public string BaseUnitOfMeasure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault35Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  ItemNo: ").Append(ItemNo).Append("\n");
            sb.Append("  VariantCode: ").Append(VariantCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RemainingQtyBase: ").Append(RemainingQtyBase).Append("\n");
            sb.Append("  RemainingQuantity: ").Append(RemainingQuantity).Append("\n");
            sb.Append("  UnitOfMeasureCode: ").Append(UnitOfMeasureCode).Append("\n");
            sb.Append("  TrackingType: ").Append(TrackingType).Append("\n");
            sb.Append("  TrackingTypeAsInt: ").Append(TrackingTypeAsInt).Append("\n");
            sb.Append("  TrackingTypeName: ").Append(TrackingTypeName).Append("\n");
            sb.Append("  TrackedQuantity: ").Append(TrackedQuantity).Append("\n");
            sb.Append("  UndefinedQuantity: ").Append(UndefinedQuantity).Append("\n");
            sb.Append("  ProdOrderNo: ").Append(ProdOrderNo).Append("\n");
            sb.Append("  ProdOrderLineNo: ").Append(ProdOrderLineNo).Append("\n");
            sb.Append("  ProdOrderCompLineNo: ").Append(ProdOrderCompLineNo).Append("\n");
            sb.Append("  RoutingNo: ").Append(RoutingNo).Append("\n");
            sb.Append("  RoutingReferenceNo: ").Append(RoutingReferenceNo).Append("\n");
            sb.Append("  BaseUnitOfMeasure: ").Append(BaseUnitOfMeasure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault35Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault35Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault35Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault35Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.ItemNo == input.ItemNo ||
                    (this.ItemNo != null &&
                    this.ItemNo.Equals(input.ItemNo))
                ) && 
                (
                    this.VariantCode == input.VariantCode ||
                    (this.VariantCode != null &&
                    this.VariantCode.Equals(input.VariantCode))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.RemainingQtyBase == input.RemainingQtyBase ||
                    (this.RemainingQtyBase != null &&
                    this.RemainingQtyBase.Equals(input.RemainingQtyBase))
                ) && 
                (
                    this.RemainingQuantity == input.RemainingQuantity ||
                    (this.RemainingQuantity != null &&
                    this.RemainingQuantity.Equals(input.RemainingQuantity))
                ) && 
                (
                    this.UnitOfMeasureCode == input.UnitOfMeasureCode ||
                    (this.UnitOfMeasureCode != null &&
                    this.UnitOfMeasureCode.Equals(input.UnitOfMeasureCode))
                ) && 
                (
                    this.TrackingType == input.TrackingType ||
                    (this.TrackingType != null &&
                    this.TrackingType.Equals(input.TrackingType))
                ) && 
                (
                    this.TrackingTypeAsInt == input.TrackingTypeAsInt ||
                    (this.TrackingTypeAsInt != null &&
                    this.TrackingTypeAsInt.Equals(input.TrackingTypeAsInt))
                ) && 
                (
                    this.TrackingTypeName == input.TrackingTypeName ||
                    (this.TrackingTypeName != null &&
                    this.TrackingTypeName.Equals(input.TrackingTypeName))
                ) && 
                (
                    this.TrackedQuantity == input.TrackedQuantity ||
                    (this.TrackedQuantity != null &&
                    this.TrackedQuantity.Equals(input.TrackedQuantity))
                ) && 
                (
                    this.UndefinedQuantity == input.UndefinedQuantity ||
                    (this.UndefinedQuantity != null &&
                    this.UndefinedQuantity.Equals(input.UndefinedQuantity))
                ) && 
                (
                    this.ProdOrderNo == input.ProdOrderNo ||
                    (this.ProdOrderNo != null &&
                    this.ProdOrderNo.Equals(input.ProdOrderNo))
                ) && 
                (
                    this.ProdOrderLineNo == input.ProdOrderLineNo ||
                    (this.ProdOrderLineNo != null &&
                    this.ProdOrderLineNo.Equals(input.ProdOrderLineNo))
                ) && 
                (
                    this.ProdOrderCompLineNo == input.ProdOrderCompLineNo ||
                    (this.ProdOrderCompLineNo != null &&
                    this.ProdOrderCompLineNo.Equals(input.ProdOrderCompLineNo))
                ) && 
                (
                    this.RoutingNo == input.RoutingNo ||
                    (this.RoutingNo != null &&
                    this.RoutingNo.Equals(input.RoutingNo))
                ) && 
                (
                    this.RoutingReferenceNo == input.RoutingReferenceNo ||
                    (this.RoutingReferenceNo != null &&
                    this.RoutingReferenceNo.Equals(input.RoutingReferenceNo))
                ) && 
                (
                    this.BaseUnitOfMeasure == input.BaseUnitOfMeasure ||
                    (this.BaseUnitOfMeasure != null &&
                    this.BaseUnitOfMeasure.Equals(input.BaseUnitOfMeasure))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.ItemNo != null)
                    hashCode = hashCode * 59 + this.ItemNo.GetHashCode();
                if (this.VariantCode != null)
                    hashCode = hashCode * 59 + this.VariantCode.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.RemainingQtyBase != null)
                    hashCode = hashCode * 59 + this.RemainingQtyBase.GetHashCode();
                if (this.RemainingQuantity != null)
                    hashCode = hashCode * 59 + this.RemainingQuantity.GetHashCode();
                if (this.UnitOfMeasureCode != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasureCode.GetHashCode();
                if (this.TrackingType != null)
                    hashCode = hashCode * 59 + this.TrackingType.GetHashCode();
                if (this.TrackingTypeAsInt != null)
                    hashCode = hashCode * 59 + this.TrackingTypeAsInt.GetHashCode();
                if (this.TrackingTypeName != null)
                    hashCode = hashCode * 59 + this.TrackingTypeName.GetHashCode();
                if (this.TrackedQuantity != null)
                    hashCode = hashCode * 59 + this.TrackedQuantity.GetHashCode();
                if (this.UndefinedQuantity != null)
                    hashCode = hashCode * 59 + this.UndefinedQuantity.GetHashCode();
                if (this.ProdOrderNo != null)
                    hashCode = hashCode * 59 + this.ProdOrderNo.GetHashCode();
                if (this.ProdOrderLineNo != null)
                    hashCode = hashCode * 59 + this.ProdOrderLineNo.GetHashCode();
                if (this.ProdOrderCompLineNo != null)
                    hashCode = hashCode * 59 + this.ProdOrderCompLineNo.GetHashCode();
                if (this.RoutingNo != null)
                    hashCode = hashCode * 59 + this.RoutingNo.GetHashCode();
                if (this.RoutingReferenceNo != null)
                    hashCode = hashCode * 59 + this.RoutingReferenceNo.GetHashCode();
                if (this.BaseUnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.BaseUnitOfMeasure.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
