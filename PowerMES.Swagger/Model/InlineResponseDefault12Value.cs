/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault12Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault12Value :  IEquatable<InlineResponseDefault12Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault12Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="entryNo">entryNo.</param>
        /// <param name="badgeNo">badgeNo.</param>
        /// <param name="employeeNo">employeeNo.</param>
        /// <param name="sourceType">sourceType.</param>
        /// <param name="sourceTypeAsInt">sourceTypeAsInt.</param>
        /// <param name="sourceTypeName">sourceTypeName.</param>
        /// <param name="status">status.</param>
        /// <param name="statusAsInt">statusAsInt.</param>
        /// <param name="statusName">statusName.</param>
        /// <param name="entryType">entryType.</param>
        /// <param name="entryTypeAsInt">entryTypeAsInt.</param>
        /// <param name="entryTypeName">entryTypeName.</param>
        /// <param name="type">type.</param>
        /// <param name="typeAsInt">typeAsInt.</param>
        /// <param name="typeName">typeName.</param>
        /// <param name="no">no.</param>
        /// <param name="workCenterNo">workCenterNo.</param>
        /// <param name="prodOrderNo">prodOrderNo.</param>
        /// <param name="prodOrderLineNo">prodOrderLineNo.</param>
        /// <param name="operationNo">operationNo.</param>
        /// <param name="operationDescription">operationDescription.</param>
        /// <param name="itemNo">itemNo.</param>
        /// <param name="lineDescriptionRec">lineDescriptionRec.</param>
        /// <param name="lineDescription2Rec">lineDescription2Rec.</param>
        /// <param name="lineDescription">lineDescription.</param>
        /// <param name="lineDescription2">lineDescription2.</param>
        /// <param name="statusDetail">statusDetail.</param>
        /// <param name="statusDetailAsInt">statusDetailAsInt.</param>
        /// <param name="statusDetailCaption">statusDetailCaption.</param>
        /// <param name="scrapQuantity">scrapQuantity.</param>
        /// <param name="rework">rework.</param>
        /// <param name="reworkEntryExists">reworkEntryExists.</param>
        /// <param name="manTimeManagementTypeAsInt">manTimeManagementTypeAsInt.</param>
        /// <param name="hidden">hidden.</param>
        /// <param name="systemCreatedEntry">systemCreatedEntry.</param>
        /// <param name="panelId">panelId.</param>
        /// <param name="hasPostingError">hasPostingError.</param>
        public InlineResponseDefault12Value(string odataEtag = default(string), string systemId = default(string), decimal? entryNo = default(decimal?), string badgeNo = default(string), string employeeNo = default(string), string sourceType = default(string), decimal? sourceTypeAsInt = default(decimal?), string sourceTypeName = default(string), string status = default(string), decimal? statusAsInt = default(decimal?), string statusName = default(string), string entryType = default(string), decimal? entryTypeAsInt = default(decimal?), string entryTypeName = default(string), string type = default(string), decimal? typeAsInt = default(decimal?), string typeName = default(string), string no = default(string), string workCenterNo = default(string), string prodOrderNo = default(string), decimal? prodOrderLineNo = default(decimal?), string operationNo = default(string), string operationDescription = default(string), string itemNo = default(string), string lineDescriptionRec = default(string), string lineDescription2Rec = default(string), string lineDescription = default(string), string lineDescription2 = default(string), string statusDetail = default(string), decimal? statusDetailAsInt = default(decimal?), string statusDetailCaption = default(string), float? scrapQuantity = default(float?), bool? rework = default(bool?), bool? reworkEntryExists = default(bool?), decimal? manTimeManagementTypeAsInt = default(decimal?), bool? hidden = default(bool?), bool? systemCreatedEntry = default(bool?), string panelId = default(string), bool? hasPostingError = default(bool?))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.EntryNo = entryNo;
            this.BadgeNo = badgeNo;
            this.EmployeeNo = employeeNo;
            this.SourceType = sourceType;
            this.SourceTypeAsInt = sourceTypeAsInt;
            this.SourceTypeName = sourceTypeName;
            this.Status = status;
            this.StatusAsInt = statusAsInt;
            this.StatusName = statusName;
            this.EntryType = entryType;
            this.EntryTypeAsInt = entryTypeAsInt;
            this.EntryTypeName = entryTypeName;
            this.Type = type;
            this.TypeAsInt = typeAsInt;
            this.TypeName = typeName;
            this.No = no;
            this.WorkCenterNo = workCenterNo;
            this.ProdOrderNo = prodOrderNo;
            this.ProdOrderLineNo = prodOrderLineNo;
            this.OperationNo = operationNo;
            this.OperationDescription = operationDescription;
            this.ItemNo = itemNo;
            this.LineDescriptionRec = lineDescriptionRec;
            this.LineDescription2Rec = lineDescription2Rec;
            this.LineDescription = lineDescription;
            this.LineDescription2 = lineDescription2;
            this.StatusDetail = statusDetail;
            this.StatusDetailAsInt = statusDetailAsInt;
            this.StatusDetailCaption = statusDetailCaption;
            this.ScrapQuantity = scrapQuantity;
            this.Rework = rework;
            this.ReworkEntryExists = reworkEntryExists;
            this.ManTimeManagementTypeAsInt = manTimeManagementTypeAsInt;
            this.Hidden = hidden;
            this.SystemCreatedEntry = systemCreatedEntry;
            this.PanelId = panelId;
            this.HasPostingError = hasPostingError;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// entryNo
        /// </summary>
        /// <value>entryNo</value>
        [DataMember(Name="entryNo", EmitDefaultValue=false)]
        public decimal? EntryNo { get; set; }

        /// <summary>
        /// badgeNo
        /// </summary>
        /// <value>badgeNo</value>
        [DataMember(Name="badgeNo", EmitDefaultValue=false)]
        public string BadgeNo { get; set; }

        /// <summary>
        /// employeeNo
        /// </summary>
        /// <value>employeeNo</value>
        [DataMember(Name="employeeNo", EmitDefaultValue=false)]
        public string EmployeeNo { get; set; }

        /// <summary>
        /// sourceType
        /// </summary>
        /// <value>sourceType</value>
        [DataMember(Name="sourceType", EmitDefaultValue=false)]
        public string SourceType { get; set; }

        /// <summary>
        /// sourceTypeAsInt
        /// </summary>
        /// <value>sourceTypeAsInt</value>
        [DataMember(Name="sourceTypeAsInt", EmitDefaultValue=false)]
        public decimal? SourceTypeAsInt { get; set; }

        /// <summary>
        /// sourceTypeName
        /// </summary>
        /// <value>sourceTypeName</value>
        [DataMember(Name="sourceTypeName", EmitDefaultValue=false)]
        public string SourceTypeName { get; set; }

        /// <summary>
        /// status
        /// </summary>
        /// <value>status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// statusAsInt
        /// </summary>
        /// <value>statusAsInt</value>
        [DataMember(Name="statusAsInt", EmitDefaultValue=false)]
        public decimal? StatusAsInt { get; set; }

        /// <summary>
        /// statusName
        /// </summary>
        /// <value>statusName</value>
        [DataMember(Name="statusName", EmitDefaultValue=false)]
        public string StatusName { get; set; }

        /// <summary>
        /// entryType
        /// </summary>
        /// <value>entryType</value>
        [DataMember(Name="entryType", EmitDefaultValue=false)]
        public string EntryType { get; set; }

        /// <summary>
        /// entryTypeAsInt
        /// </summary>
        /// <value>entryTypeAsInt</value>
        [DataMember(Name="entryTypeAsInt", EmitDefaultValue=false)]
        public decimal? EntryTypeAsInt { get; set; }

        /// <summary>
        /// entryTypeName
        /// </summary>
        /// <value>entryTypeName</value>
        [DataMember(Name="entryTypeName", EmitDefaultValue=false)]
        public string EntryTypeName { get; set; }

        /// <summary>
        /// type
        /// </summary>
        /// <value>type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// typeAsInt
        /// </summary>
        /// <value>typeAsInt</value>
        [DataMember(Name="typeAsInt", EmitDefaultValue=false)]
        public decimal? TypeAsInt { get; set; }

        /// <summary>
        /// typeName
        /// </summary>
        /// <value>typeName</value>
        [DataMember(Name="typeName", EmitDefaultValue=false)]
        public string TypeName { get; set; }

        /// <summary>
        /// no
        /// </summary>
        /// <value>no</value>
        [DataMember(Name="no", EmitDefaultValue=false)]
        public string No { get; set; }

        /// <summary>
        /// workCenterNo
        /// </summary>
        /// <value>workCenterNo</value>
        [DataMember(Name="workCenterNo", EmitDefaultValue=false)]
        public string WorkCenterNo { get; set; }

        /// <summary>
        /// prodOrderNo
        /// </summary>
        /// <value>prodOrderNo</value>
        [DataMember(Name="prodOrderNo", EmitDefaultValue=false)]
        public string ProdOrderNo { get; set; }

        /// <summary>
        /// prodOrderLineNo
        /// </summary>
        /// <value>prodOrderLineNo</value>
        [DataMember(Name="prodOrderLineNo", EmitDefaultValue=false)]
        public decimal? ProdOrderLineNo { get; set; }

        /// <summary>
        /// operationNo
        /// </summary>
        /// <value>operationNo</value>
        [DataMember(Name="operationNo", EmitDefaultValue=false)]
        public string OperationNo { get; set; }

        /// <summary>
        /// operationDescription
        /// </summary>
        /// <value>operationDescription</value>
        [DataMember(Name="operationDescription", EmitDefaultValue=false)]
        public string OperationDescription { get; set; }

        /// <summary>
        /// itemNo
        /// </summary>
        /// <value>itemNo</value>
        [DataMember(Name="itemNo", EmitDefaultValue=false)]
        public string ItemNo { get; set; }

        /// <summary>
        /// lineDescriptionRec
        /// </summary>
        /// <value>lineDescriptionRec</value>
        [DataMember(Name="lineDescriptionRec", EmitDefaultValue=false)]
        public string LineDescriptionRec { get; set; }

        /// <summary>
        /// lineDescription2Rec
        /// </summary>
        /// <value>lineDescription2Rec</value>
        [DataMember(Name="lineDescription2Rec", EmitDefaultValue=false)]
        public string LineDescription2Rec { get; set; }

        /// <summary>
        /// lineDescription
        /// </summary>
        /// <value>lineDescription</value>
        [DataMember(Name="lineDescription", EmitDefaultValue=false)]
        public string LineDescription { get; set; }

        /// <summary>
        /// lineDescription2
        /// </summary>
        /// <value>lineDescription2</value>
        [DataMember(Name="lineDescription2", EmitDefaultValue=false)]
        public string LineDescription2 { get; set; }

        /// <summary>
        /// statusDetail
        /// </summary>
        /// <value>statusDetail</value>
        [DataMember(Name="statusDetail", EmitDefaultValue=false)]
        public string StatusDetail { get; set; }

        /// <summary>
        /// statusDetailAsInt
        /// </summary>
        /// <value>statusDetailAsInt</value>
        [DataMember(Name="statusDetailAsInt", EmitDefaultValue=false)]
        public decimal? StatusDetailAsInt { get; set; }

        /// <summary>
        /// statusDetailCaption
        /// </summary>
        /// <value>statusDetailCaption</value>
        [DataMember(Name="statusDetailCaption", EmitDefaultValue=false)]
        public string StatusDetailCaption { get; set; }

        /// <summary>
        /// scrapQuantity
        /// </summary>
        /// <value>scrapQuantity</value>
        [DataMember(Name="scrapQuantity", EmitDefaultValue=false)]
        public float? ScrapQuantity { get; set; }

        /// <summary>
        /// rework
        /// </summary>
        /// <value>rework</value>
        [DataMember(Name="rework", EmitDefaultValue=false)]
        public bool? Rework { get; set; }

        /// <summary>
        /// reworkEntryExists
        /// </summary>
        /// <value>reworkEntryExists</value>
        [DataMember(Name="reworkEntryExists", EmitDefaultValue=false)]
        public bool? ReworkEntryExists { get; set; }

        /// <summary>
        /// manTimeManagementTypeAsInt
        /// </summary>
        /// <value>manTimeManagementTypeAsInt</value>
        [DataMember(Name="manTimeManagementTypeAsInt", EmitDefaultValue=false)]
        public decimal? ManTimeManagementTypeAsInt { get; set; }

        /// <summary>
        /// hidden
        /// </summary>
        /// <value>hidden</value>
        [DataMember(Name="hidden", EmitDefaultValue=false)]
        public bool? Hidden { get; set; }

        /// <summary>
        /// systemCreatedEntry
        /// </summary>
        /// <value>systemCreatedEntry</value>
        [DataMember(Name="systemCreatedEntry", EmitDefaultValue=false)]
        public bool? SystemCreatedEntry { get; set; }

        /// <summary>
        /// panelId
        /// </summary>
        /// <value>panelId</value>
        [DataMember(Name="panelId", EmitDefaultValue=false)]
        public string PanelId { get; set; }

        /// <summary>
        /// hasPostingError
        /// </summary>
        /// <value>hasPostingError</value>
        [DataMember(Name="hasPostingError", EmitDefaultValue=false)]
        public bool? HasPostingError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault12Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  EntryNo: ").Append(EntryNo).Append("\n");
            sb.Append("  BadgeNo: ").Append(BadgeNo).Append("\n");
            sb.Append("  EmployeeNo: ").Append(EmployeeNo).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  SourceTypeAsInt: ").Append(SourceTypeAsInt).Append("\n");
            sb.Append("  SourceTypeName: ").Append(SourceTypeName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusAsInt: ").Append(StatusAsInt).Append("\n");
            sb.Append("  StatusName: ").Append(StatusName).Append("\n");
            sb.Append("  EntryType: ").Append(EntryType).Append("\n");
            sb.Append("  EntryTypeAsInt: ").Append(EntryTypeAsInt).Append("\n");
            sb.Append("  EntryTypeName: ").Append(EntryTypeName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeAsInt: ").Append(TypeAsInt).Append("\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("  No: ").Append(No).Append("\n");
            sb.Append("  WorkCenterNo: ").Append(WorkCenterNo).Append("\n");
            sb.Append("  ProdOrderNo: ").Append(ProdOrderNo).Append("\n");
            sb.Append("  ProdOrderLineNo: ").Append(ProdOrderLineNo).Append("\n");
            sb.Append("  OperationNo: ").Append(OperationNo).Append("\n");
            sb.Append("  OperationDescription: ").Append(OperationDescription).Append("\n");
            sb.Append("  ItemNo: ").Append(ItemNo).Append("\n");
            sb.Append("  LineDescriptionRec: ").Append(LineDescriptionRec).Append("\n");
            sb.Append("  LineDescription2Rec: ").Append(LineDescription2Rec).Append("\n");
            sb.Append("  LineDescription: ").Append(LineDescription).Append("\n");
            sb.Append("  LineDescription2: ").Append(LineDescription2).Append("\n");
            sb.Append("  StatusDetail: ").Append(StatusDetail).Append("\n");
            sb.Append("  StatusDetailAsInt: ").Append(StatusDetailAsInt).Append("\n");
            sb.Append("  StatusDetailCaption: ").Append(StatusDetailCaption).Append("\n");
            sb.Append("  ScrapQuantity: ").Append(ScrapQuantity).Append("\n");
            sb.Append("  Rework: ").Append(Rework).Append("\n");
            sb.Append("  ReworkEntryExists: ").Append(ReworkEntryExists).Append("\n");
            sb.Append("  ManTimeManagementTypeAsInt: ").Append(ManTimeManagementTypeAsInt).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  SystemCreatedEntry: ").Append(SystemCreatedEntry).Append("\n");
            sb.Append("  PanelId: ").Append(PanelId).Append("\n");
            sb.Append("  HasPostingError: ").Append(HasPostingError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault12Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault12Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault12Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault12Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.EntryNo == input.EntryNo ||
                    (this.EntryNo != null &&
                    this.EntryNo.Equals(input.EntryNo))
                ) && 
                (
                    this.BadgeNo == input.BadgeNo ||
                    (this.BadgeNo != null &&
                    this.BadgeNo.Equals(input.BadgeNo))
                ) && 
                (
                    this.EmployeeNo == input.EmployeeNo ||
                    (this.EmployeeNo != null &&
                    this.EmployeeNo.Equals(input.EmployeeNo))
                ) && 
                (
                    this.SourceType == input.SourceType ||
                    (this.SourceType != null &&
                    this.SourceType.Equals(input.SourceType))
                ) && 
                (
                    this.SourceTypeAsInt == input.SourceTypeAsInt ||
                    (this.SourceTypeAsInt != null &&
                    this.SourceTypeAsInt.Equals(input.SourceTypeAsInt))
                ) && 
                (
                    this.SourceTypeName == input.SourceTypeName ||
                    (this.SourceTypeName != null &&
                    this.SourceTypeName.Equals(input.SourceTypeName))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusAsInt == input.StatusAsInt ||
                    (this.StatusAsInt != null &&
                    this.StatusAsInt.Equals(input.StatusAsInt))
                ) && 
                (
                    this.StatusName == input.StatusName ||
                    (this.StatusName != null &&
                    this.StatusName.Equals(input.StatusName))
                ) && 
                (
                    this.EntryType == input.EntryType ||
                    (this.EntryType != null &&
                    this.EntryType.Equals(input.EntryType))
                ) && 
                (
                    this.EntryTypeAsInt == input.EntryTypeAsInt ||
                    (this.EntryTypeAsInt != null &&
                    this.EntryTypeAsInt.Equals(input.EntryTypeAsInt))
                ) && 
                (
                    this.EntryTypeName == input.EntryTypeName ||
                    (this.EntryTypeName != null &&
                    this.EntryTypeName.Equals(input.EntryTypeName))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TypeAsInt == input.TypeAsInt ||
                    (this.TypeAsInt != null &&
                    this.TypeAsInt.Equals(input.TypeAsInt))
                ) && 
                (
                    this.TypeName == input.TypeName ||
                    (this.TypeName != null &&
                    this.TypeName.Equals(input.TypeName))
                ) && 
                (
                    this.No == input.No ||
                    (this.No != null &&
                    this.No.Equals(input.No))
                ) && 
                (
                    this.WorkCenterNo == input.WorkCenterNo ||
                    (this.WorkCenterNo != null &&
                    this.WorkCenterNo.Equals(input.WorkCenterNo))
                ) && 
                (
                    this.ProdOrderNo == input.ProdOrderNo ||
                    (this.ProdOrderNo != null &&
                    this.ProdOrderNo.Equals(input.ProdOrderNo))
                ) && 
                (
                    this.ProdOrderLineNo == input.ProdOrderLineNo ||
                    (this.ProdOrderLineNo != null &&
                    this.ProdOrderLineNo.Equals(input.ProdOrderLineNo))
                ) && 
                (
                    this.OperationNo == input.OperationNo ||
                    (this.OperationNo != null &&
                    this.OperationNo.Equals(input.OperationNo))
                ) && 
                (
                    this.OperationDescription == input.OperationDescription ||
                    (this.OperationDescription != null &&
                    this.OperationDescription.Equals(input.OperationDescription))
                ) && 
                (
                    this.ItemNo == input.ItemNo ||
                    (this.ItemNo != null &&
                    this.ItemNo.Equals(input.ItemNo))
                ) && 
                (
                    this.LineDescriptionRec == input.LineDescriptionRec ||
                    (this.LineDescriptionRec != null &&
                    this.LineDescriptionRec.Equals(input.LineDescriptionRec))
                ) && 
                (
                    this.LineDescription2Rec == input.LineDescription2Rec ||
                    (this.LineDescription2Rec != null &&
                    this.LineDescription2Rec.Equals(input.LineDescription2Rec))
                ) && 
                (
                    this.LineDescription == input.LineDescription ||
                    (this.LineDescription != null &&
                    this.LineDescription.Equals(input.LineDescription))
                ) && 
                (
                    this.LineDescription2 == input.LineDescription2 ||
                    (this.LineDescription2 != null &&
                    this.LineDescription2.Equals(input.LineDescription2))
                ) && 
                (
                    this.StatusDetail == input.StatusDetail ||
                    (this.StatusDetail != null &&
                    this.StatusDetail.Equals(input.StatusDetail))
                ) && 
                (
                    this.StatusDetailAsInt == input.StatusDetailAsInt ||
                    (this.StatusDetailAsInt != null &&
                    this.StatusDetailAsInt.Equals(input.StatusDetailAsInt))
                ) && 
                (
                    this.StatusDetailCaption == input.StatusDetailCaption ||
                    (this.StatusDetailCaption != null &&
                    this.StatusDetailCaption.Equals(input.StatusDetailCaption))
                ) && 
                (
                    this.ScrapQuantity == input.ScrapQuantity ||
                    (this.ScrapQuantity != null &&
                    this.ScrapQuantity.Equals(input.ScrapQuantity))
                ) && 
                (
                    this.Rework == input.Rework ||
                    (this.Rework != null &&
                    this.Rework.Equals(input.Rework))
                ) && 
                (
                    this.ReworkEntryExists == input.ReworkEntryExists ||
                    (this.ReworkEntryExists != null &&
                    this.ReworkEntryExists.Equals(input.ReworkEntryExists))
                ) && 
                (
                    this.ManTimeManagementTypeAsInt == input.ManTimeManagementTypeAsInt ||
                    (this.ManTimeManagementTypeAsInt != null &&
                    this.ManTimeManagementTypeAsInt.Equals(input.ManTimeManagementTypeAsInt))
                ) && 
                (
                    this.Hidden == input.Hidden ||
                    (this.Hidden != null &&
                    this.Hidden.Equals(input.Hidden))
                ) && 
                (
                    this.SystemCreatedEntry == input.SystemCreatedEntry ||
                    (this.SystemCreatedEntry != null &&
                    this.SystemCreatedEntry.Equals(input.SystemCreatedEntry))
                ) && 
                (
                    this.PanelId == input.PanelId ||
                    (this.PanelId != null &&
                    this.PanelId.Equals(input.PanelId))
                ) && 
                (
                    this.HasPostingError == input.HasPostingError ||
                    (this.HasPostingError != null &&
                    this.HasPostingError.Equals(input.HasPostingError))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.EntryNo != null)
                    hashCode = hashCode * 59 + this.EntryNo.GetHashCode();
                if (this.BadgeNo != null)
                    hashCode = hashCode * 59 + this.BadgeNo.GetHashCode();
                if (this.EmployeeNo != null)
                    hashCode = hashCode * 59 + this.EmployeeNo.GetHashCode();
                if (this.SourceType != null)
                    hashCode = hashCode * 59 + this.SourceType.GetHashCode();
                if (this.SourceTypeAsInt != null)
                    hashCode = hashCode * 59 + this.SourceTypeAsInt.GetHashCode();
                if (this.SourceTypeName != null)
                    hashCode = hashCode * 59 + this.SourceTypeName.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusAsInt != null)
                    hashCode = hashCode * 59 + this.StatusAsInt.GetHashCode();
                if (this.StatusName != null)
                    hashCode = hashCode * 59 + this.StatusName.GetHashCode();
                if (this.EntryType != null)
                    hashCode = hashCode * 59 + this.EntryType.GetHashCode();
                if (this.EntryTypeAsInt != null)
                    hashCode = hashCode * 59 + this.EntryTypeAsInt.GetHashCode();
                if (this.EntryTypeName != null)
                    hashCode = hashCode * 59 + this.EntryTypeName.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TypeAsInt != null)
                    hashCode = hashCode * 59 + this.TypeAsInt.GetHashCode();
                if (this.TypeName != null)
                    hashCode = hashCode * 59 + this.TypeName.GetHashCode();
                if (this.No != null)
                    hashCode = hashCode * 59 + this.No.GetHashCode();
                if (this.WorkCenterNo != null)
                    hashCode = hashCode * 59 + this.WorkCenterNo.GetHashCode();
                if (this.ProdOrderNo != null)
                    hashCode = hashCode * 59 + this.ProdOrderNo.GetHashCode();
                if (this.ProdOrderLineNo != null)
                    hashCode = hashCode * 59 + this.ProdOrderLineNo.GetHashCode();
                if (this.OperationNo != null)
                    hashCode = hashCode * 59 + this.OperationNo.GetHashCode();
                if (this.OperationDescription != null)
                    hashCode = hashCode * 59 + this.OperationDescription.GetHashCode();
                if (this.ItemNo != null)
                    hashCode = hashCode * 59 + this.ItemNo.GetHashCode();
                if (this.LineDescriptionRec != null)
                    hashCode = hashCode * 59 + this.LineDescriptionRec.GetHashCode();
                if (this.LineDescription2Rec != null)
                    hashCode = hashCode * 59 + this.LineDescription2Rec.GetHashCode();
                if (this.LineDescription != null)
                    hashCode = hashCode * 59 + this.LineDescription.GetHashCode();
                if (this.LineDescription2 != null)
                    hashCode = hashCode * 59 + this.LineDescription2.GetHashCode();
                if (this.StatusDetail != null)
                    hashCode = hashCode * 59 + this.StatusDetail.GetHashCode();
                if (this.StatusDetailAsInt != null)
                    hashCode = hashCode * 59 + this.StatusDetailAsInt.GetHashCode();
                if (this.StatusDetailCaption != null)
                    hashCode = hashCode * 59 + this.StatusDetailCaption.GetHashCode();
                if (this.ScrapQuantity != null)
                    hashCode = hashCode * 59 + this.ScrapQuantity.GetHashCode();
                if (this.Rework != null)
                    hashCode = hashCode * 59 + this.Rework.GetHashCode();
                if (this.ReworkEntryExists != null)
                    hashCode = hashCode * 59 + this.ReworkEntryExists.GetHashCode();
                if (this.ManTimeManagementTypeAsInt != null)
                    hashCode = hashCode * 59 + this.ManTimeManagementTypeAsInt.GetHashCode();
                if (this.Hidden != null)
                    hashCode = hashCode * 59 + this.Hidden.GetHashCode();
                if (this.SystemCreatedEntry != null)
                    hashCode = hashCode * 59 + this.SystemCreatedEntry.GetHashCode();
                if (this.PanelId != null)
                    hashCode = hashCode * 59 + this.PanelId.GetHashCode();
                if (this.HasPostingError != null)
                    hashCode = hashCode * 59 + this.HasPostingError.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
