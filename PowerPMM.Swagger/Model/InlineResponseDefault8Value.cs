/* 
 * Power PLM Connector
 *
 * The custom connector used by Power PLM by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault8Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault8Value :  IEquatable<InlineResponseDefault8Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault8Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="no">no.</param>
        /// <param name="description">description.</param>
        /// <param name="description2">description2.</param>
        /// <param name="serialNo">serialNo.</param>
        /// <param name="machineCategory">machineCategory.</param>
        /// <param name="blocked">blocked.</param>
        /// <param name="locationCode">locationCode.</param>
        /// <param name="workCenterNo">workCenterNo.</param>
        /// <param name="machineCenterNo">machineCenterNo.</param>
        /// <param name="assetNo">assetNo.</param>
        /// <param name="manufacturerCode">manufacturerCode.</param>
        /// <param name="purchaseDate">purchaseDate.</param>
        /// <param name="receivedDate">receivedDate.</param>
        /// <param name="installationDate">installationDate.</param>
        /// <param name="testingDate">testingDate.</param>
        /// <param name="warrantyEndDate">warrantyEndDate.</param>
        /// <param name="saleDate">saleDate.</param>
        /// <param name="yearOfManufacture">yearOfManufacture.</param>
        /// <param name="vendorNo">vendorNo.</param>
        /// <param name="jobNoMandatory">jobNoMandatory.</param>
        /// <param name="listFields">listFields.</param>
        /// <param name="detailFields">detailFields.</param>
        public InlineResponseDefault8Value(string odataEtag = default(string), string systemId = default(string), string no = default(string), string description = default(string), string description2 = default(string), string serialNo = default(string), string machineCategory = default(string), bool? blocked = default(bool?), string locationCode = default(string), string workCenterNo = default(string), string machineCenterNo = default(string), string assetNo = default(string), string manufacturerCode = default(string), DateTime? purchaseDate = default(DateTime?), DateTime? receivedDate = default(DateTime?), DateTime? installationDate = default(DateTime?), DateTime? testingDate = default(DateTime?), DateTime? warrantyEndDate = default(DateTime?), DateTime? saleDate = default(DateTime?), decimal? yearOfManufacture = default(decimal?), string vendorNo = default(string), bool? jobNoMandatory = default(bool?), string listFields = default(string), string detailFields = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.No = no;
            this.Description = description;
            this.Description2 = description2;
            this.SerialNo = serialNo;
            this.MachineCategory = machineCategory;
            this.Blocked = blocked;
            this.LocationCode = locationCode;
            this.WorkCenterNo = workCenterNo;
            this.MachineCenterNo = machineCenterNo;
            this.AssetNo = assetNo;
            this.ManufacturerCode = manufacturerCode;
            this.PurchaseDate = purchaseDate;
            this.ReceivedDate = receivedDate;
            this.InstallationDate = installationDate;
            this.TestingDate = testingDate;
            this.WarrantyEndDate = warrantyEndDate;
            this.SaleDate = saleDate;
            this.YearOfManufacture = yearOfManufacture;
            this.VendorNo = vendorNo;
            this.JobNoMandatory = jobNoMandatory;
            this.ListFields = listFields;
            this.DetailFields = detailFields;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// no
        /// </summary>
        /// <value>no</value>
        [DataMember(Name="no", EmitDefaultValue=false)]
        public string No { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// description2
        /// </summary>
        /// <value>description2</value>
        [DataMember(Name="description2", EmitDefaultValue=false)]
        public string Description2 { get; set; }

        /// <summary>
        /// serialNo
        /// </summary>
        /// <value>serialNo</value>
        [DataMember(Name="serialNo", EmitDefaultValue=false)]
        public string SerialNo { get; set; }

        /// <summary>
        /// machineCategory
        /// </summary>
        /// <value>machineCategory</value>
        [DataMember(Name="machineCategory", EmitDefaultValue=false)]
        public string MachineCategory { get; set; }

        /// <summary>
        /// blocked
        /// </summary>
        /// <value>blocked</value>
        [DataMember(Name="blocked", EmitDefaultValue=false)]
        public bool? Blocked { get; set; }

        /// <summary>
        /// locationCode
        /// </summary>
        /// <value>locationCode</value>
        [DataMember(Name="locationCode", EmitDefaultValue=false)]
        public string LocationCode { get; set; }

        /// <summary>
        /// workCenterNo
        /// </summary>
        /// <value>workCenterNo</value>
        [DataMember(Name="workCenterNo", EmitDefaultValue=false)]
        public string WorkCenterNo { get; set; }

        /// <summary>
        /// machineCenterNo
        /// </summary>
        /// <value>machineCenterNo</value>
        [DataMember(Name="machineCenterNo", EmitDefaultValue=false)]
        public string MachineCenterNo { get; set; }

        /// <summary>
        /// assetNo
        /// </summary>
        /// <value>assetNo</value>
        [DataMember(Name="assetNo", EmitDefaultValue=false)]
        public string AssetNo { get; set; }

        /// <summary>
        /// manufacturerCode
        /// </summary>
        /// <value>manufacturerCode</value>
        [DataMember(Name="manufacturerCode", EmitDefaultValue=false)]
        public string ManufacturerCode { get; set; }

        /// <summary>
        /// purchaseDate
        /// </summary>
        /// <value>purchaseDate</value>
        [DataMember(Name="purchaseDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? PurchaseDate { get; set; }

        /// <summary>
        /// receivedDate
        /// </summary>
        /// <value>receivedDate</value>
        [DataMember(Name="receivedDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ReceivedDate { get; set; }

        /// <summary>
        /// installationDate
        /// </summary>
        /// <value>installationDate</value>
        [DataMember(Name="installationDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? InstallationDate { get; set; }

        /// <summary>
        /// testingDate
        /// </summary>
        /// <value>testingDate</value>
        [DataMember(Name="testingDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? TestingDate { get; set; }

        /// <summary>
        /// warrantyEndDate
        /// </summary>
        /// <value>warrantyEndDate</value>
        [DataMember(Name="warrantyEndDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? WarrantyEndDate { get; set; }

        /// <summary>
        /// saleDate
        /// </summary>
        /// <value>saleDate</value>
        [DataMember(Name="saleDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? SaleDate { get; set; }

        /// <summary>
        /// yearOfManufacture
        /// </summary>
        /// <value>yearOfManufacture</value>
        [DataMember(Name="yearOfManufacture", EmitDefaultValue=false)]
        public decimal? YearOfManufacture { get; set; }

        /// <summary>
        /// vendorNo
        /// </summary>
        /// <value>vendorNo</value>
        [DataMember(Name="vendorNo", EmitDefaultValue=false)]
        public string VendorNo { get; set; }

        /// <summary>
        /// jobNoMandatory
        /// </summary>
        /// <value>jobNoMandatory</value>
        [DataMember(Name="jobNoMandatory", EmitDefaultValue=false)]
        public bool? JobNoMandatory { get; set; }

        /// <summary>
        /// listFields
        /// </summary>
        /// <value>listFields</value>
        [DataMember(Name="listFields", EmitDefaultValue=false)]
        public string ListFields { get; set; }

        /// <summary>
        /// detailFields
        /// </summary>
        /// <value>detailFields</value>
        [DataMember(Name="detailFields", EmitDefaultValue=false)]
        public string DetailFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault8Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  No: ").Append(No).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Description2: ").Append(Description2).Append("\n");
            sb.Append("  SerialNo: ").Append(SerialNo).Append("\n");
            sb.Append("  MachineCategory: ").Append(MachineCategory).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  WorkCenterNo: ").Append(WorkCenterNo).Append("\n");
            sb.Append("  MachineCenterNo: ").Append(MachineCenterNo).Append("\n");
            sb.Append("  AssetNo: ").Append(AssetNo).Append("\n");
            sb.Append("  ManufacturerCode: ").Append(ManufacturerCode).Append("\n");
            sb.Append("  PurchaseDate: ").Append(PurchaseDate).Append("\n");
            sb.Append("  ReceivedDate: ").Append(ReceivedDate).Append("\n");
            sb.Append("  InstallationDate: ").Append(InstallationDate).Append("\n");
            sb.Append("  TestingDate: ").Append(TestingDate).Append("\n");
            sb.Append("  WarrantyEndDate: ").Append(WarrantyEndDate).Append("\n");
            sb.Append("  SaleDate: ").Append(SaleDate).Append("\n");
            sb.Append("  YearOfManufacture: ").Append(YearOfManufacture).Append("\n");
            sb.Append("  VendorNo: ").Append(VendorNo).Append("\n");
            sb.Append("  JobNoMandatory: ").Append(JobNoMandatory).Append("\n");
            sb.Append("  ListFields: ").Append(ListFields).Append("\n");
            sb.Append("  DetailFields: ").Append(DetailFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault8Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault8Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault8Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault8Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.No == input.No ||
                    (this.No != null &&
                    this.No.Equals(input.No))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Description2 == input.Description2 ||
                    (this.Description2 != null &&
                    this.Description2.Equals(input.Description2))
                ) && 
                (
                    this.SerialNo == input.SerialNo ||
                    (this.SerialNo != null &&
                    this.SerialNo.Equals(input.SerialNo))
                ) && 
                (
                    this.MachineCategory == input.MachineCategory ||
                    (this.MachineCategory != null &&
                    this.MachineCategory.Equals(input.MachineCategory))
                ) && 
                (
                    this.Blocked == input.Blocked ||
                    (this.Blocked != null &&
                    this.Blocked.Equals(input.Blocked))
                ) && 
                (
                    this.LocationCode == input.LocationCode ||
                    (this.LocationCode != null &&
                    this.LocationCode.Equals(input.LocationCode))
                ) && 
                (
                    this.WorkCenterNo == input.WorkCenterNo ||
                    (this.WorkCenterNo != null &&
                    this.WorkCenterNo.Equals(input.WorkCenterNo))
                ) && 
                (
                    this.MachineCenterNo == input.MachineCenterNo ||
                    (this.MachineCenterNo != null &&
                    this.MachineCenterNo.Equals(input.MachineCenterNo))
                ) && 
                (
                    this.AssetNo == input.AssetNo ||
                    (this.AssetNo != null &&
                    this.AssetNo.Equals(input.AssetNo))
                ) && 
                (
                    this.ManufacturerCode == input.ManufacturerCode ||
                    (this.ManufacturerCode != null &&
                    this.ManufacturerCode.Equals(input.ManufacturerCode))
                ) && 
                (
                    this.PurchaseDate == input.PurchaseDate ||
                    (this.PurchaseDate != null &&
                    this.PurchaseDate.Equals(input.PurchaseDate))
                ) && 
                (
                    this.ReceivedDate == input.ReceivedDate ||
                    (this.ReceivedDate != null &&
                    this.ReceivedDate.Equals(input.ReceivedDate))
                ) && 
                (
                    this.InstallationDate == input.InstallationDate ||
                    (this.InstallationDate != null &&
                    this.InstallationDate.Equals(input.InstallationDate))
                ) && 
                (
                    this.TestingDate == input.TestingDate ||
                    (this.TestingDate != null &&
                    this.TestingDate.Equals(input.TestingDate))
                ) && 
                (
                    this.WarrantyEndDate == input.WarrantyEndDate ||
                    (this.WarrantyEndDate != null &&
                    this.WarrantyEndDate.Equals(input.WarrantyEndDate))
                ) && 
                (
                    this.SaleDate == input.SaleDate ||
                    (this.SaleDate != null &&
                    this.SaleDate.Equals(input.SaleDate))
                ) && 
                (
                    this.YearOfManufacture == input.YearOfManufacture ||
                    (this.YearOfManufacture != null &&
                    this.YearOfManufacture.Equals(input.YearOfManufacture))
                ) && 
                (
                    this.VendorNo == input.VendorNo ||
                    (this.VendorNo != null &&
                    this.VendorNo.Equals(input.VendorNo))
                ) && 
                (
                    this.JobNoMandatory == input.JobNoMandatory ||
                    (this.JobNoMandatory != null &&
                    this.JobNoMandatory.Equals(input.JobNoMandatory))
                ) && 
                (
                    this.ListFields == input.ListFields ||
                    (this.ListFields != null &&
                    this.ListFields.Equals(input.ListFields))
                ) && 
                (
                    this.DetailFields == input.DetailFields ||
                    (this.DetailFields != null &&
                    this.DetailFields.Equals(input.DetailFields))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.No != null)
                    hashCode = hashCode * 59 + this.No.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Description2 != null)
                    hashCode = hashCode * 59 + this.Description2.GetHashCode();
                if (this.SerialNo != null)
                    hashCode = hashCode * 59 + this.SerialNo.GetHashCode();
                if (this.MachineCategory != null)
                    hashCode = hashCode * 59 + this.MachineCategory.GetHashCode();
                if (this.Blocked != null)
                    hashCode = hashCode * 59 + this.Blocked.GetHashCode();
                if (this.LocationCode != null)
                    hashCode = hashCode * 59 + this.LocationCode.GetHashCode();
                if (this.WorkCenterNo != null)
                    hashCode = hashCode * 59 + this.WorkCenterNo.GetHashCode();
                if (this.MachineCenterNo != null)
                    hashCode = hashCode * 59 + this.MachineCenterNo.GetHashCode();
                if (this.AssetNo != null)
                    hashCode = hashCode * 59 + this.AssetNo.GetHashCode();
                if (this.ManufacturerCode != null)
                    hashCode = hashCode * 59 + this.ManufacturerCode.GetHashCode();
                if (this.PurchaseDate != null)
                    hashCode = hashCode * 59 + this.PurchaseDate.GetHashCode();
                if (this.ReceivedDate != null)
                    hashCode = hashCode * 59 + this.ReceivedDate.GetHashCode();
                if (this.InstallationDate != null)
                    hashCode = hashCode * 59 + this.InstallationDate.GetHashCode();
                if (this.TestingDate != null)
                    hashCode = hashCode * 59 + this.TestingDate.GetHashCode();
                if (this.WarrantyEndDate != null)
                    hashCode = hashCode * 59 + this.WarrantyEndDate.GetHashCode();
                if (this.SaleDate != null)
                    hashCode = hashCode * 59 + this.SaleDate.GetHashCode();
                if (this.YearOfManufacture != null)
                    hashCode = hashCode * 59 + this.YearOfManufacture.GetHashCode();
                if (this.VendorNo != null)
                    hashCode = hashCode * 59 + this.VendorNo.GetHashCode();
                if (this.JobNoMandatory != null)
                    hashCode = hashCode * 59 + this.JobNoMandatory.GetHashCode();
                if (this.ListFields != null)
                    hashCode = hashCode * 59 + this.ListFields.GetHashCode();
                if (this.DetailFields != null)
                    hashCode = hashCode * 59 + this.DetailFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
