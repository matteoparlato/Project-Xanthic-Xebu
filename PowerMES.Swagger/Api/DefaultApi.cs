/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// AZ_GetDeviceTwin
        /// </summary>
        /// <remarks>
        /// AZ_GetDeviceTwin
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponseDefault2</returns>
        InlineResponseDefault2 AZGetDeviceTwin (AZGetDeviceTwinBody body);

        /// <summary>
        /// AZ_GetDeviceTwin
        /// </summary>
        /// <remarks>
        /// AZ_GetDeviceTwin
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponseDefault2</returns>
        ApiResponse<InlineResponseDefault2> AZGetDeviceTwinWithHttpInfo (AZGetDeviceTwinBody body);
        /// <summary>
        /// CS_DecodeBase64
        /// </summary>
        /// <remarks>
        /// CS_DecodeBase64
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponseDefault45</returns>
        InlineResponseDefault45 CSDecodeBase64 (CSDecodeBase64Body body);

        /// <summary>
        /// CS_DecodeBase64
        /// </summary>
        /// <remarks>
        /// CS_DecodeBase64
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponseDefault45</returns>
        ApiResponse<InlineResponseDefault45> CSDecodeBase64WithHttpInfo (CSDecodeBase64Body body);
        /// <summary>
        /// GetCompanies
        /// </summary>
        /// <remarks>
        /// GetCompanies
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault</returns>
        InlineResponseDefault GetCompanies (string orderby = null, string select = null);

        /// <summary>
        /// GetCompanies
        /// </summary>
        /// <remarks>
        /// GetCompanies
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault</returns>
        ApiResponse<InlineResponseDefault> GetCompaniesWithHttpInfo (string orderby = null, string select = null);
        /// <summary>
        /// IOT_GetDeviceMethods
        /// </summary>
        /// <remarks>
        /// IOT_GetDeviceMethods
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault1</returns>
        InlineResponseDefault1 IOTGetDeviceMethods (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// IOT_GetDeviceMethods
        /// </summary>
        /// <remarks>
        /// IOT_GetDeviceMethods
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault1</returns>
        ApiResponse<InlineResponseDefault1> IOTGetDeviceMethodsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// IOT_GetDeviceTwins
        /// </summary>
        /// <remarks>
        /// IOT_GetDeviceTwins
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault3</returns>
        InlineResponseDefault3 IOTGetDeviceTwins (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// IOT_GetDeviceTwins
        /// </summary>
        /// <remarks>
        /// IOT_GetDeviceTwins
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault3</returns>
        ApiResponse<InlineResponseDefault3> IOTGetDeviceTwinsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// IOT_GetHubSetups
        /// </summary>
        /// <remarks>
        /// IOT_GetHubSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault4</returns>
        InlineResponseDefault4 IOTGetHubSetups (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// IOT_GetHubSetups
        /// </summary>
        /// <remarks>
        /// IOT_GetHubSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault4</returns>
        ApiResponse<InlineResponseDefault4> IOTGetHubSetupsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_Execute
        /// </summary>
        /// <remarks>
        /// MES_Execute
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>InlineResponseDefault38</returns>
        InlineResponseDefault38 MESExecute (ODataV4POWERMESExecuteBody body, string company);

        /// <summary>
        /// MES_Execute
        /// </summary>
        /// <remarks>
        /// MES_Execute
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>ApiResponse of InlineResponseDefault38</returns>
        ApiResponse<InlineResponseDefault38> MESExecuteWithHttpInfo (ODataV4POWERMESExecuteBody body, string company);
        /// <summary>
        /// MES_GetAttachments
        /// </summary>
        /// <remarks>
        /// MES_GetAsyncPostingLogs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault5</returns>
        InlineResponseDefault5 MESGetAsyncPostingLogs (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetAttachments
        /// </summary>
        /// <remarks>
        /// MES_GetAsyncPostingLogs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault5</returns>
        ApiResponse<InlineResponseDefault5> MESGetAsyncPostingLogsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetAttachments
        /// </summary>
        /// <remarks>
        /// MES_GetAttachments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault6</returns>
        InlineResponseDefault6 MESGetAttachments (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetAttachments
        /// </summary>
        /// <remarks>
        /// MES_GetAttachments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault6</returns>
        ApiResponse<InlineResponseDefault6> MESGetAttachmentsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetAvailableTrackingLines
        /// </summary>
        /// <remarks>
        /// MES_GetAvailableTrackingLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault7</returns>
        InlineResponseDefault7 MESGetAvailableTrackingLines (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetAvailableTrackingLines
        /// </summary>
        /// <remarks>
        /// MES_GetAvailableTrackingLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault7</returns>
        ApiResponse<InlineResponseDefault7> MESGetAvailableTrackingLinesWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetCaptionTranslations
        /// </summary>
        /// <remarks>
        /// MES_GetCaptionTranslations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault8</returns>
        InlineResponseDefault8 MESGetCaptionTranslations (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetCaptionTranslations
        /// </summary>
        /// <remarks>
        /// MES_GetCaptionTranslations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault8</returns>
        ApiResponse<InlineResponseDefault8> MESGetCaptionTranslationsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetContacts
        /// </summary>
        /// <remarks>
        /// MES_GetContacts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault9</returns>
        InlineResponseDefault9 MESGetContacts (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetContacts
        /// </summary>
        /// <remarks>
        /// MES_GetContacts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault9</returns>
        ApiResponse<InlineResponseDefault9> MESGetContactsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetDynamicRecordSetups
        /// </summary>
        /// <remarks>
        /// MES_GetDynamicRecordSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault11</returns>
        InlineResponseDefault11 MESGetDynamicRecordSetups (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetDynamicRecordSetups
        /// </summary>
        /// <remarks>
        /// MES_GetDynamicRecordSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault11</returns>
        ApiResponse<InlineResponseDefault11> MESGetDynamicRecordSetupsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetDynamicRecords
        /// </summary>
        /// <remarks>
        /// MES_GetDynamicRecords
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault10</returns>
        InlineResponseDefault10 MESGetDynamicRecords (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetDynamicRecords
        /// </summary>
        /// <remarks>
        /// MES_GetDynamicRecords
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault10</returns>
        ApiResponse<InlineResponseDefault10> MESGetDynamicRecordsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetEmployeeEntries
        /// </summary>
        /// <remarks>
        /// MES_GetEmployeeEntries
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault12</returns>
        InlineResponseDefault12 MESGetEmployeeEntries (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetEmployeeEntries
        /// </summary>
        /// <remarks>
        /// MES_GetEmployeeEntries
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault12</returns>
        ApiResponse<InlineResponseDefault12> MESGetEmployeeEntriesWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetEmployees
        /// </summary>
        /// <remarks>
        /// MES_GetEmployees
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault13</returns>
        InlineResponseDefault13 MESGetEmployees (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetEmployees
        /// </summary>
        /// <remarks>
        /// MES_GetEmployees
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault13</returns>
        ApiResponse<InlineResponseDefault13> MESGetEmployeesWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetHandlingUnits
        /// </summary>
        /// <remarks>
        /// MES_GetHandlingUnits
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault14</returns>
        InlineResponseDefault14 MESGetHandlingUnits (string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// MES_GetHandlingUnits
        /// </summary>
        /// <remarks>
        /// MES_GetHandlingUnits
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault14</returns>
        ApiResponse<InlineResponseDefault14> MESGetHandlingUnitsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        /// <summary>
        /// MES_GetItemSubstitutions
        /// </summary>
        /// <remarks>
        /// MES_GetItemSubstitutions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault16</returns>
        InlineResponseDefault16 MESGetItemSubstitutions (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetItemSubstitutions
        /// </summary>
        /// <remarks>
        /// MES_GetItemSubstitutions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault16</returns>
        ApiResponse<InlineResponseDefault16> MESGetItemSubstitutionsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetItemVariants
        /// </summary>
        /// <remarks>
        /// MES_GetItemVariants
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault17</returns>
        InlineResponseDefault17 MESGetItemVariants (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetItemVariants
        /// </summary>
        /// <remarks>
        /// MES_GetItemVariants
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault17</returns>
        ApiResponse<InlineResponseDefault17> MESGetItemVariantsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetItems
        /// </summary>
        /// <remarks>
        /// MES_GetItems
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault15</returns>
        InlineResponseDefault15 MESGetItems (string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// MES_GetItems
        /// </summary>
        /// <remarks>
        /// MES_GetItems
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault15</returns>
        ApiResponse<InlineResponseDefault15> MESGetItemsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        /// <summary>
        /// MES_GetJobTasks
        /// </summary>
        /// <remarks>
        /// MES_GetJobTasks
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault18</returns>
        InlineResponseDefault18 MESGetJobTasks (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetJobTasks
        /// </summary>
        /// <remarks>
        /// MES_GetJobTasks
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault18</returns>
        ApiResponse<InlineResponseDefault18> MESGetJobTasksWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetJobs
        /// </summary>
        /// <remarks>
        /// MES_GetJobs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault15</returns>
        InlineResponseDefault15 MESGetJobs (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetJobs
        /// </summary>
        /// <remarks>
        /// MES_GetJobs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault15</returns>
        ApiResponse<InlineResponseDefault15> MESGetJobsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetMachineCenters
        /// </summary>
        /// <remarks>
        /// MES_GetMachineCenters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault19</returns>
        InlineResponseDefault19 MESGetMachineCenters (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetMachineCenters
        /// </summary>
        /// <remarks>
        /// MES_GetMachineCenters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault19</returns>
        ApiResponse<InlineResponseDefault19> MESGetMachineCentersWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetNotifications
        /// </summary>
        /// <remarks>
        /// MES_GetNotifications
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault20</returns>
        InlineResponseDefault20 MESGetNotifications (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetNotifications
        /// </summary>
        /// <remarks>
        /// MES_GetNotifications
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault20</returns>
        ApiResponse<InlineResponseDefault20> MESGetNotificationsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetPackagingInstructions
        /// </summary>
        /// <remarks>
        /// MES_GetPackagingInstructions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault21</returns>
        InlineResponseDefault21 MESGetPackagingInstructions (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetPackagingInstructions
        /// </summary>
        /// <remarks>
        /// MES_GetPackagingInstructions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault21</returns>
        ApiResponse<InlineResponseDefault21> MESGetPackagingInstructionsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetPackagingMaterials
        /// </summary>
        /// <remarks>
        /// MES_GetPackagingMaterials
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault22</returns>
        InlineResponseDefault22 MESGetPackagingMaterials (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetPackagingMaterials
        /// </summary>
        /// <remarks>
        /// MES_GetPackagingMaterials
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault22</returns>
        ApiResponse<InlineResponseDefault22> MESGetPackagingMaterialsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetPanelSetupEmployees
        /// </summary>
        /// <remarks>
        /// MES_GetPanelSetupEmployees
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault24</returns>
        InlineResponseDefault24 MESGetPanelSetupEmployees (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetPanelSetupEmployees
        /// </summary>
        /// <remarks>
        /// MES_GetPanelSetupEmployees
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault24</returns>
        ApiResponse<InlineResponseDefault24> MESGetPanelSetupEmployeesWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetPanelSetupReasonCodes
        /// </summary>
        /// <remarks>
        /// MES_GetPanelSetupReasonCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault25</returns>
        InlineResponseDefault25 MESGetPanelSetupReasonCodes (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetPanelSetupReasonCodes
        /// </summary>
        /// <remarks>
        /// MES_GetPanelSetupReasonCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault25</returns>
        ApiResponse<InlineResponseDefault25> MESGetPanelSetupReasonCodesWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetPanelSetups
        /// </summary>
        /// <remarks>
        /// MES_GetPanelSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault26</returns>
        InlineResponseDefault26 MESGetPanelSetups (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetPanelSetups
        /// </summary>
        /// <remarks>
        /// MES_GetPanelSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault26</returns>
        ApiResponse<InlineResponseDefault26> MESGetPanelSetupsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetPanels
        /// </summary>
        /// <remarks>
        /// MES_GetPanels
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault23</returns>
        InlineResponseDefault23 MESGetPanels (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetPanels
        /// </summary>
        /// <remarks>
        /// MES_GetPanels
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault23</returns>
        ApiResponse<InlineResponseDefault23> MESGetPanelsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetProdOrderComponents
        /// </summary>
        /// <remarks>
        /// MES_GetProdOrderComponents
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault27</returns>
        InlineResponseDefault27 MESGetProdOrderComponents (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetProdOrderComponents
        /// </summary>
        /// <remarks>
        /// MES_GetProdOrderComponents
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault27</returns>
        ApiResponse<InlineResponseDefault27> MESGetProdOrderComponentsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetProdOrderRoutingLines
        /// </summary>
        /// <remarks>
        /// MES_GetProdOrderRoutingLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault28</returns>
        InlineResponseDefault28 MESGetProdOrderRoutingLines (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetProdOrderRoutingLines
        /// </summary>
        /// <remarks>
        /// MES_GetProdOrderRoutingLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault28</returns>
        ApiResponse<InlineResponseDefault28> MESGetProdOrderRoutingLinesWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetProdOrderTools
        /// </summary>
        /// <remarks>
        /// MES_GetProdOrderTools
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault31</returns>
        InlineResponseDefault31 MESGetProdOrderTools (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetProdOrderTools
        /// </summary>
        /// <remarks>
        /// MES_GetProdOrderTools
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault31</returns>
        ApiResponse<InlineResponseDefault31> MESGetProdOrderToolsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetReworkCodes
        /// </summary>
        /// <remarks>
        /// MES_GetReworkCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault29</returns>
        InlineResponseDefault29 MESGetReworkCodes (string companyId, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetReworkCodes
        /// </summary>
        /// <remarks>
        /// MES_GetReworkCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault29</returns>
        ApiResponse<InlineResponseDefault29> MESGetReworkCodesWithHttpInfo (string companyId, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetRoutingComments
        /// </summary>
        /// <remarks>
        /// MES_GetRoutingComments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault30</returns>
        InlineResponseDefault30 MESGetRoutingComments (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetRoutingComments
        /// </summary>
        /// <remarks>
        /// MES_GetRoutingComments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault30</returns>
        ApiResponse<InlineResponseDefault30> MESGetRoutingCommentsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetScrapCodes
        /// </summary>
        /// <remarks>
        /// MES_GetScrapCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault29</returns>
        InlineResponseDefault29 MESGetScrapCodes (string companyId, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetScrapCodes
        /// </summary>
        /// <remarks>
        /// MES_GetScrapCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault29</returns>
        ApiResponse<InlineResponseDefault29> MESGetScrapCodesWithHttpInfo (string companyId, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetSetups
        /// </summary>
        /// <remarks>
        /// MES_GetSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault32</returns>
        InlineResponseDefault32 MESGetSetups (string companyId, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetSetups
        /// </summary>
        /// <remarks>
        /// MES_GetSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault32</returns>
        ApiResponse<InlineResponseDefault32> MESGetSetupsWithHttpInfo (string companyId, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetStopCodes
        /// </summary>
        /// <remarks>
        /// MES_GetStopCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault29</returns>
        InlineResponseDefault29 MESGetStopCodes (string companyId, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetStopCodes
        /// </summary>
        /// <remarks>
        /// MES_GetStopCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault29</returns>
        ApiResponse<InlineResponseDefault29> MESGetStopCodesWithHttpInfo (string companyId, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetSubstitutionConditions
        /// </summary>
        /// <remarks>
        /// MES_GetSubstitutionConditions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault43</returns>
        InlineResponseDefault43 MESGetSubstitutionConditions (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetSubstitutionConditions
        /// </summary>
        /// <remarks>
        /// MES_GetSubstitutionConditions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault43</returns>
        ApiResponse<InlineResponseDefault43> MESGetSubstitutionConditionsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetSynoptic
        /// </summary>
        /// <remarks>
        /// MES_GetSynoptic
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>InlineResponseDefault44</returns>
        InlineResponseDefault44 MESGetSynoptic (string companyId, string filter = null, string orderby = null, string select = null, string expand = null);

        /// <summary>
        /// MES_GetSynoptic
        /// </summary>
        /// <remarks>
        /// MES_GetSynoptic
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault44</returns>
        ApiResponse<InlineResponseDefault44> MESGetSynopticWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string expand = null);
        /// <summary>
        /// MES_GetTeamMembers
        /// </summary>
        /// <remarks>
        /// MES_GetTeamMembers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault33</returns>
        InlineResponseDefault33 MESGetTeamMembers (string companyId, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetTeamMembers
        /// </summary>
        /// <remarks>
        /// MES_GetTeamMembers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault33</returns>
        ApiResponse<InlineResponseDefault33> MESGetTeamMembersWithHttpInfo (string companyId, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetTeams
        /// </summary>
        /// <remarks>
        /// MES_GetTeams
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault34</returns>
        InlineResponseDefault34 MESGetTeams (string companyId, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetTeams
        /// </summary>
        /// <remarks>
        /// MES_GetTeams
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault34</returns>
        ApiResponse<InlineResponseDefault34> MESGetTeamsWithHttpInfo (string companyId, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetTrackedComponents
        /// </summary>
        /// <remarks>
        /// MES_GetTrackedComponents
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault35</returns>
        InlineResponseDefault35 MESGetTrackedComponents (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetTrackedComponents
        /// </summary>
        /// <remarks>
        /// MES_GetTrackedComponents
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault35</returns>
        ApiResponse<InlineResponseDefault35> MESGetTrackedComponentsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetTrackingLines
        /// </summary>
        /// <remarks>
        /// MES_GetTrackingLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault36</returns>
        InlineResponseDefault36 MESGetTrackingLines (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetTrackingLines
        /// </summary>
        /// <remarks>
        /// MES_GetTrackingLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault36</returns>
        ApiResponse<InlineResponseDefault36> MESGetTrackingLinesWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetWorkCenters
        /// </summary>
        /// <remarks>
        /// MES_GetWorkCenters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault37</returns>
        InlineResponseDefault37 MESGetWorkCenters (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetWorkCenters
        /// </summary>
        /// <remarks>
        /// MES_GetWorkCenters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault37</returns>
        ApiResponse<InlineResponseDefault37> MESGetWorkCentersWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_PatchAsyncPostingLogs
        /// </summary>
        /// <remarks>
        /// MES_PatchAsyncPostingLogs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ifMatch"></param>
        /// <param name="companyId"></param>
        /// <param name="systemId"></param>
        /// <returns></returns>
        void MESPatchAsyncPostingLogs (CompaniescompanyIdAsyncPostingLogssystemIdBody body, string ifMatch, string companyId, string systemId);

        /// <summary>
        /// MES_PatchAsyncPostingLogs
        /// </summary>
        /// <remarks>
        /// MES_PatchAsyncPostingLogs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ifMatch"></param>
        /// <param name="companyId"></param>
        /// <param name="systemId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MESPatchAsyncPostingLogsWithHttpInfo (CompaniescompanyIdAsyncPostingLogssystemIdBody body, string ifMatch, string companyId, string systemId);
        /// <summary>
        /// MES_PatchNotification
        /// </summary>
        /// <remarks>
        /// MES_PatchNotification
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ifMatch"></param>
        /// <param name="companyId"></param>
        /// <param name="systemId"></param>
        /// <returns></returns>
        void MESPatchNotification (CompaniescompanyIdNotificationssystemIdBody body, string ifMatch, string companyId, string systemId);

        /// <summary>
        /// MES_PatchNotification
        /// </summary>
        /// <remarks>
        /// MES_PatchNotification
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ifMatch"></param>
        /// <param name="companyId"></param>
        /// <param name="systemId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MESPatchNotificationWithHttpInfo (CompaniescompanyIdNotificationssystemIdBody body, string ifMatch, string companyId, string systemId);
        /// <summary>
        /// PQA_Execute
        /// </summary>
        /// <remarks>
        /// PQA_Execute
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>InlineResponseDefault38</returns>
        InlineResponseDefault38 PQAExecute (ODataV4POWERPQAExecuteBody body, string company);

        /// <summary>
        /// PQA_Execute
        /// </summary>
        /// <remarks>
        /// PQA_Execute
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>ApiResponse of InlineResponseDefault38</returns>
        ApiResponse<InlineResponseDefault38> PQAExecuteWithHttpInfo (ODataV4POWERPQAExecuteBody body, string company);
        /// <summary>
        /// PQA_GetInspectionFailures
        /// </summary>
        /// <remarks>
        /// PQA_GetInspectionFailures
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault15</returns>
        InlineResponseDefault15 PQAGetInspectionFailures (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PQA_GetInspectionFailures
        /// </summary>
        /// <remarks>
        /// PQA_GetInspectionFailures
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault15</returns>
        ApiResponse<InlineResponseDefault15> PQAGetInspectionFailuresWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PQA_GetInspectionOrderLines
        /// </summary>
        /// <remarks>
        /// PQA_GetInspectionOrderLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault39</returns>
        InlineResponseDefault39 PQAGetInspectionOrderLines (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// PQA_GetInspectionOrderLines
        /// </summary>
        /// <remarks>
        /// PQA_GetInspectionOrderLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault39</returns>
        ApiResponse<InlineResponseDefault39> PQAGetInspectionOrderLinesWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// PQA_GetInspectionOrders
        /// </summary>
        /// <remarks>
        /// PQA_GetInspectionOrders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault40</returns>
        InlineResponseDefault40 PQAGetInspectionOrders (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// PQA_GetInspectionOrders
        /// </summary>
        /// <remarks>
        /// PQA_GetInspectionOrders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault40</returns>
        ApiResponse<InlineResponseDefault40> PQAGetInspectionOrdersWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// PQA_GetInspectionResults
        /// </summary>
        /// <remarks>
        /// PQA_GetInspectionResults
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault41</returns>
        InlineResponseDefault41 PQAGetInspectionResults (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// PQA_GetInspectionResults
        /// </summary>
        /// <remarks>
        /// PQA_GetInspectionResults
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault41</returns>
        ApiResponse<InlineResponseDefault41> PQAGetInspectionResultsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// PQA_GetParameterAttributeCodes
        /// </summary>
        /// <remarks>
        /// PQA_GetParameterAttributeCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault42</returns>
        InlineResponseDefault42 PQAGetParameterAttributeCodes (string companyId, string orderby = null, string select = null);

        /// <summary>
        /// PQA_GetParameterAttributeCodes
        /// </summary>
        /// <remarks>
        /// PQA_GetParameterAttributeCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault42</returns>
        ApiResponse<InlineResponseDefault42> PQAGetParameterAttributeCodesWithHttpInfo (string companyId, string orderby = null, string select = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// AZ_GetDeviceTwin
        /// </summary>
        /// <remarks>
        /// AZ_GetDeviceTwin
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponseDefault2</returns>
        System.Threading.Tasks.Task<InlineResponseDefault2> AZGetDeviceTwinAsync (AZGetDeviceTwinBody body);

        /// <summary>
        /// AZ_GetDeviceTwin
        /// </summary>
        /// <remarks>
        /// AZ_GetDeviceTwin
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponseDefault2)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault2>> AZGetDeviceTwinAsyncWithHttpInfo (AZGetDeviceTwinBody body);
        /// <summary>
        /// CS_DecodeBase64
        /// </summary>
        /// <remarks>
        /// CS_DecodeBase64
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponseDefault45</returns>
        System.Threading.Tasks.Task<InlineResponseDefault45> CSDecodeBase64Async (CSDecodeBase64Body body);

        /// <summary>
        /// CS_DecodeBase64
        /// </summary>
        /// <remarks>
        /// CS_DecodeBase64
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponseDefault45)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault45>> CSDecodeBase64AsyncWithHttpInfo (CSDecodeBase64Body body);
        /// <summary>
        /// GetCompanies
        /// </summary>
        /// <remarks>
        /// GetCompanies
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault</returns>
        System.Threading.Tasks.Task<InlineResponseDefault> GetCompaniesAsync (string orderby = null, string select = null);

        /// <summary>
        /// GetCompanies
        /// </summary>
        /// <remarks>
        /// GetCompanies
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault>> GetCompaniesAsyncWithHttpInfo (string orderby = null, string select = null);
        /// <summary>
        /// IOT_GetDeviceMethods
        /// </summary>
        /// <remarks>
        /// IOT_GetDeviceMethods
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault1</returns>
        System.Threading.Tasks.Task<InlineResponseDefault1> IOTGetDeviceMethodsAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// IOT_GetDeviceMethods
        /// </summary>
        /// <remarks>
        /// IOT_GetDeviceMethods
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault1)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault1>> IOTGetDeviceMethodsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// IOT_GetDeviceTwins
        /// </summary>
        /// <remarks>
        /// IOT_GetDeviceTwins
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault3</returns>
        System.Threading.Tasks.Task<InlineResponseDefault3> IOTGetDeviceTwinsAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// IOT_GetDeviceTwins
        /// </summary>
        /// <remarks>
        /// IOT_GetDeviceTwins
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault3)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault3>> IOTGetDeviceTwinsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// IOT_GetHubSetups
        /// </summary>
        /// <remarks>
        /// IOT_GetHubSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault4</returns>
        System.Threading.Tasks.Task<InlineResponseDefault4> IOTGetHubSetupsAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// IOT_GetHubSetups
        /// </summary>
        /// <remarks>
        /// IOT_GetHubSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault4)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault4>> IOTGetHubSetupsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_Execute
        /// </summary>
        /// <remarks>
        /// MES_Execute
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>Task of InlineResponseDefault38</returns>
        System.Threading.Tasks.Task<InlineResponseDefault38> MESExecuteAsync (ODataV4POWERMESExecuteBody body, string company);

        /// <summary>
        /// MES_Execute
        /// </summary>
        /// <remarks>
        /// MES_Execute
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>Task of ApiResponse (InlineResponseDefault38)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault38>> MESExecuteAsyncWithHttpInfo (ODataV4POWERMESExecuteBody body, string company);
        /// <summary>
        /// MES_GetAttachments
        /// </summary>
        /// <remarks>
        /// MES_GetAsyncPostingLogs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault5</returns>
        System.Threading.Tasks.Task<InlineResponseDefault5> MESGetAsyncPostingLogsAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetAttachments
        /// </summary>
        /// <remarks>
        /// MES_GetAsyncPostingLogs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault5)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault5>> MESGetAsyncPostingLogsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetAttachments
        /// </summary>
        /// <remarks>
        /// MES_GetAttachments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault6</returns>
        System.Threading.Tasks.Task<InlineResponseDefault6> MESGetAttachmentsAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetAttachments
        /// </summary>
        /// <remarks>
        /// MES_GetAttachments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault6)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault6>> MESGetAttachmentsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetAvailableTrackingLines
        /// </summary>
        /// <remarks>
        /// MES_GetAvailableTrackingLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault7</returns>
        System.Threading.Tasks.Task<InlineResponseDefault7> MESGetAvailableTrackingLinesAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetAvailableTrackingLines
        /// </summary>
        /// <remarks>
        /// MES_GetAvailableTrackingLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault7)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault7>> MESGetAvailableTrackingLinesAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetCaptionTranslations
        /// </summary>
        /// <remarks>
        /// MES_GetCaptionTranslations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault8</returns>
        System.Threading.Tasks.Task<InlineResponseDefault8> MESGetCaptionTranslationsAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetCaptionTranslations
        /// </summary>
        /// <remarks>
        /// MES_GetCaptionTranslations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault8)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault8>> MESGetCaptionTranslationsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetContacts
        /// </summary>
        /// <remarks>
        /// MES_GetContacts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault9</returns>
        System.Threading.Tasks.Task<InlineResponseDefault9> MESGetContactsAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetContacts
        /// </summary>
        /// <remarks>
        /// MES_GetContacts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault9)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault9>> MESGetContactsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetDynamicRecordSetups
        /// </summary>
        /// <remarks>
        /// MES_GetDynamicRecordSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault11</returns>
        System.Threading.Tasks.Task<InlineResponseDefault11> MESGetDynamicRecordSetupsAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetDynamicRecordSetups
        /// </summary>
        /// <remarks>
        /// MES_GetDynamicRecordSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault11)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault11>> MESGetDynamicRecordSetupsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetDynamicRecords
        /// </summary>
        /// <remarks>
        /// MES_GetDynamicRecords
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault10</returns>
        System.Threading.Tasks.Task<InlineResponseDefault10> MESGetDynamicRecordsAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetDynamicRecords
        /// </summary>
        /// <remarks>
        /// MES_GetDynamicRecords
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault10)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault10>> MESGetDynamicRecordsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetEmployeeEntries
        /// </summary>
        /// <remarks>
        /// MES_GetEmployeeEntries
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault12</returns>
        System.Threading.Tasks.Task<InlineResponseDefault12> MESGetEmployeeEntriesAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetEmployeeEntries
        /// </summary>
        /// <remarks>
        /// MES_GetEmployeeEntries
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault12)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault12>> MESGetEmployeeEntriesAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetEmployees
        /// </summary>
        /// <remarks>
        /// MES_GetEmployees
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault13</returns>
        System.Threading.Tasks.Task<InlineResponseDefault13> MESGetEmployeesAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetEmployees
        /// </summary>
        /// <remarks>
        /// MES_GetEmployees
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault13)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault13>> MESGetEmployeesAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetHandlingUnits
        /// </summary>
        /// <remarks>
        /// MES_GetHandlingUnits
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault14</returns>
        System.Threading.Tasks.Task<InlineResponseDefault14> MESGetHandlingUnitsAsync (string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// MES_GetHandlingUnits
        /// </summary>
        /// <remarks>
        /// MES_GetHandlingUnits
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault14)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault14>> MESGetHandlingUnitsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        /// <summary>
        /// MES_GetItemSubstitutions
        /// </summary>
        /// <remarks>
        /// MES_GetItemSubstitutions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault16</returns>
        System.Threading.Tasks.Task<InlineResponseDefault16> MESGetItemSubstitutionsAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetItemSubstitutions
        /// </summary>
        /// <remarks>
        /// MES_GetItemSubstitutions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault16)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault16>> MESGetItemSubstitutionsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetItemVariants
        /// </summary>
        /// <remarks>
        /// MES_GetItemVariants
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault17</returns>
        System.Threading.Tasks.Task<InlineResponseDefault17> MESGetItemVariantsAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetItemVariants
        /// </summary>
        /// <remarks>
        /// MES_GetItemVariants
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault17)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault17>> MESGetItemVariantsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetItems
        /// </summary>
        /// <remarks>
        /// MES_GetItems
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault15</returns>
        System.Threading.Tasks.Task<InlineResponseDefault15> MESGetItemsAsync (string companyId, string filter = null, string orderby = null, string select = null, string top = null);

        /// <summary>
        /// MES_GetItems
        /// </summary>
        /// <remarks>
        /// MES_GetItems
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault15)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault15>> MESGetItemsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null);
        /// <summary>
        /// MES_GetJobTasks
        /// </summary>
        /// <remarks>
        /// MES_GetJobTasks
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault18</returns>
        System.Threading.Tasks.Task<InlineResponseDefault18> MESGetJobTasksAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetJobTasks
        /// </summary>
        /// <remarks>
        /// MES_GetJobTasks
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault18)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault18>> MESGetJobTasksAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetJobs
        /// </summary>
        /// <remarks>
        /// MES_GetJobs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault15</returns>
        System.Threading.Tasks.Task<InlineResponseDefault15> MESGetJobsAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetJobs
        /// </summary>
        /// <remarks>
        /// MES_GetJobs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault15)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault15>> MESGetJobsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetMachineCenters
        /// </summary>
        /// <remarks>
        /// MES_GetMachineCenters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault19</returns>
        System.Threading.Tasks.Task<InlineResponseDefault19> MESGetMachineCentersAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetMachineCenters
        /// </summary>
        /// <remarks>
        /// MES_GetMachineCenters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault19)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault19>> MESGetMachineCentersAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetNotifications
        /// </summary>
        /// <remarks>
        /// MES_GetNotifications
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault20</returns>
        System.Threading.Tasks.Task<InlineResponseDefault20> MESGetNotificationsAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetNotifications
        /// </summary>
        /// <remarks>
        /// MES_GetNotifications
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault20)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault20>> MESGetNotificationsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetPackagingInstructions
        /// </summary>
        /// <remarks>
        /// MES_GetPackagingInstructions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault21</returns>
        System.Threading.Tasks.Task<InlineResponseDefault21> MESGetPackagingInstructionsAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetPackagingInstructions
        /// </summary>
        /// <remarks>
        /// MES_GetPackagingInstructions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault21)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault21>> MESGetPackagingInstructionsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetPackagingMaterials
        /// </summary>
        /// <remarks>
        /// MES_GetPackagingMaterials
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault22</returns>
        System.Threading.Tasks.Task<InlineResponseDefault22> MESGetPackagingMaterialsAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetPackagingMaterials
        /// </summary>
        /// <remarks>
        /// MES_GetPackagingMaterials
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault22)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault22>> MESGetPackagingMaterialsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetPanelSetupEmployees
        /// </summary>
        /// <remarks>
        /// MES_GetPanelSetupEmployees
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault24</returns>
        System.Threading.Tasks.Task<InlineResponseDefault24> MESGetPanelSetupEmployeesAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetPanelSetupEmployees
        /// </summary>
        /// <remarks>
        /// MES_GetPanelSetupEmployees
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault24)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault24>> MESGetPanelSetupEmployeesAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetPanelSetupReasonCodes
        /// </summary>
        /// <remarks>
        /// MES_GetPanelSetupReasonCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault25</returns>
        System.Threading.Tasks.Task<InlineResponseDefault25> MESGetPanelSetupReasonCodesAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetPanelSetupReasonCodes
        /// </summary>
        /// <remarks>
        /// MES_GetPanelSetupReasonCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault25)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault25>> MESGetPanelSetupReasonCodesAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetPanelSetups
        /// </summary>
        /// <remarks>
        /// MES_GetPanelSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault26</returns>
        System.Threading.Tasks.Task<InlineResponseDefault26> MESGetPanelSetupsAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetPanelSetups
        /// </summary>
        /// <remarks>
        /// MES_GetPanelSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault26)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault26>> MESGetPanelSetupsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetPanels
        /// </summary>
        /// <remarks>
        /// MES_GetPanels
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault23</returns>
        System.Threading.Tasks.Task<InlineResponseDefault23> MESGetPanelsAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetPanels
        /// </summary>
        /// <remarks>
        /// MES_GetPanels
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault23)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault23>> MESGetPanelsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetProdOrderComponents
        /// </summary>
        /// <remarks>
        /// MES_GetProdOrderComponents
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault27</returns>
        System.Threading.Tasks.Task<InlineResponseDefault27> MESGetProdOrderComponentsAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetProdOrderComponents
        /// </summary>
        /// <remarks>
        /// MES_GetProdOrderComponents
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault27)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault27>> MESGetProdOrderComponentsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetProdOrderRoutingLines
        /// </summary>
        /// <remarks>
        /// MES_GetProdOrderRoutingLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault28</returns>
        System.Threading.Tasks.Task<InlineResponseDefault28> MESGetProdOrderRoutingLinesAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetProdOrderRoutingLines
        /// </summary>
        /// <remarks>
        /// MES_GetProdOrderRoutingLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault28)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault28>> MESGetProdOrderRoutingLinesAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetProdOrderTools
        /// </summary>
        /// <remarks>
        /// MES_GetProdOrderTools
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault31</returns>
        System.Threading.Tasks.Task<InlineResponseDefault31> MESGetProdOrderToolsAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetProdOrderTools
        /// </summary>
        /// <remarks>
        /// MES_GetProdOrderTools
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault31)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault31>> MESGetProdOrderToolsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetReworkCodes
        /// </summary>
        /// <remarks>
        /// MES_GetReworkCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault29</returns>
        System.Threading.Tasks.Task<InlineResponseDefault29> MESGetReworkCodesAsync (string companyId, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetReworkCodes
        /// </summary>
        /// <remarks>
        /// MES_GetReworkCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault29)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault29>> MESGetReworkCodesAsyncWithHttpInfo (string companyId, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetRoutingComments
        /// </summary>
        /// <remarks>
        /// MES_GetRoutingComments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault30</returns>
        System.Threading.Tasks.Task<InlineResponseDefault30> MESGetRoutingCommentsAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetRoutingComments
        /// </summary>
        /// <remarks>
        /// MES_GetRoutingComments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault30)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault30>> MESGetRoutingCommentsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetScrapCodes
        /// </summary>
        /// <remarks>
        /// MES_GetScrapCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault29</returns>
        System.Threading.Tasks.Task<InlineResponseDefault29> MESGetScrapCodesAsync (string companyId, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetScrapCodes
        /// </summary>
        /// <remarks>
        /// MES_GetScrapCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault29)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault29>> MESGetScrapCodesAsyncWithHttpInfo (string companyId, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetSetups
        /// </summary>
        /// <remarks>
        /// MES_GetSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault32</returns>
        System.Threading.Tasks.Task<InlineResponseDefault32> MESGetSetupsAsync (string companyId, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetSetups
        /// </summary>
        /// <remarks>
        /// MES_GetSetups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault32)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault32>> MESGetSetupsAsyncWithHttpInfo (string companyId, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetStopCodes
        /// </summary>
        /// <remarks>
        /// MES_GetStopCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault29</returns>
        System.Threading.Tasks.Task<InlineResponseDefault29> MESGetStopCodesAsync (string companyId, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetStopCodes
        /// </summary>
        /// <remarks>
        /// MES_GetStopCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault29)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault29>> MESGetStopCodesAsyncWithHttpInfo (string companyId, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetSubstitutionConditions
        /// </summary>
        /// <remarks>
        /// MES_GetSubstitutionConditions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault43</returns>
        System.Threading.Tasks.Task<InlineResponseDefault43> MESGetSubstitutionConditionsAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetSubstitutionConditions
        /// </summary>
        /// <remarks>
        /// MES_GetSubstitutionConditions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault43)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault43>> MESGetSubstitutionConditionsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetSynoptic
        /// </summary>
        /// <remarks>
        /// MES_GetSynoptic
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of InlineResponseDefault44</returns>
        System.Threading.Tasks.Task<InlineResponseDefault44> MESGetSynopticAsync (string companyId, string filter = null, string orderby = null, string select = null, string expand = null);

        /// <summary>
        /// MES_GetSynoptic
        /// </summary>
        /// <remarks>
        /// MES_GetSynoptic
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault44)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault44>> MESGetSynopticAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string expand = null);
        /// <summary>
        /// MES_GetTeamMembers
        /// </summary>
        /// <remarks>
        /// MES_GetTeamMembers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault33</returns>
        System.Threading.Tasks.Task<InlineResponseDefault33> MESGetTeamMembersAsync (string companyId, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetTeamMembers
        /// </summary>
        /// <remarks>
        /// MES_GetTeamMembers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault33)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault33>> MESGetTeamMembersAsyncWithHttpInfo (string companyId, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetTeams
        /// </summary>
        /// <remarks>
        /// MES_GetTeams
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault34</returns>
        System.Threading.Tasks.Task<InlineResponseDefault34> MESGetTeamsAsync (string companyId, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetTeams
        /// </summary>
        /// <remarks>
        /// MES_GetTeams
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault34)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault34>> MESGetTeamsAsyncWithHttpInfo (string companyId, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetTrackedComponents
        /// </summary>
        /// <remarks>
        /// MES_GetTrackedComponents
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault35</returns>
        System.Threading.Tasks.Task<InlineResponseDefault35> MESGetTrackedComponentsAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetTrackedComponents
        /// </summary>
        /// <remarks>
        /// MES_GetTrackedComponents
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault35)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault35>> MESGetTrackedComponentsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetTrackingLines
        /// </summary>
        /// <remarks>
        /// MES_GetTrackingLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault36</returns>
        System.Threading.Tasks.Task<InlineResponseDefault36> MESGetTrackingLinesAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetTrackingLines
        /// </summary>
        /// <remarks>
        /// MES_GetTrackingLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault36)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault36>> MESGetTrackingLinesAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_GetWorkCenters
        /// </summary>
        /// <remarks>
        /// MES_GetWorkCenters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault37</returns>
        System.Threading.Tasks.Task<InlineResponseDefault37> MESGetWorkCentersAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// MES_GetWorkCenters
        /// </summary>
        /// <remarks>
        /// MES_GetWorkCenters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault37)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault37>> MESGetWorkCentersAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// MES_PatchAsyncPostingLogs
        /// </summary>
        /// <remarks>
        /// MES_PatchAsyncPostingLogs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ifMatch"></param>
        /// <param name="companyId"></param>
        /// <param name="systemId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MESPatchAsyncPostingLogsAsync (CompaniescompanyIdAsyncPostingLogssystemIdBody body, string ifMatch, string companyId, string systemId);

        /// <summary>
        /// MES_PatchAsyncPostingLogs
        /// </summary>
        /// <remarks>
        /// MES_PatchAsyncPostingLogs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ifMatch"></param>
        /// <param name="companyId"></param>
        /// <param name="systemId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MESPatchAsyncPostingLogsAsyncWithHttpInfo (CompaniescompanyIdAsyncPostingLogssystemIdBody body, string ifMatch, string companyId, string systemId);
        /// <summary>
        /// MES_PatchNotification
        /// </summary>
        /// <remarks>
        /// MES_PatchNotification
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ifMatch"></param>
        /// <param name="companyId"></param>
        /// <param name="systemId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MESPatchNotificationAsync (CompaniescompanyIdNotificationssystemIdBody body, string ifMatch, string companyId, string systemId);

        /// <summary>
        /// MES_PatchNotification
        /// </summary>
        /// <remarks>
        /// MES_PatchNotification
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ifMatch"></param>
        /// <param name="companyId"></param>
        /// <param name="systemId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MESPatchNotificationAsyncWithHttpInfo (CompaniescompanyIdNotificationssystemIdBody body, string ifMatch, string companyId, string systemId);
        /// <summary>
        /// PQA_Execute
        /// </summary>
        /// <remarks>
        /// PQA_Execute
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>Task of InlineResponseDefault38</returns>
        System.Threading.Tasks.Task<InlineResponseDefault38> PQAExecuteAsync (ODataV4POWERPQAExecuteBody body, string company);

        /// <summary>
        /// PQA_Execute
        /// </summary>
        /// <remarks>
        /// PQA_Execute
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>Task of ApiResponse (InlineResponseDefault38)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault38>> PQAExecuteAsyncWithHttpInfo (ODataV4POWERPQAExecuteBody body, string company);
        /// <summary>
        /// PQA_GetInspectionFailures
        /// </summary>
        /// <remarks>
        /// PQA_GetInspectionFailures
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault15</returns>
        System.Threading.Tasks.Task<InlineResponseDefault15> PQAGetInspectionFailuresAsync (string companyId, string filter = null, string orderby = null, string select = null);

        /// <summary>
        /// PQA_GetInspectionFailures
        /// </summary>
        /// <remarks>
        /// PQA_GetInspectionFailures
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault15)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault15>> PQAGetInspectionFailuresAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null);
        /// <summary>
        /// PQA_GetInspectionOrderLines
        /// </summary>
        /// <remarks>
        /// PQA_GetInspectionOrderLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault39</returns>
        System.Threading.Tasks.Task<InlineResponseDefault39> PQAGetInspectionOrderLinesAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// PQA_GetInspectionOrderLines
        /// </summary>
        /// <remarks>
        /// PQA_GetInspectionOrderLines
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault39)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault39>> PQAGetInspectionOrderLinesAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// PQA_GetInspectionOrders
        /// </summary>
        /// <remarks>
        /// PQA_GetInspectionOrders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault40</returns>
        System.Threading.Tasks.Task<InlineResponseDefault40> PQAGetInspectionOrdersAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// PQA_GetInspectionOrders
        /// </summary>
        /// <remarks>
        /// PQA_GetInspectionOrders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault40)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault40>> PQAGetInspectionOrdersAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// PQA_GetInspectionResults
        /// </summary>
        /// <remarks>
        /// PQA_GetInspectionResults
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault41</returns>
        System.Threading.Tasks.Task<InlineResponseDefault41> PQAGetInspectionResultsAsync (string companyId, string filter, string orderby = null, string select = null);

        /// <summary>
        /// PQA_GetInspectionResults
        /// </summary>
        /// <remarks>
        /// PQA_GetInspectionResults
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault41)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault41>> PQAGetInspectionResultsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null);
        /// <summary>
        /// PQA_GetParameterAttributeCodes
        /// </summary>
        /// <remarks>
        /// PQA_GetParameterAttributeCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault42</returns>
        System.Threading.Tasks.Task<InlineResponseDefault42> PQAGetParameterAttributeCodesAsync (string companyId, string orderby = null, string select = null);

        /// <summary>
        /// PQA_GetParameterAttributeCodes
        /// </summary>
        /// <remarks>
        /// PQA_GetParameterAttributeCodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault42)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault42>> PQAGetParameterAttributeCodesAsyncWithHttpInfo (string companyId, string orderby = null, string select = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// AZ_GetDeviceTwin AZ_GetDeviceTwin
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponseDefault2</returns>
        public InlineResponseDefault2 AZGetDeviceTwin (AZGetDeviceTwinBody body)
        {
             ApiResponse<InlineResponseDefault2> localVarResponse = AZGetDeviceTwinWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// AZ_GetDeviceTwin AZ_GetDeviceTwin
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponseDefault2</returns>
        public ApiResponse< InlineResponseDefault2 > AZGetDeviceTwinWithHttpInfo (AZGetDeviceTwinBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->AZGetDeviceTwin");

            var localVarPath = "/AZ_GetDeviceTwin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AZGetDeviceTwin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault2)));
        }

        /// <summary>
        /// AZ_GetDeviceTwin AZ_GetDeviceTwin
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponseDefault2</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault2> AZGetDeviceTwinAsync (AZGetDeviceTwinBody body)
        {
             ApiResponse<InlineResponseDefault2> localVarResponse = await AZGetDeviceTwinAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// AZ_GetDeviceTwin AZ_GetDeviceTwin
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponseDefault2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault2>> AZGetDeviceTwinAsyncWithHttpInfo (AZGetDeviceTwinBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->AZGetDeviceTwin");

            var localVarPath = "/AZ_GetDeviceTwin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AZGetDeviceTwin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault2)));
        }

        /// <summary>
        /// CS_DecodeBase64 CS_DecodeBase64
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponseDefault45</returns>
        public InlineResponseDefault45 CSDecodeBase64 (CSDecodeBase64Body body)
        {
             ApiResponse<InlineResponseDefault45> localVarResponse = CSDecodeBase64WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CS_DecodeBase64 CS_DecodeBase64
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponseDefault45</returns>
        public ApiResponse< InlineResponseDefault45 > CSDecodeBase64WithHttpInfo (CSDecodeBase64Body body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CSDecodeBase64");

            var localVarPath = "/CS_DecodeBase64";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CSDecodeBase64", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault45>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault45) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault45)));
        }

        /// <summary>
        /// CS_DecodeBase64 CS_DecodeBase64
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponseDefault45</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault45> CSDecodeBase64Async (CSDecodeBase64Body body)
        {
             ApiResponse<InlineResponseDefault45> localVarResponse = await CSDecodeBase64AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CS_DecodeBase64 CS_DecodeBase64
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponseDefault45)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault45>> CSDecodeBase64AsyncWithHttpInfo (CSDecodeBase64Body body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CSDecodeBase64");

            var localVarPath = "/CS_DecodeBase64";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CSDecodeBase64", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault45>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault45) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault45)));
        }

        /// <summary>
        /// GetCompanies GetCompanies
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault</returns>
        public InlineResponseDefault GetCompanies (string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault> localVarResponse = GetCompaniesWithHttpInfo(orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GetCompanies GetCompanies
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault</returns>
        public ApiResponse< InlineResponseDefault > GetCompaniesWithHttpInfo (string orderby = null, string select = null)
        {

            var localVarPath = "/api/beta/companies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompanies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault)));
        }

        /// <summary>
        /// GetCompanies GetCompanies
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault> GetCompaniesAsync (string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault> localVarResponse = await GetCompaniesAsyncWithHttpInfo(orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GetCompanies GetCompanies
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault>> GetCompaniesAsyncWithHttpInfo (string orderby = null, string select = null)
        {

            var localVarPath = "/api/beta/companies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompanies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault)));
        }

        /// <summary>
        /// IOT_GetDeviceMethods IOT_GetDeviceMethods
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault1</returns>
        public InlineResponseDefault1 IOTGetDeviceMethods (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault1> localVarResponse = IOTGetDeviceMethodsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// IOT_GetDeviceMethods IOT_GetDeviceMethods
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault1</returns>
        public ApiResponse< InlineResponseDefault1 > IOTGetDeviceMethodsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->IOTGetDeviceMethods");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->IOTGetDeviceMethods");

            var localVarPath = "/api/eos/iot/v1.0/companies({companyId})/deviceMethods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IOTGetDeviceMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault1)));
        }

        /// <summary>
        /// IOT_GetDeviceMethods IOT_GetDeviceMethods
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault1</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault1> IOTGetDeviceMethodsAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault1> localVarResponse = await IOTGetDeviceMethodsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// IOT_GetDeviceMethods IOT_GetDeviceMethods
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault1>> IOTGetDeviceMethodsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->IOTGetDeviceMethods");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->IOTGetDeviceMethods");

            var localVarPath = "/api/eos/iot/v1.0/companies({companyId})/deviceMethods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IOTGetDeviceMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault1)));
        }

        /// <summary>
        /// IOT_GetDeviceTwins IOT_GetDeviceTwins
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault3</returns>
        public InlineResponseDefault3 IOTGetDeviceTwins (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault3> localVarResponse = IOTGetDeviceTwinsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// IOT_GetDeviceTwins IOT_GetDeviceTwins
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault3</returns>
        public ApiResponse< InlineResponseDefault3 > IOTGetDeviceTwinsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->IOTGetDeviceTwins");

            var localVarPath = "/api/eos/iot/v1.0/companies({companyId})/deviceTwinProperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IOTGetDeviceTwins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault3>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault3) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault3)));
        }

        /// <summary>
        /// IOT_GetDeviceTwins IOT_GetDeviceTwins
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault3</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault3> IOTGetDeviceTwinsAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault3> localVarResponse = await IOTGetDeviceTwinsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// IOT_GetDeviceTwins IOT_GetDeviceTwins
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault3)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault3>> IOTGetDeviceTwinsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->IOTGetDeviceTwins");

            var localVarPath = "/api/eos/iot/v1.0/companies({companyId})/deviceTwinProperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IOTGetDeviceTwins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault3>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault3) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault3)));
        }

        /// <summary>
        /// IOT_GetHubSetups IOT_GetHubSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault4</returns>
        public InlineResponseDefault4 IOTGetHubSetups (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault4> localVarResponse = IOTGetHubSetupsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// IOT_GetHubSetups IOT_GetHubSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault4</returns>
        public ApiResponse< InlineResponseDefault4 > IOTGetHubSetupsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->IOTGetHubSetups");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->IOTGetHubSetups");

            var localVarPath = "/api/eos/iot/v1.0/companies({companyId})/hubSetups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IOTGetHubSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault4>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault4) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault4)));
        }

        /// <summary>
        /// IOT_GetHubSetups IOT_GetHubSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault4</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault4> IOTGetHubSetupsAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault4> localVarResponse = await IOTGetHubSetupsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// IOT_GetHubSetups IOT_GetHubSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault4)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault4>> IOTGetHubSetupsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->IOTGetHubSetups");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->IOTGetHubSetups");

            var localVarPath = "/api/eos/iot/v1.0/companies({companyId})/hubSetups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IOTGetHubSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault4>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault4) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault4)));
        }

        /// <summary>
        /// MES_Execute MES_Execute
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>InlineResponseDefault38</returns>
        public InlineResponseDefault38 MESExecute (ODataV4POWERMESExecuteBody body, string company)
        {
             ApiResponse<InlineResponseDefault38> localVarResponse = MESExecuteWithHttpInfo(body, company);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_Execute MES_Execute
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>ApiResponse of InlineResponseDefault38</returns>
        public ApiResponse< InlineResponseDefault38 > MESExecuteWithHttpInfo (ODataV4POWERMESExecuteBody body, string company)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->MESExecute");
            // verify the required parameter 'company' is set
            if (company == null)
                throw new ApiException(400, "Missing required parameter 'company' when calling DefaultApi->MESExecute");

            var localVarPath = "/ODataV4/POWERMES_Execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (company != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "company", company)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESExecute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault38>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault38) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault38)));
        }

        /// <summary>
        /// MES_Execute MES_Execute
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>Task of InlineResponseDefault38</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault38> MESExecuteAsync (ODataV4POWERMESExecuteBody body, string company)
        {
             ApiResponse<InlineResponseDefault38> localVarResponse = await MESExecuteAsyncWithHttpInfo(body, company);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_Execute MES_Execute
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>Task of ApiResponse (InlineResponseDefault38)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault38>> MESExecuteAsyncWithHttpInfo (ODataV4POWERMESExecuteBody body, string company)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->MESExecute");
            // verify the required parameter 'company' is set
            if (company == null)
                throw new ApiException(400, "Missing required parameter 'company' when calling DefaultApi->MESExecute");

            var localVarPath = "/ODataV4/POWERMES_Execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (company != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "company", company)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESExecute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault38>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault38) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault38)));
        }

        /// <summary>
        /// MES_GetAttachments MES_GetAsyncPostingLogs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault5</returns>
        public InlineResponseDefault5 MESGetAsyncPostingLogs (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault5> localVarResponse = MESGetAsyncPostingLogsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetAttachments MES_GetAsyncPostingLogs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault5</returns>
        public ApiResponse< InlineResponseDefault5 > MESGetAsyncPostingLogsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetAsyncPostingLogs");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/asyncPostingLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetAsyncPostingLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault5>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault5) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault5)));
        }

        /// <summary>
        /// MES_GetAttachments MES_GetAsyncPostingLogs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault5</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault5> MESGetAsyncPostingLogsAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault5> localVarResponse = await MESGetAsyncPostingLogsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetAttachments MES_GetAsyncPostingLogs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault5)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault5>> MESGetAsyncPostingLogsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetAsyncPostingLogs");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/asyncPostingLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetAsyncPostingLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault5>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault5) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault5)));
        }

        /// <summary>
        /// MES_GetAttachments MES_GetAttachments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault6</returns>
        public InlineResponseDefault6 MESGetAttachments (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault6> localVarResponse = MESGetAttachmentsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetAttachments MES_GetAttachments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault6</returns>
        public ApiResponse< InlineResponseDefault6 > MESGetAttachmentsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetAttachments");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetAttachments");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault6>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault6) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault6)));
        }

        /// <summary>
        /// MES_GetAttachments MES_GetAttachments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault6</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault6> MESGetAttachmentsAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault6> localVarResponse = await MESGetAttachmentsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetAttachments MES_GetAttachments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault6)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault6>> MESGetAttachmentsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetAttachments");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetAttachments");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault6>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault6) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault6)));
        }

        /// <summary>
        /// MES_GetAvailableTrackingLines MES_GetAvailableTrackingLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault7</returns>
        public InlineResponseDefault7 MESGetAvailableTrackingLines (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault7> localVarResponse = MESGetAvailableTrackingLinesWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetAvailableTrackingLines MES_GetAvailableTrackingLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault7</returns>
        public ApiResponse< InlineResponseDefault7 > MESGetAvailableTrackingLinesWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetAvailableTrackingLines");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetAvailableTrackingLines");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/availableTrackingLines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetAvailableTrackingLines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault7>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault7) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault7)));
        }

        /// <summary>
        /// MES_GetAvailableTrackingLines MES_GetAvailableTrackingLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault7</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault7> MESGetAvailableTrackingLinesAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault7> localVarResponse = await MESGetAvailableTrackingLinesAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetAvailableTrackingLines MES_GetAvailableTrackingLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault7)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault7>> MESGetAvailableTrackingLinesAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetAvailableTrackingLines");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetAvailableTrackingLines");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/availableTrackingLines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetAvailableTrackingLines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault7>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault7) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault7)));
        }

        /// <summary>
        /// MES_GetCaptionTranslations MES_GetCaptionTranslations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault8</returns>
        public InlineResponseDefault8 MESGetCaptionTranslations (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault8> localVarResponse = MESGetCaptionTranslationsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetCaptionTranslations MES_GetCaptionTranslations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault8</returns>
        public ApiResponse< InlineResponseDefault8 > MESGetCaptionTranslationsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetCaptionTranslations");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetCaptionTranslations");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/captionTranslations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetCaptionTranslations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault8>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault8) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault8)));
        }

        /// <summary>
        /// MES_GetCaptionTranslations MES_GetCaptionTranslations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault8</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault8> MESGetCaptionTranslationsAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault8> localVarResponse = await MESGetCaptionTranslationsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetCaptionTranslations MES_GetCaptionTranslations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault8)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault8>> MESGetCaptionTranslationsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetCaptionTranslations");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetCaptionTranslations");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/captionTranslations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetCaptionTranslations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault8>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault8) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault8)));
        }

        /// <summary>
        /// MES_GetContacts MES_GetContacts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault9</returns>
        public InlineResponseDefault9 MESGetContacts (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault9> localVarResponse = MESGetContactsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetContacts MES_GetContacts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault9</returns>
        public ApiResponse< InlineResponseDefault9 > MESGetContactsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetContacts");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetContacts");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault9>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault9) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault9)));
        }

        /// <summary>
        /// MES_GetContacts MES_GetContacts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault9</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault9> MESGetContactsAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault9> localVarResponse = await MESGetContactsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetContacts MES_GetContacts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault9)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault9>> MESGetContactsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetContacts");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetContacts");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault9>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault9) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault9)));
        }

        /// <summary>
        /// MES_GetDynamicRecordSetups MES_GetDynamicRecordSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault11</returns>
        public InlineResponseDefault11 MESGetDynamicRecordSetups (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault11> localVarResponse = MESGetDynamicRecordSetupsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetDynamicRecordSetups MES_GetDynamicRecordSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault11</returns>
        public ApiResponse< InlineResponseDefault11 > MESGetDynamicRecordSetupsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetDynamicRecordSetups");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetDynamicRecordSetups");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/dynamicRecordSetups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetDynamicRecordSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault11>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault11) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault11)));
        }

        /// <summary>
        /// MES_GetDynamicRecordSetups MES_GetDynamicRecordSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault11</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault11> MESGetDynamicRecordSetupsAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault11> localVarResponse = await MESGetDynamicRecordSetupsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetDynamicRecordSetups MES_GetDynamicRecordSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault11)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault11>> MESGetDynamicRecordSetupsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetDynamicRecordSetups");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetDynamicRecordSetups");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/dynamicRecordSetups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetDynamicRecordSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault11>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault11) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault11)));
        }

        /// <summary>
        /// MES_GetDynamicRecords MES_GetDynamicRecords
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault10</returns>
        public InlineResponseDefault10 MESGetDynamicRecords (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault10> localVarResponse = MESGetDynamicRecordsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetDynamicRecords MES_GetDynamicRecords
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault10</returns>
        public ApiResponse< InlineResponseDefault10 > MESGetDynamicRecordsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetDynamicRecords");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetDynamicRecords");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/dynamicRecords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetDynamicRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault10>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault10) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault10)));
        }

        /// <summary>
        /// MES_GetDynamicRecords MES_GetDynamicRecords
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault10</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault10> MESGetDynamicRecordsAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault10> localVarResponse = await MESGetDynamicRecordsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetDynamicRecords MES_GetDynamicRecords
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault10)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault10>> MESGetDynamicRecordsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetDynamicRecords");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetDynamicRecords");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/dynamicRecords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetDynamicRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault10>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault10) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault10)));
        }

        /// <summary>
        /// MES_GetEmployeeEntries MES_GetEmployeeEntries
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault12</returns>
        public InlineResponseDefault12 MESGetEmployeeEntries (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault12> localVarResponse = MESGetEmployeeEntriesWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetEmployeeEntries MES_GetEmployeeEntries
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault12</returns>
        public ApiResponse< InlineResponseDefault12 > MESGetEmployeeEntriesWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetEmployeeEntries");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetEmployeeEntries");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/employeeEntries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetEmployeeEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault12>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault12) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault12)));
        }

        /// <summary>
        /// MES_GetEmployeeEntries MES_GetEmployeeEntries
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault12</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault12> MESGetEmployeeEntriesAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault12> localVarResponse = await MESGetEmployeeEntriesAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetEmployeeEntries MES_GetEmployeeEntries
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault12)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault12>> MESGetEmployeeEntriesAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetEmployeeEntries");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetEmployeeEntries");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/employeeEntries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetEmployeeEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault12>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault12) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault12)));
        }

        /// <summary>
        /// MES_GetEmployees MES_GetEmployees
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault13</returns>
        public InlineResponseDefault13 MESGetEmployees (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault13> localVarResponse = MESGetEmployeesWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetEmployees MES_GetEmployees
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault13</returns>
        public ApiResponse< InlineResponseDefault13 > MESGetEmployeesWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetEmployees");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/employees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetEmployees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault13>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault13) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault13)));
        }

        /// <summary>
        /// MES_GetEmployees MES_GetEmployees
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault13</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault13> MESGetEmployeesAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault13> localVarResponse = await MESGetEmployeesAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetEmployees MES_GetEmployees
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault13)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault13>> MESGetEmployeesAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetEmployees");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/employees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetEmployees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault13>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault13) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault13)));
        }

        /// <summary>
        /// MES_GetHandlingUnits MES_GetHandlingUnits
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault14</returns>
        public InlineResponseDefault14 MESGetHandlingUnits (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault14> localVarResponse = MESGetHandlingUnitsWithHttpInfo(companyId, filter, orderby, select, top);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetHandlingUnits MES_GetHandlingUnits
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault14</returns>
        public ApiResponse< InlineResponseDefault14 > MESGetHandlingUnitsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetHandlingUnits");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/handlingUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetHandlingUnits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault14>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault14) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault14)));
        }

        /// <summary>
        /// MES_GetHandlingUnits MES_GetHandlingUnits
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault14</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault14> MESGetHandlingUnitsAsync (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault14> localVarResponse = await MESGetHandlingUnitsAsyncWithHttpInfo(companyId, filter, orderby, select, top);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetHandlingUnits MES_GetHandlingUnits
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault14)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault14>> MESGetHandlingUnitsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetHandlingUnits");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/handlingUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetHandlingUnits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault14>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault14) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault14)));
        }

        /// <summary>
        /// MES_GetItemSubstitutions MES_GetItemSubstitutions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault16</returns>
        public InlineResponseDefault16 MESGetItemSubstitutions (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault16> localVarResponse = MESGetItemSubstitutionsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetItemSubstitutions MES_GetItemSubstitutions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault16</returns>
        public ApiResponse< InlineResponseDefault16 > MESGetItemSubstitutionsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetItemSubstitutions");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/itemSubstitutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetItemSubstitutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault16>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault16) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault16)));
        }

        /// <summary>
        /// MES_GetItemSubstitutions MES_GetItemSubstitutions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault16</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault16> MESGetItemSubstitutionsAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault16> localVarResponse = await MESGetItemSubstitutionsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetItemSubstitutions MES_GetItemSubstitutions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault16)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault16>> MESGetItemSubstitutionsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetItemSubstitutions");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/itemSubstitutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetItemSubstitutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault16>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault16) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault16)));
        }

        /// <summary>
        /// MES_GetItemVariants MES_GetItemVariants
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault17</returns>
        public InlineResponseDefault17 MESGetItemVariants (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault17> localVarResponse = MESGetItemVariantsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetItemVariants MES_GetItemVariants
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault17</returns>
        public ApiResponse< InlineResponseDefault17 > MESGetItemVariantsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetItemVariants");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/itemVariants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetItemVariants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault17>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault17) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault17)));
        }

        /// <summary>
        /// MES_GetItemVariants MES_GetItemVariants
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault17</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault17> MESGetItemVariantsAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault17> localVarResponse = await MESGetItemVariantsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetItemVariants MES_GetItemVariants
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault17)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault17>> MESGetItemVariantsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetItemVariants");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/itemVariants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetItemVariants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault17>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault17) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault17)));
        }

        /// <summary>
        /// MES_GetItems MES_GetItems
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>InlineResponseDefault15</returns>
        public InlineResponseDefault15 MESGetItems (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault15> localVarResponse = MESGetItemsWithHttpInfo(companyId, filter, orderby, select, top);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetItems MES_GetItems
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault15</returns>
        public ApiResponse< InlineResponseDefault15 > MESGetItemsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetItems");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault15>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault15) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault15)));
        }

        /// <summary>
        /// MES_GetItems MES_GetItems
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of InlineResponseDefault15</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault15> MESGetItemsAsync (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
             ApiResponse<InlineResponseDefault15> localVarResponse = await MESGetItemsAsyncWithHttpInfo(companyId, filter, orderby, select, top);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetItems MES_GetItems
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault15)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault15>> MESGetItemsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string top = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetItems");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault15>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault15) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault15)));
        }

        /// <summary>
        /// MES_GetJobTasks MES_GetJobTasks
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault18</returns>
        public InlineResponseDefault18 MESGetJobTasks (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault18> localVarResponse = MESGetJobTasksWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetJobTasks MES_GetJobTasks
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault18</returns>
        public ApiResponse< InlineResponseDefault18 > MESGetJobTasksWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetJobTasks");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/jobTasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetJobTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault18>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault18) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault18)));
        }

        /// <summary>
        /// MES_GetJobTasks MES_GetJobTasks
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault18</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault18> MESGetJobTasksAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault18> localVarResponse = await MESGetJobTasksAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetJobTasks MES_GetJobTasks
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault18)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault18>> MESGetJobTasksAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetJobTasks");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/jobTasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetJobTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault18>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault18) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault18)));
        }

        /// <summary>
        /// MES_GetJobs MES_GetJobs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault15</returns>
        public InlineResponseDefault15 MESGetJobs (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault15> localVarResponse = MESGetJobsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetJobs MES_GetJobs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault15</returns>
        public ApiResponse< InlineResponseDefault15 > MESGetJobsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetJobs");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault15>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault15) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault15)));
        }

        /// <summary>
        /// MES_GetJobs MES_GetJobs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault15</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault15> MESGetJobsAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault15> localVarResponse = await MESGetJobsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetJobs MES_GetJobs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault15)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault15>> MESGetJobsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetJobs");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault15>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault15) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault15)));
        }

        /// <summary>
        /// MES_GetMachineCenters MES_GetMachineCenters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault19</returns>
        public InlineResponseDefault19 MESGetMachineCenters (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault19> localVarResponse = MESGetMachineCentersWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetMachineCenters MES_GetMachineCenters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault19</returns>
        public ApiResponse< InlineResponseDefault19 > MESGetMachineCentersWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetMachineCenters");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetMachineCenters");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/machineCenters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetMachineCenters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault19>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault19) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault19)));
        }

        /// <summary>
        /// MES_GetMachineCenters MES_GetMachineCenters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault19</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault19> MESGetMachineCentersAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault19> localVarResponse = await MESGetMachineCentersAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetMachineCenters MES_GetMachineCenters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault19)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault19>> MESGetMachineCentersAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetMachineCenters");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetMachineCenters");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/machineCenters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetMachineCenters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault19>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault19) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault19)));
        }

        /// <summary>
        /// MES_GetNotifications MES_GetNotifications
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault20</returns>
        public InlineResponseDefault20 MESGetNotifications (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault20> localVarResponse = MESGetNotificationsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetNotifications MES_GetNotifications
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault20</returns>
        public ApiResponse< InlineResponseDefault20 > MESGetNotificationsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetNotifications");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetNotifications");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault20>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault20) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault20)));
        }

        /// <summary>
        /// MES_GetNotifications MES_GetNotifications
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault20</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault20> MESGetNotificationsAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault20> localVarResponse = await MESGetNotificationsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetNotifications MES_GetNotifications
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault20)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault20>> MESGetNotificationsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetNotifications");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetNotifications");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault20>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault20) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault20)));
        }

        /// <summary>
        /// MES_GetPackagingInstructions MES_GetPackagingInstructions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault21</returns>
        public InlineResponseDefault21 MESGetPackagingInstructions (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault21> localVarResponse = MESGetPackagingInstructionsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetPackagingInstructions MES_GetPackagingInstructions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault21</returns>
        public ApiResponse< InlineResponseDefault21 > MESGetPackagingInstructionsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetPackagingInstructions");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/packagingInstructions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetPackagingInstructions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault21>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault21) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault21)));
        }

        /// <summary>
        /// MES_GetPackagingInstructions MES_GetPackagingInstructions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault21</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault21> MESGetPackagingInstructionsAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault21> localVarResponse = await MESGetPackagingInstructionsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetPackagingInstructions MES_GetPackagingInstructions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault21)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault21>> MESGetPackagingInstructionsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetPackagingInstructions");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/packagingInstructions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetPackagingInstructions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault21>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault21) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault21)));
        }

        /// <summary>
        /// MES_GetPackagingMaterials MES_GetPackagingMaterials
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault22</returns>
        public InlineResponseDefault22 MESGetPackagingMaterials (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault22> localVarResponse = MESGetPackagingMaterialsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetPackagingMaterials MES_GetPackagingMaterials
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault22</returns>
        public ApiResponse< InlineResponseDefault22 > MESGetPackagingMaterialsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetPackagingMaterials");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/packagingMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetPackagingMaterials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault22>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault22) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault22)));
        }

        /// <summary>
        /// MES_GetPackagingMaterials MES_GetPackagingMaterials
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault22</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault22> MESGetPackagingMaterialsAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault22> localVarResponse = await MESGetPackagingMaterialsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetPackagingMaterials MES_GetPackagingMaterials
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault22)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault22>> MESGetPackagingMaterialsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetPackagingMaterials");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/packagingMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetPackagingMaterials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault22>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault22) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault22)));
        }

        /// <summary>
        /// MES_GetPanelSetupEmployees MES_GetPanelSetupEmployees
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault24</returns>
        public InlineResponseDefault24 MESGetPanelSetupEmployees (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault24> localVarResponse = MESGetPanelSetupEmployeesWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetPanelSetupEmployees MES_GetPanelSetupEmployees
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault24</returns>
        public ApiResponse< InlineResponseDefault24 > MESGetPanelSetupEmployeesWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetPanelSetupEmployees");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetPanelSetupEmployees");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/panelSetupEmployees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetPanelSetupEmployees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault24>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault24) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault24)));
        }

        /// <summary>
        /// MES_GetPanelSetupEmployees MES_GetPanelSetupEmployees
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault24</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault24> MESGetPanelSetupEmployeesAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault24> localVarResponse = await MESGetPanelSetupEmployeesAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetPanelSetupEmployees MES_GetPanelSetupEmployees
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault24)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault24>> MESGetPanelSetupEmployeesAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetPanelSetupEmployees");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetPanelSetupEmployees");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/panelSetupEmployees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetPanelSetupEmployees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault24>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault24) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault24)));
        }

        /// <summary>
        /// MES_GetPanelSetupReasonCodes MES_GetPanelSetupReasonCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault25</returns>
        public InlineResponseDefault25 MESGetPanelSetupReasonCodes (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault25> localVarResponse = MESGetPanelSetupReasonCodesWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetPanelSetupReasonCodes MES_GetPanelSetupReasonCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault25</returns>
        public ApiResponse< InlineResponseDefault25 > MESGetPanelSetupReasonCodesWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetPanelSetupReasonCodes");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetPanelSetupReasonCodes");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/panelSetupReasonCodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetPanelSetupReasonCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault25>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault25) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault25)));
        }

        /// <summary>
        /// MES_GetPanelSetupReasonCodes MES_GetPanelSetupReasonCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault25</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault25> MESGetPanelSetupReasonCodesAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault25> localVarResponse = await MESGetPanelSetupReasonCodesAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetPanelSetupReasonCodes MES_GetPanelSetupReasonCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault25)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault25>> MESGetPanelSetupReasonCodesAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetPanelSetupReasonCodes");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetPanelSetupReasonCodes");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/panelSetupReasonCodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetPanelSetupReasonCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault25>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault25) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault25)));
        }

        /// <summary>
        /// MES_GetPanelSetups MES_GetPanelSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault26</returns>
        public InlineResponseDefault26 MESGetPanelSetups (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault26> localVarResponse = MESGetPanelSetupsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetPanelSetups MES_GetPanelSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault26</returns>
        public ApiResponse< InlineResponseDefault26 > MESGetPanelSetupsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetPanelSetups");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetPanelSetups");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/panelSetups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetPanelSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault26>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault26) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault26)));
        }

        /// <summary>
        /// MES_GetPanelSetups MES_GetPanelSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault26</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault26> MESGetPanelSetupsAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault26> localVarResponse = await MESGetPanelSetupsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetPanelSetups MES_GetPanelSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault26)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault26>> MESGetPanelSetupsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetPanelSetups");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetPanelSetups");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/panelSetups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetPanelSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault26>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault26) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault26)));
        }

        /// <summary>
        /// MES_GetPanels MES_GetPanels
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault23</returns>
        public InlineResponseDefault23 MESGetPanels (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault23> localVarResponse = MESGetPanelsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetPanels MES_GetPanels
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault23</returns>
        public ApiResponse< InlineResponseDefault23 > MESGetPanelsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetPanels");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/panels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetPanels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault23>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault23) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault23)));
        }

        /// <summary>
        /// MES_GetPanels MES_GetPanels
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault23</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault23> MESGetPanelsAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault23> localVarResponse = await MESGetPanelsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetPanels MES_GetPanels
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault23)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault23>> MESGetPanelsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetPanels");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/panels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetPanels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault23>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault23) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault23)));
        }

        /// <summary>
        /// MES_GetProdOrderComponents MES_GetProdOrderComponents
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault27</returns>
        public InlineResponseDefault27 MESGetProdOrderComponents (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault27> localVarResponse = MESGetProdOrderComponentsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetProdOrderComponents MES_GetProdOrderComponents
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault27</returns>
        public ApiResponse< InlineResponseDefault27 > MESGetProdOrderComponentsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetProdOrderComponents");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetProdOrderComponents");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/prodOrderComponents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetProdOrderComponents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault27>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault27) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault27)));
        }

        /// <summary>
        /// MES_GetProdOrderComponents MES_GetProdOrderComponents
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault27</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault27> MESGetProdOrderComponentsAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault27> localVarResponse = await MESGetProdOrderComponentsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetProdOrderComponents MES_GetProdOrderComponents
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault27)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault27>> MESGetProdOrderComponentsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetProdOrderComponents");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetProdOrderComponents");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/prodOrderComponents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetProdOrderComponents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault27>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault27) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault27)));
        }

        /// <summary>
        /// MES_GetProdOrderRoutingLines MES_GetProdOrderRoutingLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault28</returns>
        public InlineResponseDefault28 MESGetProdOrderRoutingLines (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault28> localVarResponse = MESGetProdOrderRoutingLinesWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetProdOrderRoutingLines MES_GetProdOrderRoutingLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault28</returns>
        public ApiResponse< InlineResponseDefault28 > MESGetProdOrderRoutingLinesWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetProdOrderRoutingLines");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetProdOrderRoutingLines");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/prodOrderRoutingLines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetProdOrderRoutingLines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault28>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault28) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault28)));
        }

        /// <summary>
        /// MES_GetProdOrderRoutingLines MES_GetProdOrderRoutingLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault28</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault28> MESGetProdOrderRoutingLinesAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault28> localVarResponse = await MESGetProdOrderRoutingLinesAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetProdOrderRoutingLines MES_GetProdOrderRoutingLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault28)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault28>> MESGetProdOrderRoutingLinesAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetProdOrderRoutingLines");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetProdOrderRoutingLines");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/prodOrderRoutingLines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetProdOrderRoutingLines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault28>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault28) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault28)));
        }

        /// <summary>
        /// MES_GetProdOrderTools MES_GetProdOrderTools
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault31</returns>
        public InlineResponseDefault31 MESGetProdOrderTools (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault31> localVarResponse = MESGetProdOrderToolsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetProdOrderTools MES_GetProdOrderTools
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault31</returns>
        public ApiResponse< InlineResponseDefault31 > MESGetProdOrderToolsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetProdOrderTools");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetProdOrderTools");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/routingTools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetProdOrderTools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault31>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault31) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault31)));
        }

        /// <summary>
        /// MES_GetProdOrderTools MES_GetProdOrderTools
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault31</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault31> MESGetProdOrderToolsAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault31> localVarResponse = await MESGetProdOrderToolsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetProdOrderTools MES_GetProdOrderTools
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault31)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault31>> MESGetProdOrderToolsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetProdOrderTools");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetProdOrderTools");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/routingTools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetProdOrderTools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault31>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault31) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault31)));
        }

        /// <summary>
        /// MES_GetReworkCodes MES_GetReworkCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault29</returns>
        public InlineResponseDefault29 MESGetReworkCodes (string companyId, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault29> localVarResponse = MESGetReworkCodesWithHttpInfo(companyId, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetReworkCodes MES_GetReworkCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault29</returns>
        public ApiResponse< InlineResponseDefault29 > MESGetReworkCodesWithHttpInfo (string companyId, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetReworkCodes");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/reworkCodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetReworkCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault29>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault29) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault29)));
        }

        /// <summary>
        /// MES_GetReworkCodes MES_GetReworkCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault29</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault29> MESGetReworkCodesAsync (string companyId, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault29> localVarResponse = await MESGetReworkCodesAsyncWithHttpInfo(companyId, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetReworkCodes MES_GetReworkCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault29)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault29>> MESGetReworkCodesAsyncWithHttpInfo (string companyId, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetReworkCodes");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/reworkCodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetReworkCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault29>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault29) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault29)));
        }

        /// <summary>
        /// MES_GetRoutingComments MES_GetRoutingComments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault30</returns>
        public InlineResponseDefault30 MESGetRoutingComments (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault30> localVarResponse = MESGetRoutingCommentsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetRoutingComments MES_GetRoutingComments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault30</returns>
        public ApiResponse< InlineResponseDefault30 > MESGetRoutingCommentsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetRoutingComments");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetRoutingComments");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/routingComments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetRoutingComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault30>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault30) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault30)));
        }

        /// <summary>
        /// MES_GetRoutingComments MES_GetRoutingComments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault30</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault30> MESGetRoutingCommentsAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault30> localVarResponse = await MESGetRoutingCommentsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetRoutingComments MES_GetRoutingComments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault30)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault30>> MESGetRoutingCommentsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetRoutingComments");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetRoutingComments");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/routingComments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetRoutingComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault30>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault30) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault30)));
        }

        /// <summary>
        /// MES_GetScrapCodes MES_GetScrapCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault29</returns>
        public InlineResponseDefault29 MESGetScrapCodes (string companyId, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault29> localVarResponse = MESGetScrapCodesWithHttpInfo(companyId, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetScrapCodes MES_GetScrapCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault29</returns>
        public ApiResponse< InlineResponseDefault29 > MESGetScrapCodesWithHttpInfo (string companyId, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetScrapCodes");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/scrapCodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetScrapCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault29>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault29) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault29)));
        }

        /// <summary>
        /// MES_GetScrapCodes MES_GetScrapCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault29</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault29> MESGetScrapCodesAsync (string companyId, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault29> localVarResponse = await MESGetScrapCodesAsyncWithHttpInfo(companyId, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetScrapCodes MES_GetScrapCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault29)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault29>> MESGetScrapCodesAsyncWithHttpInfo (string companyId, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetScrapCodes");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/scrapCodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetScrapCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault29>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault29) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault29)));
        }

        /// <summary>
        /// MES_GetSetups MES_GetSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault32</returns>
        public InlineResponseDefault32 MESGetSetups (string companyId, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault32> localVarResponse = MESGetSetupsWithHttpInfo(companyId, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetSetups MES_GetSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault32</returns>
        public ApiResponse< InlineResponseDefault32 > MESGetSetupsWithHttpInfo (string companyId, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetSetups");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/setups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault32>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault32) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault32)));
        }

        /// <summary>
        /// MES_GetSetups MES_GetSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault32</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault32> MESGetSetupsAsync (string companyId, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault32> localVarResponse = await MESGetSetupsAsyncWithHttpInfo(companyId, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetSetups MES_GetSetups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault32)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault32>> MESGetSetupsAsyncWithHttpInfo (string companyId, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetSetups");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/setups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault32>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault32) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault32)));
        }

        /// <summary>
        /// MES_GetStopCodes MES_GetStopCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault29</returns>
        public InlineResponseDefault29 MESGetStopCodes (string companyId, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault29> localVarResponse = MESGetStopCodesWithHttpInfo(companyId, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetStopCodes MES_GetStopCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault29</returns>
        public ApiResponse< InlineResponseDefault29 > MESGetStopCodesWithHttpInfo (string companyId, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetStopCodes");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/stopCodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetStopCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault29>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault29) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault29)));
        }

        /// <summary>
        /// MES_GetStopCodes MES_GetStopCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault29</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault29> MESGetStopCodesAsync (string companyId, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault29> localVarResponse = await MESGetStopCodesAsyncWithHttpInfo(companyId, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetStopCodes MES_GetStopCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault29)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault29>> MESGetStopCodesAsyncWithHttpInfo (string companyId, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetStopCodes");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/stopCodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetStopCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault29>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault29) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault29)));
        }

        /// <summary>
        /// MES_GetSubstitutionConditions MES_GetSubstitutionConditions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault43</returns>
        public InlineResponseDefault43 MESGetSubstitutionConditions (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault43> localVarResponse = MESGetSubstitutionConditionsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetSubstitutionConditions MES_GetSubstitutionConditions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault43</returns>
        public ApiResponse< InlineResponseDefault43 > MESGetSubstitutionConditionsWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetSubstitutionConditions");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/substitutionConditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetSubstitutionConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault43>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault43) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault43)));
        }

        /// <summary>
        /// MES_GetSubstitutionConditions MES_GetSubstitutionConditions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault43</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault43> MESGetSubstitutionConditionsAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault43> localVarResponse = await MESGetSubstitutionConditionsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetSubstitutionConditions MES_GetSubstitutionConditions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault43)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault43>> MESGetSubstitutionConditionsAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetSubstitutionConditions");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/substitutionConditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetSubstitutionConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault43>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault43) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault43)));
        }

        /// <summary>
        /// MES_GetSynoptic MES_GetSynoptic
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>InlineResponseDefault44</returns>
        public InlineResponseDefault44 MESGetSynoptic (string companyId, string filter = null, string orderby = null, string select = null, string expand = null)
        {
             ApiResponse<InlineResponseDefault44> localVarResponse = MESGetSynopticWithHttpInfo(companyId, filter, orderby, select, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetSynoptic MES_GetSynoptic
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault44</returns>
        public ApiResponse< InlineResponseDefault44 > MESGetSynopticWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string expand = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetSynoptic");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/synopticResources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetSynoptic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault44>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault44) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault44)));
        }

        /// <summary>
        /// MES_GetSynoptic MES_GetSynoptic
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of InlineResponseDefault44</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault44> MESGetSynopticAsync (string companyId, string filter = null, string orderby = null, string select = null, string expand = null)
        {
             ApiResponse<InlineResponseDefault44> localVarResponse = await MESGetSynopticAsyncWithHttpInfo(companyId, filter, orderby, select, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetSynoptic MES_GetSynoptic
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault44)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault44>> MESGetSynopticAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null, string expand = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetSynoptic");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/synopticResources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetSynoptic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault44>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault44) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault44)));
        }

        /// <summary>
        /// MES_GetTeamMembers MES_GetTeamMembers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault33</returns>
        public InlineResponseDefault33 MESGetTeamMembers (string companyId, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault33> localVarResponse = MESGetTeamMembersWithHttpInfo(companyId, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetTeamMembers MES_GetTeamMembers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault33</returns>
        public ApiResponse< InlineResponseDefault33 > MESGetTeamMembersWithHttpInfo (string companyId, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetTeamMembers");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/teamMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetTeamMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault33>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault33) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault33)));
        }

        /// <summary>
        /// MES_GetTeamMembers MES_GetTeamMembers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault33</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault33> MESGetTeamMembersAsync (string companyId, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault33> localVarResponse = await MESGetTeamMembersAsyncWithHttpInfo(companyId, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetTeamMembers MES_GetTeamMembers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault33)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault33>> MESGetTeamMembersAsyncWithHttpInfo (string companyId, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetTeamMembers");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/teamMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetTeamMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault33>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault33) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault33)));
        }

        /// <summary>
        /// MES_GetTeams MES_GetTeams
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault34</returns>
        public InlineResponseDefault34 MESGetTeams (string companyId, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault34> localVarResponse = MESGetTeamsWithHttpInfo(companyId, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetTeams MES_GetTeams
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault34</returns>
        public ApiResponse< InlineResponseDefault34 > MESGetTeamsWithHttpInfo (string companyId, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetTeams");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault34>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault34) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault34)));
        }

        /// <summary>
        /// MES_GetTeams MES_GetTeams
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault34</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault34> MESGetTeamsAsync (string companyId, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault34> localVarResponse = await MESGetTeamsAsyncWithHttpInfo(companyId, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetTeams MES_GetTeams
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault34)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault34>> MESGetTeamsAsyncWithHttpInfo (string companyId, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetTeams");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault34>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault34) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault34)));
        }

        /// <summary>
        /// MES_GetTrackedComponents MES_GetTrackedComponents
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault35</returns>
        public InlineResponseDefault35 MESGetTrackedComponents (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault35> localVarResponse = MESGetTrackedComponentsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetTrackedComponents MES_GetTrackedComponents
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault35</returns>
        public ApiResponse< InlineResponseDefault35 > MESGetTrackedComponentsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetTrackedComponents");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetTrackedComponents");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/trackedComponents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetTrackedComponents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault35>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault35) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault35)));
        }

        /// <summary>
        /// MES_GetTrackedComponents MES_GetTrackedComponents
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault35</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault35> MESGetTrackedComponentsAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault35> localVarResponse = await MESGetTrackedComponentsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetTrackedComponents MES_GetTrackedComponents
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault35)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault35>> MESGetTrackedComponentsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetTrackedComponents");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetTrackedComponents");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/trackedComponents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetTrackedComponents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault35>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault35) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault35)));
        }

        /// <summary>
        /// MES_GetTrackingLines MES_GetTrackingLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault36</returns>
        public InlineResponseDefault36 MESGetTrackingLines (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault36> localVarResponse = MESGetTrackingLinesWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetTrackingLines MES_GetTrackingLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault36</returns>
        public ApiResponse< InlineResponseDefault36 > MESGetTrackingLinesWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetTrackingLines");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetTrackingLines");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/trackingLines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetTrackingLines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault36>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault36) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault36)));
        }

        /// <summary>
        /// MES_GetTrackingLines MES_GetTrackingLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault36</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault36> MESGetTrackingLinesAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault36> localVarResponse = await MESGetTrackingLinesAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetTrackingLines MES_GetTrackingLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault36)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault36>> MESGetTrackingLinesAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetTrackingLines");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetTrackingLines");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/trackingLines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetTrackingLines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault36>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault36) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault36)));
        }

        /// <summary>
        /// MES_GetWorkCenters MES_GetWorkCenters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault37</returns>
        public InlineResponseDefault37 MESGetWorkCenters (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault37> localVarResponse = MESGetWorkCentersWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MES_GetWorkCenters MES_GetWorkCenters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault37</returns>
        public ApiResponse< InlineResponseDefault37 > MESGetWorkCentersWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetWorkCenters");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetWorkCenters");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/workCenters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetWorkCenters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault37>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault37) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault37)));
        }

        /// <summary>
        /// MES_GetWorkCenters MES_GetWorkCenters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault37</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault37> MESGetWorkCentersAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault37> localVarResponse = await MESGetWorkCentersAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MES_GetWorkCenters MES_GetWorkCenters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault37)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault37>> MESGetWorkCentersAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESGetWorkCenters");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->MESGetWorkCenters");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/workCenters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESGetWorkCenters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault37>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault37) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault37)));
        }

        /// <summary>
        /// MES_PatchAsyncPostingLogs MES_PatchAsyncPostingLogs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ifMatch"></param>
        /// <param name="companyId"></param>
        /// <param name="systemId"></param>
        /// <returns></returns>
        public void MESPatchAsyncPostingLogs (CompaniescompanyIdAsyncPostingLogssystemIdBody body, string ifMatch, string companyId, string systemId)
        {
             MESPatchAsyncPostingLogsWithHttpInfo(body, ifMatch, companyId, systemId);
        }

        /// <summary>
        /// MES_PatchAsyncPostingLogs MES_PatchAsyncPostingLogs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ifMatch"></param>
        /// <param name="companyId"></param>
        /// <param name="systemId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MESPatchAsyncPostingLogsWithHttpInfo (CompaniescompanyIdAsyncPostingLogssystemIdBody body, string ifMatch, string companyId, string systemId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->MESPatchAsyncPostingLogs");
            // verify the required parameter 'ifMatch' is set
            if (ifMatch == null)
                throw new ApiException(400, "Missing required parameter 'ifMatch' when calling DefaultApi->MESPatchAsyncPostingLogs");
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESPatchAsyncPostingLogs");
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling DefaultApi->MESPatchAsyncPostingLogs");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/asyncPostingLogs({systemId})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (systemId != null) localVarPathParams.Add("systemId", this.Configuration.ApiClient.ParameterToString(systemId)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESPatchAsyncPostingLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// MES_PatchAsyncPostingLogs MES_PatchAsyncPostingLogs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ifMatch"></param>
        /// <param name="companyId"></param>
        /// <param name="systemId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MESPatchAsyncPostingLogsAsync (CompaniescompanyIdAsyncPostingLogssystemIdBody body, string ifMatch, string companyId, string systemId)
        {
             await MESPatchAsyncPostingLogsAsyncWithHttpInfo(body, ifMatch, companyId, systemId);

        }

        /// <summary>
        /// MES_PatchAsyncPostingLogs MES_PatchAsyncPostingLogs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ifMatch"></param>
        /// <param name="companyId"></param>
        /// <param name="systemId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MESPatchAsyncPostingLogsAsyncWithHttpInfo (CompaniescompanyIdAsyncPostingLogssystemIdBody body, string ifMatch, string companyId, string systemId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->MESPatchAsyncPostingLogs");
            // verify the required parameter 'ifMatch' is set
            if (ifMatch == null)
                throw new ApiException(400, "Missing required parameter 'ifMatch' when calling DefaultApi->MESPatchAsyncPostingLogs");
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESPatchAsyncPostingLogs");
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling DefaultApi->MESPatchAsyncPostingLogs");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/asyncPostingLogs({systemId})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (systemId != null) localVarPathParams.Add("systemId", this.Configuration.ApiClient.ParameterToString(systemId)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESPatchAsyncPostingLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// MES_PatchNotification MES_PatchNotification
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ifMatch"></param>
        /// <param name="companyId"></param>
        /// <param name="systemId"></param>
        /// <returns></returns>
        public void MESPatchNotification (CompaniescompanyIdNotificationssystemIdBody body, string ifMatch, string companyId, string systemId)
        {
             MESPatchNotificationWithHttpInfo(body, ifMatch, companyId, systemId);
        }

        /// <summary>
        /// MES_PatchNotification MES_PatchNotification
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ifMatch"></param>
        /// <param name="companyId"></param>
        /// <param name="systemId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MESPatchNotificationWithHttpInfo (CompaniescompanyIdNotificationssystemIdBody body, string ifMatch, string companyId, string systemId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->MESPatchNotification");
            // verify the required parameter 'ifMatch' is set
            if (ifMatch == null)
                throw new ApiException(400, "Missing required parameter 'ifMatch' when calling DefaultApi->MESPatchNotification");
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESPatchNotification");
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling DefaultApi->MESPatchNotification");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/notifications({systemId})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (systemId != null) localVarPathParams.Add("systemId", this.Configuration.ApiClient.ParameterToString(systemId)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESPatchNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// MES_PatchNotification MES_PatchNotification
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ifMatch"></param>
        /// <param name="companyId"></param>
        /// <param name="systemId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MESPatchNotificationAsync (CompaniescompanyIdNotificationssystemIdBody body, string ifMatch, string companyId, string systemId)
        {
             await MESPatchNotificationAsyncWithHttpInfo(body, ifMatch, companyId, systemId);

        }

        /// <summary>
        /// MES_PatchNotification MES_PatchNotification
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ifMatch"></param>
        /// <param name="companyId"></param>
        /// <param name="systemId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MESPatchNotificationAsyncWithHttpInfo (CompaniescompanyIdNotificationssystemIdBody body, string ifMatch, string companyId, string systemId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->MESPatchNotification");
            // verify the required parameter 'ifMatch' is set
            if (ifMatch == null)
                throw new ApiException(400, "Missing required parameter 'ifMatch' when calling DefaultApi->MESPatchNotification");
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->MESPatchNotification");
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling DefaultApi->MESPatchNotification");

            var localVarPath = "/api/eos/mes/v1.0/companies({companyId})/notifications({systemId})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (systemId != null) localVarPathParams.Add("systemId", this.Configuration.ApiClient.ParameterToString(systemId)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MESPatchNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// PQA_Execute PQA_Execute
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>InlineResponseDefault38</returns>
        public InlineResponseDefault38 PQAExecute (ODataV4POWERPQAExecuteBody body, string company)
        {
             ApiResponse<InlineResponseDefault38> localVarResponse = PQAExecuteWithHttpInfo(body, company);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PQA_Execute PQA_Execute
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>ApiResponse of InlineResponseDefault38</returns>
        public ApiResponse< InlineResponseDefault38 > PQAExecuteWithHttpInfo (ODataV4POWERPQAExecuteBody body, string company)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PQAExecute");
            // verify the required parameter 'company' is set
            if (company == null)
                throw new ApiException(400, "Missing required parameter 'company' when calling DefaultApi->PQAExecute");

            var localVarPath = "/ODataV4/POWERPQA_Execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (company != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "company", company)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PQAExecute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault38>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault38) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault38)));
        }

        /// <summary>
        /// PQA_Execute PQA_Execute
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>Task of InlineResponseDefault38</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault38> PQAExecuteAsync (ODataV4POWERPQAExecuteBody body, string company)
        {
             ApiResponse<InlineResponseDefault38> localVarResponse = await PQAExecuteAsyncWithHttpInfo(body, company);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PQA_Execute PQA_Execute
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="company"></param>
        /// <returns>Task of ApiResponse (InlineResponseDefault38)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault38>> PQAExecuteAsyncWithHttpInfo (ODataV4POWERPQAExecuteBody body, string company)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PQAExecute");
            // verify the required parameter 'company' is set
            if (company == null)
                throw new ApiException(400, "Missing required parameter 'company' when calling DefaultApi->PQAExecute");

            var localVarPath = "/ODataV4/POWERPQA_Execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (company != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "company", company)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PQAExecute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault38>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault38) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault38)));
        }

        /// <summary>
        /// PQA_GetInspectionFailures PQA_GetInspectionFailures
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault15</returns>
        public InlineResponseDefault15 PQAGetInspectionFailures (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault15> localVarResponse = PQAGetInspectionFailuresWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PQA_GetInspectionFailures PQA_GetInspectionFailures
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault15</returns>
        public ApiResponse< InlineResponseDefault15 > PQAGetInspectionFailuresWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PQAGetInspectionFailures");

            var localVarPath = "/api/eos/pqa/v1.0/companies({companyId})/inspectionFailures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PQAGetInspectionFailures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault15>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault15) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault15)));
        }

        /// <summary>
        /// PQA_GetInspectionFailures PQA_GetInspectionFailures
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault15</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault15> PQAGetInspectionFailuresAsync (string companyId, string filter = null, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault15> localVarResponse = await PQAGetInspectionFailuresAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PQA_GetInspectionFailures PQA_GetInspectionFailures
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault15)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault15>> PQAGetInspectionFailuresAsyncWithHttpInfo (string companyId, string filter = null, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PQAGetInspectionFailures");

            var localVarPath = "/api/eos/pqa/v1.0/companies({companyId})/inspectionFailures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PQAGetInspectionFailures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault15>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault15) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault15)));
        }

        /// <summary>
        /// PQA_GetInspectionOrderLines PQA_GetInspectionOrderLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault39</returns>
        public InlineResponseDefault39 PQAGetInspectionOrderLines (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault39> localVarResponse = PQAGetInspectionOrderLinesWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PQA_GetInspectionOrderLines PQA_GetInspectionOrderLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault39</returns>
        public ApiResponse< InlineResponseDefault39 > PQAGetInspectionOrderLinesWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PQAGetInspectionOrderLines");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->PQAGetInspectionOrderLines");

            var localVarPath = "/api/eos/pqa/v1.0/companies({companyId})/inspectionOrderLines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PQAGetInspectionOrderLines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault39>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault39) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault39)));
        }

        /// <summary>
        /// PQA_GetInspectionOrderLines PQA_GetInspectionOrderLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault39</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault39> PQAGetInspectionOrderLinesAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault39> localVarResponse = await PQAGetInspectionOrderLinesAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PQA_GetInspectionOrderLines PQA_GetInspectionOrderLines
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault39)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault39>> PQAGetInspectionOrderLinesAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PQAGetInspectionOrderLines");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->PQAGetInspectionOrderLines");

            var localVarPath = "/api/eos/pqa/v1.0/companies({companyId})/inspectionOrderLines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PQAGetInspectionOrderLines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault39>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault39) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault39)));
        }

        /// <summary>
        /// PQA_GetInspectionOrders PQA_GetInspectionOrders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault40</returns>
        public InlineResponseDefault40 PQAGetInspectionOrders (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault40> localVarResponse = PQAGetInspectionOrdersWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PQA_GetInspectionOrders PQA_GetInspectionOrders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault40</returns>
        public ApiResponse< InlineResponseDefault40 > PQAGetInspectionOrdersWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PQAGetInspectionOrders");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->PQAGetInspectionOrders");

            var localVarPath = "/api/eos/pqa/v1.0/companies({companyId})/inspectionOrders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PQAGetInspectionOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault40>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault40) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault40)));
        }

        /// <summary>
        /// PQA_GetInspectionOrders PQA_GetInspectionOrders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault40</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault40> PQAGetInspectionOrdersAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault40> localVarResponse = await PQAGetInspectionOrdersAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PQA_GetInspectionOrders PQA_GetInspectionOrders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault40)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault40>> PQAGetInspectionOrdersAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PQAGetInspectionOrders");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->PQAGetInspectionOrders");

            var localVarPath = "/api/eos/pqa/v1.0/companies({companyId})/inspectionOrders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PQAGetInspectionOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault40>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault40) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault40)));
        }

        /// <summary>
        /// PQA_GetInspectionResults PQA_GetInspectionResults
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault41</returns>
        public InlineResponseDefault41 PQAGetInspectionResults (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault41> localVarResponse = PQAGetInspectionResultsWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PQA_GetInspectionResults PQA_GetInspectionResults
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault41</returns>
        public ApiResponse< InlineResponseDefault41 > PQAGetInspectionResultsWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PQAGetInspectionResults");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->PQAGetInspectionResults");

            var localVarPath = "/api/eos/pqa/v1.0/companies({companyId})/inspectionResults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PQAGetInspectionResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault41>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault41) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault41)));
        }

        /// <summary>
        /// PQA_GetInspectionResults PQA_GetInspectionResults
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault41</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault41> PQAGetInspectionResultsAsync (string companyId, string filter, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault41> localVarResponse = await PQAGetInspectionResultsAsyncWithHttpInfo(companyId, filter, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PQA_GetInspectionResults PQA_GetInspectionResults
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="filter"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault41)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault41>> PQAGetInspectionResultsAsyncWithHttpInfo (string companyId, string filter, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PQAGetInspectionResults");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DefaultApi->PQAGetInspectionResults");

            var localVarPath = "/api/eos/pqa/v1.0/companies({companyId})/inspectionResults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PQAGetInspectionResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault41>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault41) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault41)));
        }

        /// <summary>
        /// PQA_GetParameterAttributeCodes PQA_GetParameterAttributeCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>InlineResponseDefault42</returns>
        public InlineResponseDefault42 PQAGetParameterAttributeCodes (string companyId, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault42> localVarResponse = PQAGetParameterAttributeCodesWithHttpInfo(companyId, orderby, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PQA_GetParameterAttributeCodes PQA_GetParameterAttributeCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>ApiResponse of InlineResponseDefault42</returns>
        public ApiResponse< InlineResponseDefault42 > PQAGetParameterAttributeCodesWithHttpInfo (string companyId, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PQAGetParameterAttributeCodes");

            var localVarPath = "/api/eos/pqa/v1.0/companies({companyId})/parameterAttributeCodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PQAGetParameterAttributeCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault42>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault42) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault42)));
        }

        /// <summary>
        /// PQA_GetParameterAttributeCodes PQA_GetParameterAttributeCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of InlineResponseDefault42</returns>
        public async System.Threading.Tasks.Task<InlineResponseDefault42> PQAGetParameterAttributeCodesAsync (string companyId, string orderby = null, string select = null)
        {
             ApiResponse<InlineResponseDefault42> localVarResponse = await PQAGetParameterAttributeCodesAsyncWithHttpInfo(companyId, orderby, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PQA_GetParameterAttributeCodes PQA_GetParameterAttributeCodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="select"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponseDefault42)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponseDefault42>> PQAGetParameterAttributeCodesAsyncWithHttpInfo (string companyId, string orderby = null, string select = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->PQAGetParameterAttributeCodes");

            var localVarPath = "/api/eos/pqa/v1.0/companies({companyId})/parameterAttributeCodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            // authentication (basic-auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PQAGetParameterAttributeCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponseDefault42>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponseDefault42) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponseDefault42)));
        }

    }
}
