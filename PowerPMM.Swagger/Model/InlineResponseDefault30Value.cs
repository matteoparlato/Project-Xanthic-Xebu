/* 
 * Power PLM Connector
 *
 * The custom connector used by Power PLM by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault30Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault30Value :  IEquatable<InlineResponseDefault30Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault30Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="employeeNo">employeeNo.</param>
        /// <param name="activityInt">activityInt.</param>
        /// <param name="activityCaption">activityCaption.</param>
        /// <param name="code">code.</param>
        /// <param name="scopeInt">scopeInt.</param>
        /// <param name="scopeCaption">scopeCaption.</param>
        /// <param name="captionName">captionName.</param>
        /// <param name="captionValue">captionValue.</param>
        /// <param name="sequence">sequence.</param>
        public InlineResponseDefault30Value(string odataEtag = default(string), string systemId = default(string), string employeeNo = default(string), decimal? activityInt = default(decimal?), string activityCaption = default(string), string code = default(string), decimal? scopeInt = default(decimal?), string scopeCaption = default(string), string captionName = default(string), string captionValue = default(string), decimal? sequence = default(decimal?))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.EmployeeNo = employeeNo;
            this.ActivityInt = activityInt;
            this.ActivityCaption = activityCaption;
            this.Code = code;
            this.ScopeInt = scopeInt;
            this.ScopeCaption = scopeCaption;
            this.CaptionName = captionName;
            this.CaptionValue = captionValue;
            this.Sequence = sequence;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// employeeNo
        /// </summary>
        /// <value>employeeNo</value>
        [DataMember(Name="employeeNo", EmitDefaultValue=false)]
        public string EmployeeNo { get; set; }

        /// <summary>
        /// activityInt
        /// </summary>
        /// <value>activityInt</value>
        [DataMember(Name="activityInt", EmitDefaultValue=false)]
        public decimal? ActivityInt { get; set; }

        /// <summary>
        /// activityCaption
        /// </summary>
        /// <value>activityCaption</value>
        [DataMember(Name="activityCaption", EmitDefaultValue=false)]
        public string ActivityCaption { get; set; }

        /// <summary>
        /// code
        /// </summary>
        /// <value>code</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// scopeInt
        /// </summary>
        /// <value>scopeInt</value>
        [DataMember(Name="scopeInt", EmitDefaultValue=false)]
        public decimal? ScopeInt { get; set; }

        /// <summary>
        /// scopeCaption
        /// </summary>
        /// <value>scopeCaption</value>
        [DataMember(Name="scopeCaption", EmitDefaultValue=false)]
        public string ScopeCaption { get; set; }

        /// <summary>
        /// captionName
        /// </summary>
        /// <value>captionName</value>
        [DataMember(Name="captionName", EmitDefaultValue=false)]
        public string CaptionName { get; set; }

        /// <summary>
        /// captionValue
        /// </summary>
        /// <value>captionValue</value>
        [DataMember(Name="captionValue", EmitDefaultValue=false)]
        public string CaptionValue { get; set; }

        /// <summary>
        /// sequence
        /// </summary>
        /// <value>sequence</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public decimal? Sequence { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault30Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  EmployeeNo: ").Append(EmployeeNo).Append("\n");
            sb.Append("  ActivityInt: ").Append(ActivityInt).Append("\n");
            sb.Append("  ActivityCaption: ").Append(ActivityCaption).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ScopeInt: ").Append(ScopeInt).Append("\n");
            sb.Append("  ScopeCaption: ").Append(ScopeCaption).Append("\n");
            sb.Append("  CaptionName: ").Append(CaptionName).Append("\n");
            sb.Append("  CaptionValue: ").Append(CaptionValue).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault30Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault30Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault30Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault30Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.EmployeeNo == input.EmployeeNo ||
                    (this.EmployeeNo != null &&
                    this.EmployeeNo.Equals(input.EmployeeNo))
                ) && 
                (
                    this.ActivityInt == input.ActivityInt ||
                    (this.ActivityInt != null &&
                    this.ActivityInt.Equals(input.ActivityInt))
                ) && 
                (
                    this.ActivityCaption == input.ActivityCaption ||
                    (this.ActivityCaption != null &&
                    this.ActivityCaption.Equals(input.ActivityCaption))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.ScopeInt == input.ScopeInt ||
                    (this.ScopeInt != null &&
                    this.ScopeInt.Equals(input.ScopeInt))
                ) && 
                (
                    this.ScopeCaption == input.ScopeCaption ||
                    (this.ScopeCaption != null &&
                    this.ScopeCaption.Equals(input.ScopeCaption))
                ) && 
                (
                    this.CaptionName == input.CaptionName ||
                    (this.CaptionName != null &&
                    this.CaptionName.Equals(input.CaptionName))
                ) && 
                (
                    this.CaptionValue == input.CaptionValue ||
                    (this.CaptionValue != null &&
                    this.CaptionValue.Equals(input.CaptionValue))
                ) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.EmployeeNo != null)
                    hashCode = hashCode * 59 + this.EmployeeNo.GetHashCode();
                if (this.ActivityInt != null)
                    hashCode = hashCode * 59 + this.ActivityInt.GetHashCode();
                if (this.ActivityCaption != null)
                    hashCode = hashCode * 59 + this.ActivityCaption.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.ScopeInt != null)
                    hashCode = hashCode * 59 + this.ScopeInt.GetHashCode();
                if (this.ScopeCaption != null)
                    hashCode = hashCode * 59 + this.ScopeCaption.GetHashCode();
                if (this.CaptionName != null)
                    hashCode = hashCode * 59 + this.CaptionName.GetHashCode();
                if (this.CaptionValue != null)
                    hashCode = hashCode * 59 + this.CaptionValue.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
