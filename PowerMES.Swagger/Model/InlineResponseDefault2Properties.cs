/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault2Properties
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault2Properties :  IEquatable<InlineResponseDefault2Properties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault2Properties" /> class.
        /// </summary>
        /// <param name="twinPropertyKey">twinPropertyKey.</param>
        /// <param name="twinPropertyValue">twinPropertyValue.</param>
        public InlineResponseDefault2Properties(string twinPropertyKey = default(string), string twinPropertyValue = default(string))
        {
            this.TwinPropertyKey = twinPropertyKey;
            this.TwinPropertyValue = twinPropertyValue;
        }
        
        /// <summary>
        /// twinPropertyKey
        /// </summary>
        /// <value>twinPropertyKey</value>
        [DataMember(Name="twinPropertyKey", EmitDefaultValue=false)]
        public string TwinPropertyKey { get; set; }

        /// <summary>
        /// twinPropertyValue
        /// </summary>
        /// <value>twinPropertyValue</value>
        [DataMember(Name="twinPropertyValue", EmitDefaultValue=false)]
        public string TwinPropertyValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault2Properties {\n");
            sb.Append("  TwinPropertyKey: ").Append(TwinPropertyKey).Append("\n");
            sb.Append("  TwinPropertyValue: ").Append(TwinPropertyValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault2Properties);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault2Properties instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault2Properties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault2Properties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TwinPropertyKey == input.TwinPropertyKey ||
                    (this.TwinPropertyKey != null &&
                    this.TwinPropertyKey.Equals(input.TwinPropertyKey))
                ) && 
                (
                    this.TwinPropertyValue == input.TwinPropertyValue ||
                    (this.TwinPropertyValue != null &&
                    this.TwinPropertyValue.Equals(input.TwinPropertyValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TwinPropertyKey != null)
                    hashCode = hashCode * 59 + this.TwinPropertyKey.GetHashCode();
                if (this.TwinPropertyValue != null)
                    hashCode = hashCode * 59 + this.TwinPropertyValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
