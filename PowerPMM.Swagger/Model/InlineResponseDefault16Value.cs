/* 
 * Power PLM Connector
 *
 * The custom connector used by Power PLM by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault16Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault16Value :  IEquatable<InlineResponseDefault16Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault16Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="machineNo">machineNo.</param>
        /// <param name="componentMachineNo">componentMachineNo.</param>
        /// <param name="componentMachineDescription">componentMachineDescription.</param>
        /// <param name="startingDate">startingDate.</param>
        /// <param name="endingDate">endingDate.</param>
        public InlineResponseDefault16Value(string odataEtag = default(string), string systemId = default(string), string machineNo = default(string), string componentMachineNo = default(string), string componentMachineDescription = default(string), string startingDate = default(string), string endingDate = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.MachineNo = machineNo;
            this.ComponentMachineNo = componentMachineNo;
            this.ComponentMachineDescription = componentMachineDescription;
            this.StartingDate = startingDate;
            this.EndingDate = endingDate;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// machineNo
        /// </summary>
        /// <value>machineNo</value>
        [DataMember(Name="machineNo", EmitDefaultValue=false)]
        public string MachineNo { get; set; }

        /// <summary>
        /// componentMachineNo
        /// </summary>
        /// <value>componentMachineNo</value>
        [DataMember(Name="componentMachineNo", EmitDefaultValue=false)]
        public string ComponentMachineNo { get; set; }

        /// <summary>
        /// componentMachineDescription
        /// </summary>
        /// <value>componentMachineDescription</value>
        [DataMember(Name="componentMachineDescription", EmitDefaultValue=false)]
        public string ComponentMachineDescription { get; set; }

        /// <summary>
        /// startingDate
        /// </summary>
        /// <value>startingDate</value>
        [DataMember(Name="startingDate", EmitDefaultValue=false)]
        public string StartingDate { get; set; }

        /// <summary>
        /// endingDate
        /// </summary>
        /// <value>endingDate</value>
        [DataMember(Name="endingDate", EmitDefaultValue=false)]
        public string EndingDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault16Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  MachineNo: ").Append(MachineNo).Append("\n");
            sb.Append("  ComponentMachineNo: ").Append(ComponentMachineNo).Append("\n");
            sb.Append("  ComponentMachineDescription: ").Append(ComponentMachineDescription).Append("\n");
            sb.Append("  StartingDate: ").Append(StartingDate).Append("\n");
            sb.Append("  EndingDate: ").Append(EndingDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault16Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault16Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault16Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault16Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.MachineNo == input.MachineNo ||
                    (this.MachineNo != null &&
                    this.MachineNo.Equals(input.MachineNo))
                ) && 
                (
                    this.ComponentMachineNo == input.ComponentMachineNo ||
                    (this.ComponentMachineNo != null &&
                    this.ComponentMachineNo.Equals(input.ComponentMachineNo))
                ) && 
                (
                    this.ComponentMachineDescription == input.ComponentMachineDescription ||
                    (this.ComponentMachineDescription != null &&
                    this.ComponentMachineDescription.Equals(input.ComponentMachineDescription))
                ) && 
                (
                    this.StartingDate == input.StartingDate ||
                    (this.StartingDate != null &&
                    this.StartingDate.Equals(input.StartingDate))
                ) && 
                (
                    this.EndingDate == input.EndingDate ||
                    (this.EndingDate != null &&
                    this.EndingDate.Equals(input.EndingDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.MachineNo != null)
                    hashCode = hashCode * 59 + this.MachineNo.GetHashCode();
                if (this.ComponentMachineNo != null)
                    hashCode = hashCode * 59 + this.ComponentMachineNo.GetHashCode();
                if (this.ComponentMachineDescription != null)
                    hashCode = hashCode * 59 + this.ComponentMachineDescription.GetHashCode();
                if (this.StartingDate != null)
                    hashCode = hashCode * 59 + this.StartingDate.GetHashCode();
                if (this.EndingDate != null)
                    hashCode = hashCode * 59 + this.EndingDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
