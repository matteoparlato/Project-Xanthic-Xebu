/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault19Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault19Value :  IEquatable<InlineResponseDefault19Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault19Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="id">id.</param>
        /// <param name="no">no.</param>
        /// <param name="name">name.</param>
        /// <param name="workCenterNo">workCenterNo.</param>
        /// <param name="status">status.</param>
        /// <param name="statusAsInt">statusAsInt.</param>
        /// <param name="statusName">statusName.</param>
        /// <param name="ioTHubName">ioTHubName.</param>
        /// <param name="ioTDeviceId">ioTDeviceId.</param>
        /// <param name="panelId">panelId.</param>
        public InlineResponseDefault19Value(string odataEtag = default(string), string id = default(string), string no = default(string), string name = default(string), string workCenterNo = default(string), string status = default(string), decimal? statusAsInt = default(decimal?), string statusName = default(string), string ioTHubName = default(string), string ioTDeviceId = default(string), string panelId = default(string))
        {
            this.OdataEtag = odataEtag;
            this.Id = id;
            this.No = no;
            this.Name = name;
            this.WorkCenterNo = workCenterNo;
            this.Status = status;
            this.StatusAsInt = statusAsInt;
            this.StatusName = statusName;
            this.IoTHubName = ioTHubName;
            this.IoTDeviceId = ioTDeviceId;
            this.PanelId = panelId;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// id
        /// </summary>
        /// <value>id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// no
        /// </summary>
        /// <value>no</value>
        [DataMember(Name="no", EmitDefaultValue=false)]
        public string No { get; set; }

        /// <summary>
        /// name
        /// </summary>
        /// <value>name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// workCenterNo
        /// </summary>
        /// <value>workCenterNo</value>
        [DataMember(Name="workCenterNo", EmitDefaultValue=false)]
        public string WorkCenterNo { get; set; }

        /// <summary>
        /// status
        /// </summary>
        /// <value>status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// statusAsInt
        /// </summary>
        /// <value>statusAsInt</value>
        [DataMember(Name="statusAsInt", EmitDefaultValue=false)]
        public decimal? StatusAsInt { get; set; }

        /// <summary>
        /// statusName
        /// </summary>
        /// <value>statusName</value>
        [DataMember(Name="statusName", EmitDefaultValue=false)]
        public string StatusName { get; set; }

        /// <summary>
        /// ioTHubName
        /// </summary>
        /// <value>ioTHubName</value>
        [DataMember(Name="ioTHubName", EmitDefaultValue=false)]
        public string IoTHubName { get; set; }

        /// <summary>
        /// ioTDeviceId
        /// </summary>
        /// <value>ioTDeviceId</value>
        [DataMember(Name="ioTDeviceId", EmitDefaultValue=false)]
        public string IoTDeviceId { get; set; }

        /// <summary>
        /// panelId
        /// </summary>
        /// <value>panelId</value>
        [DataMember(Name="panelId", EmitDefaultValue=false)]
        public string PanelId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault19Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  No: ").Append(No).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  WorkCenterNo: ").Append(WorkCenterNo).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusAsInt: ").Append(StatusAsInt).Append("\n");
            sb.Append("  StatusName: ").Append(StatusName).Append("\n");
            sb.Append("  IoTHubName: ").Append(IoTHubName).Append("\n");
            sb.Append("  IoTDeviceId: ").Append(IoTDeviceId).Append("\n");
            sb.Append("  PanelId: ").Append(PanelId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault19Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault19Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault19Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault19Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.No == input.No ||
                    (this.No != null &&
                    this.No.Equals(input.No))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.WorkCenterNo == input.WorkCenterNo ||
                    (this.WorkCenterNo != null &&
                    this.WorkCenterNo.Equals(input.WorkCenterNo))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusAsInt == input.StatusAsInt ||
                    (this.StatusAsInt != null &&
                    this.StatusAsInt.Equals(input.StatusAsInt))
                ) && 
                (
                    this.StatusName == input.StatusName ||
                    (this.StatusName != null &&
                    this.StatusName.Equals(input.StatusName))
                ) && 
                (
                    this.IoTHubName == input.IoTHubName ||
                    (this.IoTHubName != null &&
                    this.IoTHubName.Equals(input.IoTHubName))
                ) && 
                (
                    this.IoTDeviceId == input.IoTDeviceId ||
                    (this.IoTDeviceId != null &&
                    this.IoTDeviceId.Equals(input.IoTDeviceId))
                ) && 
                (
                    this.PanelId == input.PanelId ||
                    (this.PanelId != null &&
                    this.PanelId.Equals(input.PanelId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.No != null)
                    hashCode = hashCode * 59 + this.No.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.WorkCenterNo != null)
                    hashCode = hashCode * 59 + this.WorkCenterNo.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusAsInt != null)
                    hashCode = hashCode * 59 + this.StatusAsInt.GetHashCode();
                if (this.StatusName != null)
                    hashCode = hashCode * 59 + this.StatusName.GetHashCode();
                if (this.IoTHubName != null)
                    hashCode = hashCode * 59 + this.IoTHubName.GetHashCode();
                if (this.IoTDeviceId != null)
                    hashCode = hashCode * 59 + this.IoTDeviceId.GetHashCode();
                if (this.PanelId != null)
                    hashCode = hashCode * 59 + this.PanelId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
