/* 
 * Power MES Connector
 *
 * The custom connector used by Power MES by EOS Solutions.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponseDefault27Value
    /// </summary>
    [DataContract]
        public partial class InlineResponseDefault27Value :  IEquatable<InlineResponseDefault27Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponseDefault27Value" /> class.
        /// </summary>
        /// <param name="odataEtag">@odata.etag.</param>
        /// <param name="systemId">systemId.</param>
        /// <param name="status">status.</param>
        /// <param name="statusAsInt">statusAsInt.</param>
        /// <param name="statusName">statusName.</param>
        /// <param name="prodOrderNo">prodOrderNo.</param>
        /// <param name="prodOrderLineNo">prodOrderLineNo.</param>
        /// <param name="lineNo">lineNo.</param>
        /// <param name="itemNo">itemNo.</param>
        /// <param name="variantCode">variantCode.</param>
        /// <param name="description">description.</param>
        /// <param name="routingLinkCode">routingLinkCode.</param>
        /// <param name="unitOfMeasureCode">unitOfMeasureCode.</param>
        /// <param name="baseUnitOfMeasure">baseUnitOfMeasure.</param>
        /// <param name="quantityPer">quantityPer.</param>
        /// <param name="quantityBase">quantityBase.</param>
        /// <param name="expectedQtyBase">expectedQtyBase.</param>
        /// <param name="remainingQtyBase">remainingQtyBase.</param>
        /// <param name="dueDateTime">dueDateTime.</param>
        /// <param name="flushingMethod">flushingMethod.</param>
        /// <param name="flushingMethodAsInt">flushingMethodAsInt.</param>
        /// <param name="flushingMethodName">flushingMethodName.</param>
        /// <param name="substitutionAvailable">substitutionAvailable.</param>
        /// <param name="panelId">panelId.</param>
        public InlineResponseDefault27Value(string odataEtag = default(string), string systemId = default(string), string status = default(string), decimal? statusAsInt = default(decimal?), string statusName = default(string), string prodOrderNo = default(string), decimal? prodOrderLineNo = default(decimal?), decimal? lineNo = default(decimal?), string itemNo = default(string), string variantCode = default(string), string description = default(string), string routingLinkCode = default(string), string unitOfMeasureCode = default(string), string baseUnitOfMeasure = default(string), decimal? quantityPer = default(decimal?), decimal? quantityBase = default(decimal?), decimal? expectedQtyBase = default(decimal?), decimal? remainingQtyBase = default(decimal?), string dueDateTime = default(string), string flushingMethod = default(string), decimal? flushingMethodAsInt = default(decimal?), string flushingMethodName = default(string), bool? substitutionAvailable = default(bool?), string panelId = default(string))
        {
            this.OdataEtag = odataEtag;
            this.SystemId = systemId;
            this.Status = status;
            this.StatusAsInt = statusAsInt;
            this.StatusName = statusName;
            this.ProdOrderNo = prodOrderNo;
            this.ProdOrderLineNo = prodOrderLineNo;
            this.LineNo = lineNo;
            this.ItemNo = itemNo;
            this.VariantCode = variantCode;
            this.Description = description;
            this.RoutingLinkCode = routingLinkCode;
            this.UnitOfMeasureCode = unitOfMeasureCode;
            this.BaseUnitOfMeasure = baseUnitOfMeasure;
            this.QuantityPer = quantityPer;
            this.QuantityBase = quantityBase;
            this.ExpectedQtyBase = expectedQtyBase;
            this.RemainingQtyBase = remainingQtyBase;
            this.DueDateTime = dueDateTime;
            this.FlushingMethod = flushingMethod;
            this.FlushingMethodAsInt = flushingMethodAsInt;
            this.FlushingMethodName = flushingMethodName;
            this.SubstitutionAvailable = substitutionAvailable;
            this.PanelId = panelId;
        }
        
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }

        /// <summary>
        /// systemId
        /// </summary>
        /// <value>systemId</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public string SystemId { get; set; }

        /// <summary>
        /// status
        /// </summary>
        /// <value>status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// statusAsInt
        /// </summary>
        /// <value>statusAsInt</value>
        [DataMember(Name="statusAsInt", EmitDefaultValue=false)]
        public decimal? StatusAsInt { get; set; }

        /// <summary>
        /// statusName
        /// </summary>
        /// <value>statusName</value>
        [DataMember(Name="statusName", EmitDefaultValue=false)]
        public string StatusName { get; set; }

        /// <summary>
        /// prodOrderNo
        /// </summary>
        /// <value>prodOrderNo</value>
        [DataMember(Name="prodOrderNo", EmitDefaultValue=false)]
        public string ProdOrderNo { get; set; }

        /// <summary>
        /// prodOrderLineNo
        /// </summary>
        /// <value>prodOrderLineNo</value>
        [DataMember(Name="prodOrderLineNo", EmitDefaultValue=false)]
        public decimal? ProdOrderLineNo { get; set; }

        /// <summary>
        /// lineNo
        /// </summary>
        /// <value>lineNo</value>
        [DataMember(Name="lineNo", EmitDefaultValue=false)]
        public decimal? LineNo { get; set; }

        /// <summary>
        /// itemNo
        /// </summary>
        /// <value>itemNo</value>
        [DataMember(Name="itemNo", EmitDefaultValue=false)]
        public string ItemNo { get; set; }

        /// <summary>
        /// variantCode
        /// </summary>
        /// <value>variantCode</value>
        [DataMember(Name="variantCode", EmitDefaultValue=false)]
        public string VariantCode { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// routingLinkCode
        /// </summary>
        /// <value>routingLinkCode</value>
        [DataMember(Name="routingLinkCode", EmitDefaultValue=false)]
        public string RoutingLinkCode { get; set; }

        /// <summary>
        /// unitOfMeasureCode
        /// </summary>
        /// <value>unitOfMeasureCode</value>
        [DataMember(Name="unitOfMeasureCode", EmitDefaultValue=false)]
        public string UnitOfMeasureCode { get; set; }

        /// <summary>
        /// baseUnitOfMeasure
        /// </summary>
        /// <value>baseUnitOfMeasure</value>
        [DataMember(Name="baseUnitOfMeasure", EmitDefaultValue=false)]
        public string BaseUnitOfMeasure { get; set; }

        /// <summary>
        /// quantityPer
        /// </summary>
        /// <value>quantityPer</value>
        [DataMember(Name="quantityPer", EmitDefaultValue=false)]
        public decimal? QuantityPer { get; set; }

        /// <summary>
        /// quantityBase
        /// </summary>
        /// <value>quantityBase</value>
        [DataMember(Name="quantityBase", EmitDefaultValue=false)]
        public decimal? QuantityBase { get; set; }

        /// <summary>
        /// expectedQtyBase
        /// </summary>
        /// <value>expectedQtyBase</value>
        [DataMember(Name="expectedQtyBase", EmitDefaultValue=false)]
        public decimal? ExpectedQtyBase { get; set; }

        /// <summary>
        /// remainingQtyBase
        /// </summary>
        /// <value>remainingQtyBase</value>
        [DataMember(Name="remainingQtyBase", EmitDefaultValue=false)]
        public decimal? RemainingQtyBase { get; set; }

        /// <summary>
        /// dueDateTime
        /// </summary>
        /// <value>dueDateTime</value>
        [DataMember(Name="dueDateTime", EmitDefaultValue=false)]
        public string DueDateTime { get; set; }

        /// <summary>
        /// flushingMethod
        /// </summary>
        /// <value>flushingMethod</value>
        [DataMember(Name="flushingMethod", EmitDefaultValue=false)]
        public string FlushingMethod { get; set; }

        /// <summary>
        /// flushingMethodAsInt
        /// </summary>
        /// <value>flushingMethodAsInt</value>
        [DataMember(Name="flushingMethodAsInt", EmitDefaultValue=false)]
        public decimal? FlushingMethodAsInt { get; set; }

        /// <summary>
        /// flushingMethodName
        /// </summary>
        /// <value>flushingMethodName</value>
        [DataMember(Name="flushingMethodName", EmitDefaultValue=false)]
        public string FlushingMethodName { get; set; }

        /// <summary>
        /// substitutionAvailable
        /// </summary>
        /// <value>substitutionAvailable</value>
        [DataMember(Name="substitutionAvailable", EmitDefaultValue=false)]
        public bool? SubstitutionAvailable { get; set; }

        /// <summary>
        /// panelId
        /// </summary>
        /// <value>panelId</value>
        [DataMember(Name="panelId", EmitDefaultValue=false)]
        public string PanelId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault27Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusAsInt: ").Append(StatusAsInt).Append("\n");
            sb.Append("  StatusName: ").Append(StatusName).Append("\n");
            sb.Append("  ProdOrderNo: ").Append(ProdOrderNo).Append("\n");
            sb.Append("  ProdOrderLineNo: ").Append(ProdOrderLineNo).Append("\n");
            sb.Append("  LineNo: ").Append(LineNo).Append("\n");
            sb.Append("  ItemNo: ").Append(ItemNo).Append("\n");
            sb.Append("  VariantCode: ").Append(VariantCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RoutingLinkCode: ").Append(RoutingLinkCode).Append("\n");
            sb.Append("  UnitOfMeasureCode: ").Append(UnitOfMeasureCode).Append("\n");
            sb.Append("  BaseUnitOfMeasure: ").Append(BaseUnitOfMeasure).Append("\n");
            sb.Append("  QuantityPer: ").Append(QuantityPer).Append("\n");
            sb.Append("  QuantityBase: ").Append(QuantityBase).Append("\n");
            sb.Append("  ExpectedQtyBase: ").Append(ExpectedQtyBase).Append("\n");
            sb.Append("  RemainingQtyBase: ").Append(RemainingQtyBase).Append("\n");
            sb.Append("  DueDateTime: ").Append(DueDateTime).Append("\n");
            sb.Append("  FlushingMethod: ").Append(FlushingMethod).Append("\n");
            sb.Append("  FlushingMethodAsInt: ").Append(FlushingMethodAsInt).Append("\n");
            sb.Append("  FlushingMethodName: ").Append(FlushingMethodName).Append("\n");
            sb.Append("  SubstitutionAvailable: ").Append(SubstitutionAvailable).Append("\n");
            sb.Append("  PanelId: ").Append(PanelId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponseDefault27Value);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault27Value instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponseDefault27Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault27Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OdataEtag == input.OdataEtag ||
                    (this.OdataEtag != null &&
                    this.OdataEtag.Equals(input.OdataEtag))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusAsInt == input.StatusAsInt ||
                    (this.StatusAsInt != null &&
                    this.StatusAsInt.Equals(input.StatusAsInt))
                ) && 
                (
                    this.StatusName == input.StatusName ||
                    (this.StatusName != null &&
                    this.StatusName.Equals(input.StatusName))
                ) && 
                (
                    this.ProdOrderNo == input.ProdOrderNo ||
                    (this.ProdOrderNo != null &&
                    this.ProdOrderNo.Equals(input.ProdOrderNo))
                ) && 
                (
                    this.ProdOrderLineNo == input.ProdOrderLineNo ||
                    (this.ProdOrderLineNo != null &&
                    this.ProdOrderLineNo.Equals(input.ProdOrderLineNo))
                ) && 
                (
                    this.LineNo == input.LineNo ||
                    (this.LineNo != null &&
                    this.LineNo.Equals(input.LineNo))
                ) && 
                (
                    this.ItemNo == input.ItemNo ||
                    (this.ItemNo != null &&
                    this.ItemNo.Equals(input.ItemNo))
                ) && 
                (
                    this.VariantCode == input.VariantCode ||
                    (this.VariantCode != null &&
                    this.VariantCode.Equals(input.VariantCode))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.RoutingLinkCode == input.RoutingLinkCode ||
                    (this.RoutingLinkCode != null &&
                    this.RoutingLinkCode.Equals(input.RoutingLinkCode))
                ) && 
                (
                    this.UnitOfMeasureCode == input.UnitOfMeasureCode ||
                    (this.UnitOfMeasureCode != null &&
                    this.UnitOfMeasureCode.Equals(input.UnitOfMeasureCode))
                ) && 
                (
                    this.BaseUnitOfMeasure == input.BaseUnitOfMeasure ||
                    (this.BaseUnitOfMeasure != null &&
                    this.BaseUnitOfMeasure.Equals(input.BaseUnitOfMeasure))
                ) && 
                (
                    this.QuantityPer == input.QuantityPer ||
                    (this.QuantityPer != null &&
                    this.QuantityPer.Equals(input.QuantityPer))
                ) && 
                (
                    this.QuantityBase == input.QuantityBase ||
                    (this.QuantityBase != null &&
                    this.QuantityBase.Equals(input.QuantityBase))
                ) && 
                (
                    this.ExpectedQtyBase == input.ExpectedQtyBase ||
                    (this.ExpectedQtyBase != null &&
                    this.ExpectedQtyBase.Equals(input.ExpectedQtyBase))
                ) && 
                (
                    this.RemainingQtyBase == input.RemainingQtyBase ||
                    (this.RemainingQtyBase != null &&
                    this.RemainingQtyBase.Equals(input.RemainingQtyBase))
                ) && 
                (
                    this.DueDateTime == input.DueDateTime ||
                    (this.DueDateTime != null &&
                    this.DueDateTime.Equals(input.DueDateTime))
                ) && 
                (
                    this.FlushingMethod == input.FlushingMethod ||
                    (this.FlushingMethod != null &&
                    this.FlushingMethod.Equals(input.FlushingMethod))
                ) && 
                (
                    this.FlushingMethodAsInt == input.FlushingMethodAsInt ||
                    (this.FlushingMethodAsInt != null &&
                    this.FlushingMethodAsInt.Equals(input.FlushingMethodAsInt))
                ) && 
                (
                    this.FlushingMethodName == input.FlushingMethodName ||
                    (this.FlushingMethodName != null &&
                    this.FlushingMethodName.Equals(input.FlushingMethodName))
                ) && 
                (
                    this.SubstitutionAvailable == input.SubstitutionAvailable ||
                    (this.SubstitutionAvailable != null &&
                    this.SubstitutionAvailable.Equals(input.SubstitutionAvailable))
                ) && 
                (
                    this.PanelId == input.PanelId ||
                    (this.PanelId != null &&
                    this.PanelId.Equals(input.PanelId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OdataEtag != null)
                    hashCode = hashCode * 59 + this.OdataEtag.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusAsInt != null)
                    hashCode = hashCode * 59 + this.StatusAsInt.GetHashCode();
                if (this.StatusName != null)
                    hashCode = hashCode * 59 + this.StatusName.GetHashCode();
                if (this.ProdOrderNo != null)
                    hashCode = hashCode * 59 + this.ProdOrderNo.GetHashCode();
                if (this.ProdOrderLineNo != null)
                    hashCode = hashCode * 59 + this.ProdOrderLineNo.GetHashCode();
                if (this.LineNo != null)
                    hashCode = hashCode * 59 + this.LineNo.GetHashCode();
                if (this.ItemNo != null)
                    hashCode = hashCode * 59 + this.ItemNo.GetHashCode();
                if (this.VariantCode != null)
                    hashCode = hashCode * 59 + this.VariantCode.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.RoutingLinkCode != null)
                    hashCode = hashCode * 59 + this.RoutingLinkCode.GetHashCode();
                if (this.UnitOfMeasureCode != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasureCode.GetHashCode();
                if (this.BaseUnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.BaseUnitOfMeasure.GetHashCode();
                if (this.QuantityPer != null)
                    hashCode = hashCode * 59 + this.QuantityPer.GetHashCode();
                if (this.QuantityBase != null)
                    hashCode = hashCode * 59 + this.QuantityBase.GetHashCode();
                if (this.ExpectedQtyBase != null)
                    hashCode = hashCode * 59 + this.ExpectedQtyBase.GetHashCode();
                if (this.RemainingQtyBase != null)
                    hashCode = hashCode * 59 + this.RemainingQtyBase.GetHashCode();
                if (this.DueDateTime != null)
                    hashCode = hashCode * 59 + this.DueDateTime.GetHashCode();
                if (this.FlushingMethod != null)
                    hashCode = hashCode * 59 + this.FlushingMethod.GetHashCode();
                if (this.FlushingMethodAsInt != null)
                    hashCode = hashCode * 59 + this.FlushingMethodAsInt.GetHashCode();
                if (this.FlushingMethodName != null)
                    hashCode = hashCode * 59 + this.FlushingMethodName.GetHashCode();
                if (this.SubstitutionAvailable != null)
                    hashCode = hashCode * 59 + this.SubstitutionAvailable.GetHashCode();
                if (this.PanelId != null)
                    hashCode = hashCode * 59 + this.PanelId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
